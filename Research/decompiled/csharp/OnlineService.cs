// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OnlineService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D3.OnlineService {

  /// <summary>Holder for reflection information generated from OnlineService.proto</summary>
  public static partial class OnlineServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for OnlineService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OnlineServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNPbmxpbmVTZXJ2aWNlLnByb3RvEhBEMy5PbmxpbmVTZXJ2aWNlIisKCEVu",
            "dGl0eUlkEg8KB2lkX2hpZ2gYASABKAQSDgoGaWRfbG93GAIgASgEItEBCgZH",
            "YW1lSWQSFwoPbWF0Y2htYWtlcl9ob3N0GAEgASgEEhgKEG1hdGNobWFrZXJf",
            "cHJveHkYAiABKAQSFQoNbWF0Y2htYWtlcl9pZBgFIAEoDRIXCg9nYW1lc2Vy",
            "dmVyX2hvc3QYAyABKAQSGAoQZ2FtZXNlcnZlcl9wcm94eRgEIAEoBBIYChBn",
            "YW1lX2luc3RhbmNlX2lkGAYgASgNEhcKD21hdGNobWFrZXJfZ3VpZBgHIAEo",
            "BBIXCg9nYW1lc2VydmVyX2d1aWQYCCABKAQiKQoGSXRlbUlkEg8KB2lkX2hp",
            "Z2gYASABKAQSDgoGaWRfbG93GAIgASgEIkAKEUdhbWVBY2NvdW50SGFuZGxl",
            "EgoKAmlkGAEgASgHEg8KB3Byb2dyYW0YAiABKAcSDgoGcmVnaW9uGAMgASgN",
            "IhkKBkhlcm9JZBIPCgdoZXJvX2lkGAEgASgEInsKCUNoYW5uZWxJZBIMCgR0",
            "eXBlGAEgASgNEi4KBGhvc3QYAiABKAsyIC5EMy5PbmxpbmVTZXJ2aWNlLkNo",
            "YW5uZWxJZC5Ib3N0EgoKAmlkGAMgASgHGiQKBEhvc3QSDQoFbGFiZWwYASAB",
            "KA0SDQoFZXBvY2gYAiABKA0i2QIKI0NhbXBhaWduT3JBZHZlbnR1cmVNb2Rl",
            "Q3JlYXRlUGFyYW1zEgsKA2FjdBgBIAEoERIRCglzbm9fcXVlc3QYAiABKA8S",
            "FQoNcXVlc3Rfc3RlcF9pZBgDIAEoBRI8ChhyZXN1bWVfZnJvbV9zYXZlX2hl",
            "cm9faWQYBCABKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkEiIKGmRl",
            "cHJlY2F0ZWRfb3Blbl90b19mcmllbmRzGAUgASgIEioKImRlcHJlY2F0ZWRf",
            "b3Blbl90b19mcmllbmRzX21lc3NhZ2UYBiABKAkSFgoOaGFuZGljYXBfbGV2",
            "ZWwYByABKAUSEAoIZ2FtZV90YWcYCCABKAkSFQoNbW9uc3Rlcl9sZXZlbBgJ",
            "IAEoBRIsCiRkZXByZWNhdGVkX3dlZWtseV9jaGFsbGVuZ2Vfb3ZlcnJpZGUY",
            "CiABKAUiJAoPUHZQQ3JlYXRlUGFyYW1zEhEKCXNub193b3JsZBgBIAEoDyIz",
            "ChVDaGFsbGVuZ2VDcmVhdGVQYXJhbXMSGgoSY2hhbGxlbmdlX292ZXJyaWRl",
            "GAEgASgNIqsCChBHYW1lQ3JlYXRlUGFyYW1zEhEKCWdhbWVfdHlwZRgBIAEo",
            "ERIWCg5jcmVhdGlvbl9mbGFncxgCIAEoDRJZChpjYW1wYWlnbl9vcl9hZHZl",
            "bnR1cmVfbW9kZRgDIAEoCzI1LkQzLk9ubGluZVNlcnZpY2UuQ2FtcGFpZ25P",
            "ckFkdmVudHVyZU1vZGVDcmVhdGVQYXJhbXMSLgoDcHZwGAQgASgLMiEuRDMu",
            "T25saW5lU2VydmljZS5QdlBDcmVhdGVQYXJhbXMSDAoEbmFtZRgFIAEoCRIX",
            "Cg9vcGVuX3RvX2ZyaWVuZHMYBiABKAgSOgoJY2hhbGxlbmdlGAcgASgLMicu",
            "RDMuT25saW5lU2VydmljZS5DaGFsbGVuZ2VDcmVhdGVQYXJhbXMibwoQSGVy",
            "b0NyZWF0ZVBhcmFtcxIMCgRuYW1lGAEgASgJEhIKCmdiaWRfY2xhc3MYAiAB",
            "KA8SEwoLaXNfaGFyZGNvcmUYAyABKAgSEQoJaXNfZmVtYWxlGAQgASgIEhEK",
            "CWlzX3NlYXNvbhgFIAEoCCI8Cg1Db250ZW50SGFuZGxlEgwKBGhhc2gYASAB",
            "KAkSDQoFdXNhZ2UYAiABKAkSDgoGcmVnaW9uGAMgASgJIlsKDkNvbnRlbnRM",
            "aWNlbnNlEgoKAmlkGAEgASgFEhMKC2V4cGlyZV90aW1lGAIgASgEEhAKCHF1",
            "YW50aXR5GAMgASgNEhYKDnByb3BlcnR5X2ZsYWdzGAQgASgNIiMKD0NvbnRl",
            "bnRMaWNlbnNlcxIQCghsaWNlbnNlcxgBIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.EntityId), global::D3.OnlineService.EntityId.Parser, new[]{ "IdHigh", "IdLow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.GameId), global::D3.OnlineService.GameId.Parser, new[]{ "MatchmakerHost", "MatchmakerProxy", "MatchmakerId", "GameserverHost", "GameserverProxy", "GameInstanceId", "MatchmakerGuid", "GameserverGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.ItemId), global::D3.OnlineService.ItemId.Parser, new[]{ "IdHigh", "IdLow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.GameAccountHandle), global::D3.OnlineService.GameAccountHandle.Parser, new[]{ "Id", "Program", "Region" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.HeroId), global::D3.OnlineService.HeroId.Parser, new[]{ "HeroId_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.ChannelId), global::D3.OnlineService.ChannelId.Parser, new[]{ "Type", "Host", "Id" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.ChannelId.Types.Host), global::D3.OnlineService.ChannelId.Types.Host.Parser, new[]{ "Label", "Epoch" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.CampaignOrAdventureModeCreateParams), global::D3.OnlineService.CampaignOrAdventureModeCreateParams.Parser, new[]{ "Act", "SnoQuest", "QuestStepId", "ResumeFromSaveHeroId", "DeprecatedOpenToFriends", "DeprecatedOpenToFriendsMessage", "HandicapLevel", "GameTag", "MonsterLevel", "DeprecatedWeeklyChallengeOverride" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.PvPCreateParams), global::D3.OnlineService.PvPCreateParams.Parser, new[]{ "SnoWorld" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.ChallengeCreateParams), global::D3.OnlineService.ChallengeCreateParams.Parser, new[]{ "ChallengeOverride" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.GameCreateParams), global::D3.OnlineService.GameCreateParams.Parser, new[]{ "GameType", "CreationFlags", "CampaignOrAdventureMode", "Pvp", "Name", "OpenToFriends", "Challenge" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.HeroCreateParams), global::D3.OnlineService.HeroCreateParams.Parser, new[]{ "Name", "GbidClass", "IsHardcore", "IsFemale", "IsSeason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.ContentHandle), global::D3.OnlineService.ContentHandle.Parser, new[]{ "Hash", "Usage", "Region" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.ContentLicense), global::D3.OnlineService.ContentLicense.Parser, new[]{ "Id", "ExpireTime", "Quantity", "PropertyFlags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.OnlineService.ContentLicenses), global::D3.OnlineService.ContentLicenses.Parser, new[]{ "Licenses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EntityId : pb::IMessage<EntityId> {
    private static readonly pb::MessageParser<EntityId> _parser = new pb::MessageParser<EntityId>(() => new EntityId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityId(EntityId other) : this() {
      idHigh_ = other.idHigh_;
      idLow_ = other.idLow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityId Clone() {
      return new EntityId(this);
    }

    /// <summary>Field number for the "id_high" field.</summary>
    public const int IdHighFieldNumber = 1;
    private ulong idHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdHigh {
      get { return idHigh_; }
      set {
        idHigh_ = value;
      }
    }

    /// <summary>Field number for the "id_low" field.</summary>
    public const int IdLowFieldNumber = 2;
    private ulong idLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdLow {
      get { return idLow_; }
      set {
        idLow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdHigh != other.IdHigh) return false;
      if (IdLow != other.IdLow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdHigh != 0UL) hash ^= IdHigh.GetHashCode();
      if (IdLow != 0UL) hash ^= IdLow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdHigh != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(IdHigh);
      }
      if (IdLow != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IdLow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdHigh != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdHigh);
      }
      if (IdLow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdLow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityId other) {
      if (other == null) {
        return;
      }
      if (other.IdHigh != 0UL) {
        IdHigh = other.IdHigh;
      }
      if (other.IdLow != 0UL) {
        IdLow = other.IdLow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdHigh = input.ReadUInt64();
            break;
          }
          case 16: {
            IdLow = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameId : pb::IMessage<GameId> {
    private static readonly pb::MessageParser<GameId> _parser = new pb::MessageParser<GameId>(() => new GameId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId(GameId other) : this() {
      matchmakerHost_ = other.matchmakerHost_;
      matchmakerProxy_ = other.matchmakerProxy_;
      matchmakerId_ = other.matchmakerId_;
      gameserverHost_ = other.gameserverHost_;
      gameserverProxy_ = other.gameserverProxy_;
      gameInstanceId_ = other.gameInstanceId_;
      matchmakerGuid_ = other.matchmakerGuid_;
      gameserverGuid_ = other.gameserverGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId Clone() {
      return new GameId(this);
    }

    /// <summary>Field number for the "matchmaker_host" field.</summary>
    public const int MatchmakerHostFieldNumber = 1;
    private ulong matchmakerHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchmakerHost {
      get { return matchmakerHost_; }
      set {
        matchmakerHost_ = value;
      }
    }

    /// <summary>Field number for the "matchmaker_proxy" field.</summary>
    public const int MatchmakerProxyFieldNumber = 2;
    private ulong matchmakerProxy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchmakerProxy {
      get { return matchmakerProxy_; }
      set {
        matchmakerProxy_ = value;
      }
    }

    /// <summary>Field number for the "matchmaker_id" field.</summary>
    public const int MatchmakerIdFieldNumber = 5;
    private uint matchmakerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MatchmakerId {
      get { return matchmakerId_; }
      set {
        matchmakerId_ = value;
      }
    }

    /// <summary>Field number for the "gameserver_host" field.</summary>
    public const int GameserverHostFieldNumber = 3;
    private ulong gameserverHost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameserverHost {
      get { return gameserverHost_; }
      set {
        gameserverHost_ = value;
      }
    }

    /// <summary>Field number for the "gameserver_proxy" field.</summary>
    public const int GameserverProxyFieldNumber = 4;
    private ulong gameserverProxy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameserverProxy {
      get { return gameserverProxy_; }
      set {
        gameserverProxy_ = value;
      }
    }

    /// <summary>Field number for the "game_instance_id" field.</summary>
    public const int GameInstanceIdFieldNumber = 6;
    private uint gameInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameInstanceId {
      get { return gameInstanceId_; }
      set {
        gameInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "matchmaker_guid" field.</summary>
    public const int MatchmakerGuidFieldNumber = 7;
    private ulong matchmakerGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MatchmakerGuid {
      get { return matchmakerGuid_; }
      set {
        matchmakerGuid_ = value;
      }
    }

    /// <summary>Field number for the "gameserver_guid" field.</summary>
    public const int GameserverGuidFieldNumber = 8;
    private ulong gameserverGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GameserverGuid {
      get { return gameserverGuid_; }
      set {
        gameserverGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchmakerHost != other.MatchmakerHost) return false;
      if (MatchmakerProxy != other.MatchmakerProxy) return false;
      if (MatchmakerId != other.MatchmakerId) return false;
      if (GameserverHost != other.GameserverHost) return false;
      if (GameserverProxy != other.GameserverProxy) return false;
      if (GameInstanceId != other.GameInstanceId) return false;
      if (MatchmakerGuid != other.MatchmakerGuid) return false;
      if (GameserverGuid != other.GameserverGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchmakerHost != 0UL) hash ^= MatchmakerHost.GetHashCode();
      if (MatchmakerProxy != 0UL) hash ^= MatchmakerProxy.GetHashCode();
      if (MatchmakerId != 0) hash ^= MatchmakerId.GetHashCode();
      if (GameserverHost != 0UL) hash ^= GameserverHost.GetHashCode();
      if (GameserverProxy != 0UL) hash ^= GameserverProxy.GetHashCode();
      if (GameInstanceId != 0) hash ^= GameInstanceId.GetHashCode();
      if (MatchmakerGuid != 0UL) hash ^= MatchmakerGuid.GetHashCode();
      if (GameserverGuid != 0UL) hash ^= GameserverGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MatchmakerHost != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MatchmakerHost);
      }
      if (MatchmakerProxy != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(MatchmakerProxy);
      }
      if (GameserverHost != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GameserverHost);
      }
      if (GameserverProxy != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(GameserverProxy);
      }
      if (MatchmakerId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MatchmakerId);
      }
      if (GameInstanceId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GameInstanceId);
      }
      if (MatchmakerGuid != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MatchmakerGuid);
      }
      if (GameserverGuid != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(GameserverGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchmakerHost != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchmakerHost);
      }
      if (MatchmakerProxy != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchmakerProxy);
      }
      if (MatchmakerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MatchmakerId);
      }
      if (GameserverHost != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameserverHost);
      }
      if (GameserverProxy != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameserverProxy);
      }
      if (GameInstanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameInstanceId);
      }
      if (MatchmakerGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MatchmakerGuid);
      }
      if (GameserverGuid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GameserverGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameId other) {
      if (other == null) {
        return;
      }
      if (other.MatchmakerHost != 0UL) {
        MatchmakerHost = other.MatchmakerHost;
      }
      if (other.MatchmakerProxy != 0UL) {
        MatchmakerProxy = other.MatchmakerProxy;
      }
      if (other.MatchmakerId != 0) {
        MatchmakerId = other.MatchmakerId;
      }
      if (other.GameserverHost != 0UL) {
        GameserverHost = other.GameserverHost;
      }
      if (other.GameserverProxy != 0UL) {
        GameserverProxy = other.GameserverProxy;
      }
      if (other.GameInstanceId != 0) {
        GameInstanceId = other.GameInstanceId;
      }
      if (other.MatchmakerGuid != 0UL) {
        MatchmakerGuid = other.MatchmakerGuid;
      }
      if (other.GameserverGuid != 0UL) {
        GameserverGuid = other.GameserverGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MatchmakerHost = input.ReadUInt64();
            break;
          }
          case 16: {
            MatchmakerProxy = input.ReadUInt64();
            break;
          }
          case 24: {
            GameserverHost = input.ReadUInt64();
            break;
          }
          case 32: {
            GameserverProxy = input.ReadUInt64();
            break;
          }
          case 40: {
            MatchmakerId = input.ReadUInt32();
            break;
          }
          case 48: {
            GameInstanceId = input.ReadUInt32();
            break;
          }
          case 56: {
            MatchmakerGuid = input.ReadUInt64();
            break;
          }
          case 64: {
            GameserverGuid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemId : pb::IMessage<ItemId> {
    private static readonly pb::MessageParser<ItemId> _parser = new pb::MessageParser<ItemId>(() => new ItemId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemId(ItemId other) : this() {
      idHigh_ = other.idHigh_;
      idLow_ = other.idLow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemId Clone() {
      return new ItemId(this);
    }

    /// <summary>Field number for the "id_high" field.</summary>
    public const int IdHighFieldNumber = 1;
    private ulong idHigh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdHigh {
      get { return idHigh_; }
      set {
        idHigh_ = value;
      }
    }

    /// <summary>Field number for the "id_low" field.</summary>
    public const int IdLowFieldNumber = 2;
    private ulong idLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdLow {
      get { return idLow_; }
      set {
        idLow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdHigh != other.IdHigh) return false;
      if (IdLow != other.IdLow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdHigh != 0UL) hash ^= IdHigh.GetHashCode();
      if (IdLow != 0UL) hash ^= IdLow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdHigh != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(IdHigh);
      }
      if (IdLow != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IdLow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdHigh != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdHigh);
      }
      if (IdLow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdLow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemId other) {
      if (other == null) {
        return;
      }
      if (other.IdHigh != 0UL) {
        IdHigh = other.IdHigh;
      }
      if (other.IdLow != 0UL) {
        IdLow = other.IdLow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdHigh = input.ReadUInt64();
            break;
          }
          case 16: {
            IdLow = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameAccountHandle : pb::IMessage<GameAccountHandle> {
    private static readonly pb::MessageParser<GameAccountHandle> _parser = new pb::MessageParser<GameAccountHandle>(() => new GameAccountHandle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameAccountHandle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAccountHandle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAccountHandle(GameAccountHandle other) : this() {
      id_ = other.id_;
      program_ = other.program_;
      region_ = other.region_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAccountHandle Clone() {
      return new GameAccountHandle(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "program" field.</summary>
    public const int ProgramFieldNumber = 2;
    private uint program_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Program {
      get { return program_; }
      set {
        program_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 3;
    private uint region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameAccountHandle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameAccountHandle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Program != other.Program) return false;
      if (Region != other.Region) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Program != 0) hash ^= Program.GetHashCode();
      if (Region != 0) hash ^= Region.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Id);
      }
      if (Program != 0) {
        output.WriteRawTag(21);
        output.WriteFixed32(Program);
      }
      if (Region != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Region);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + 4;
      }
      if (Program != 0) {
        size += 1 + 4;
      }
      if (Region != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Region);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameAccountHandle other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Program != 0) {
        Program = other.Program;
      }
      if (other.Region != 0) {
        Region = other.Region;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Id = input.ReadFixed32();
            break;
          }
          case 21: {
            Program = input.ReadFixed32();
            break;
          }
          case 24: {
            Region = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroId : pb::IMessage<HeroId> {
    private static readonly pb::MessageParser<HeroId> _parser = new pb::MessageParser<HeroId>(() => new HeroId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroId(HeroId other) : this() {
      heroId_ = other.heroId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroId Clone() {
      return new HeroId(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroId_FieldNumber = 1;
    private ulong heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HeroId_ {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId_ != other.HeroId_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId_ != 0UL) hash ^= HeroId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId_ != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(HeroId_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId_ != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeroId_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroId other) {
      if (other == null) {
        return;
      }
      if (other.HeroId_ != 0UL) {
        HeroId_ = other.HeroId_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId_ = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelId : pb::IMessage<ChannelId> {
    private static readonly pb::MessageParser<ChannelId> _parser = new pb::MessageParser<ChannelId>(() => new ChannelId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelId(ChannelId other) : this() {
      type_ = other.type_;
      host_ = other.host_ != null ? other.host_.Clone() : null;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelId Clone() {
      return new ChannelId(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private global::D3.OnlineService.ChannelId.Types.Host host_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.ChannelId.Types.Host Host {
      get { return host_; }
      set {
        host_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Host, other.Host)) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (host_ != null) hash ^= Host.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (host_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Host);
      }
      if (Id != 0) {
        output.WriteRawTag(29);
        output.WriteFixed32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (host_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Host);
      }
      if (Id != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelId other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.host_ != null) {
        if (host_ == null) {
          host_ = new global::D3.OnlineService.ChannelId.Types.Host();
        }
        Host.MergeFrom(other.Host);
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            if (host_ == null) {
              host_ = new global::D3.OnlineService.ChannelId.Types.Host();
            }
            input.ReadMessage(host_);
            break;
          }
          case 29: {
            Id = input.ReadFixed32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChannelId message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Host : pb::IMessage<Host> {
        private static readonly pb::MessageParser<Host> _parser = new pb::MessageParser<Host>(() => new Host());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Host> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::D3.OnlineService.ChannelId.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Host() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Host(Host other) : this() {
          label_ = other.label_;
          epoch_ = other.epoch_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Host Clone() {
          return new Host(this);
        }

        /// <summary>Field number for the "label" field.</summary>
        public const int LabelFieldNumber = 1;
        private uint label_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Label {
          get { return label_; }
          set {
            label_ = value;
          }
        }

        /// <summary>Field number for the "epoch" field.</summary>
        public const int EpochFieldNumber = 2;
        private uint epoch_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Epoch {
          get { return epoch_; }
          set {
            epoch_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Host);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Host other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Label != other.Label) return false;
          if (Epoch != other.Epoch) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Label != 0) hash ^= Label.GetHashCode();
          if (Epoch != 0) hash ^= Epoch.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Label != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Label);
          }
          if (Epoch != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Epoch);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Label != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Label);
          }
          if (Epoch != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Epoch);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Host other) {
          if (other == null) {
            return;
          }
          if (other.Label != 0) {
            Label = other.Label;
          }
          if (other.Epoch != 0) {
            Epoch = other.Epoch;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Label = input.ReadUInt32();
                break;
              }
              case 16: {
                Epoch = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class CampaignOrAdventureModeCreateParams : pb::IMessage<CampaignOrAdventureModeCreateParams> {
    private static readonly pb::MessageParser<CampaignOrAdventureModeCreateParams> _parser = new pb::MessageParser<CampaignOrAdventureModeCreateParams>(() => new CampaignOrAdventureModeCreateParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CampaignOrAdventureModeCreateParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CampaignOrAdventureModeCreateParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CampaignOrAdventureModeCreateParams(CampaignOrAdventureModeCreateParams other) : this() {
      act_ = other.act_;
      snoQuest_ = other.snoQuest_;
      questStepId_ = other.questStepId_;
      resumeFromSaveHeroId_ = other.resumeFromSaveHeroId_ != null ? other.resumeFromSaveHeroId_.Clone() : null;
      deprecatedOpenToFriends_ = other.deprecatedOpenToFriends_;
      deprecatedOpenToFriendsMessage_ = other.deprecatedOpenToFriendsMessage_;
      handicapLevel_ = other.handicapLevel_;
      gameTag_ = other.gameTag_;
      monsterLevel_ = other.monsterLevel_;
      deprecatedWeeklyChallengeOverride_ = other.deprecatedWeeklyChallengeOverride_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CampaignOrAdventureModeCreateParams Clone() {
      return new CampaignOrAdventureModeCreateParams(this);
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 1;
    private int act_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Act {
      get { return act_; }
      set {
        act_ = value;
      }
    }

    /// <summary>Field number for the "sno_quest" field.</summary>
    public const int SnoQuestFieldNumber = 2;
    private int snoQuest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SnoQuest {
      get { return snoQuest_; }
      set {
        snoQuest_ = value;
      }
    }

    /// <summary>Field number for the "quest_step_id" field.</summary>
    public const int QuestStepIdFieldNumber = 3;
    private int questStepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestStepId {
      get { return questStepId_; }
      set {
        questStepId_ = value;
      }
    }

    /// <summary>Field number for the "resume_from_save_hero_id" field.</summary>
    public const int ResumeFromSaveHeroIdFieldNumber = 4;
    private global::D3.OnlineService.EntityId resumeFromSaveHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId ResumeFromSaveHeroId {
      get { return resumeFromSaveHeroId_; }
      set {
        resumeFromSaveHeroId_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_open_to_friends" field.</summary>
    public const int DeprecatedOpenToFriendsFieldNumber = 5;
    private bool deprecatedOpenToFriends_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeprecatedOpenToFriends {
      get { return deprecatedOpenToFriends_; }
      set {
        deprecatedOpenToFriends_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_open_to_friends_message" field.</summary>
    public const int DeprecatedOpenToFriendsMessageFieldNumber = 6;
    private string deprecatedOpenToFriendsMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeprecatedOpenToFriendsMessage {
      get { return deprecatedOpenToFriendsMessage_; }
      set {
        deprecatedOpenToFriendsMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "handicap_level" field.</summary>
    public const int HandicapLevelFieldNumber = 7;
    private int handicapLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HandicapLevel {
      get { return handicapLevel_; }
      set {
        handicapLevel_ = value;
      }
    }

    /// <summary>Field number for the "game_tag" field.</summary>
    public const int GameTagFieldNumber = 8;
    private string gameTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameTag {
      get { return gameTag_; }
      set {
        gameTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "monster_level" field.</summary>
    public const int MonsterLevelFieldNumber = 9;
    private int monsterLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonsterLevel {
      get { return monsterLevel_; }
      set {
        monsterLevel_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_weekly_challenge_override" field.</summary>
    public const int DeprecatedWeeklyChallengeOverrideFieldNumber = 10;
    private int deprecatedWeeklyChallengeOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedWeeklyChallengeOverride {
      get { return deprecatedWeeklyChallengeOverride_; }
      set {
        deprecatedWeeklyChallengeOverride_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CampaignOrAdventureModeCreateParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CampaignOrAdventureModeCreateParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Act != other.Act) return false;
      if (SnoQuest != other.SnoQuest) return false;
      if (QuestStepId != other.QuestStepId) return false;
      if (!object.Equals(ResumeFromSaveHeroId, other.ResumeFromSaveHeroId)) return false;
      if (DeprecatedOpenToFriends != other.DeprecatedOpenToFriends) return false;
      if (DeprecatedOpenToFriendsMessage != other.DeprecatedOpenToFriendsMessage) return false;
      if (HandicapLevel != other.HandicapLevel) return false;
      if (GameTag != other.GameTag) return false;
      if (MonsterLevel != other.MonsterLevel) return false;
      if (DeprecatedWeeklyChallengeOverride != other.DeprecatedWeeklyChallengeOverride) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Act != 0) hash ^= Act.GetHashCode();
      if (SnoQuest != 0) hash ^= SnoQuest.GetHashCode();
      if (QuestStepId != 0) hash ^= QuestStepId.GetHashCode();
      if (resumeFromSaveHeroId_ != null) hash ^= ResumeFromSaveHeroId.GetHashCode();
      if (DeprecatedOpenToFriends != false) hash ^= DeprecatedOpenToFriends.GetHashCode();
      if (DeprecatedOpenToFriendsMessage.Length != 0) hash ^= DeprecatedOpenToFriendsMessage.GetHashCode();
      if (HandicapLevel != 0) hash ^= HandicapLevel.GetHashCode();
      if (GameTag.Length != 0) hash ^= GameTag.GetHashCode();
      if (MonsterLevel != 0) hash ^= MonsterLevel.GetHashCode();
      if (DeprecatedWeeklyChallengeOverride != 0) hash ^= DeprecatedWeeklyChallengeOverride.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Act != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Act);
      }
      if (SnoQuest != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(SnoQuest);
      }
      if (QuestStepId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(QuestStepId);
      }
      if (resumeFromSaveHeroId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ResumeFromSaveHeroId);
      }
      if (DeprecatedOpenToFriends != false) {
        output.WriteRawTag(40);
        output.WriteBool(DeprecatedOpenToFriends);
      }
      if (DeprecatedOpenToFriendsMessage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DeprecatedOpenToFriendsMessage);
      }
      if (HandicapLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HandicapLevel);
      }
      if (GameTag.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GameTag);
      }
      if (MonsterLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MonsterLevel);
      }
      if (DeprecatedWeeklyChallengeOverride != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DeprecatedWeeklyChallengeOverride);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Act != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Act);
      }
      if (SnoQuest != 0) {
        size += 1 + 4;
      }
      if (QuestStepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestStepId);
      }
      if (resumeFromSaveHeroId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResumeFromSaveHeroId);
      }
      if (DeprecatedOpenToFriends != false) {
        size += 1 + 1;
      }
      if (DeprecatedOpenToFriendsMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeprecatedOpenToFriendsMessage);
      }
      if (HandicapLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HandicapLevel);
      }
      if (GameTag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameTag);
      }
      if (MonsterLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterLevel);
      }
      if (DeprecatedWeeklyChallengeOverride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeprecatedWeeklyChallengeOverride);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CampaignOrAdventureModeCreateParams other) {
      if (other == null) {
        return;
      }
      if (other.Act != 0) {
        Act = other.Act;
      }
      if (other.SnoQuest != 0) {
        SnoQuest = other.SnoQuest;
      }
      if (other.QuestStepId != 0) {
        QuestStepId = other.QuestStepId;
      }
      if (other.resumeFromSaveHeroId_ != null) {
        if (resumeFromSaveHeroId_ == null) {
          resumeFromSaveHeroId_ = new global::D3.OnlineService.EntityId();
        }
        ResumeFromSaveHeroId.MergeFrom(other.ResumeFromSaveHeroId);
      }
      if (other.DeprecatedOpenToFriends != false) {
        DeprecatedOpenToFriends = other.DeprecatedOpenToFriends;
      }
      if (other.DeprecatedOpenToFriendsMessage.Length != 0) {
        DeprecatedOpenToFriendsMessage = other.DeprecatedOpenToFriendsMessage;
      }
      if (other.HandicapLevel != 0) {
        HandicapLevel = other.HandicapLevel;
      }
      if (other.GameTag.Length != 0) {
        GameTag = other.GameTag;
      }
      if (other.MonsterLevel != 0) {
        MonsterLevel = other.MonsterLevel;
      }
      if (other.DeprecatedWeeklyChallengeOverride != 0) {
        DeprecatedWeeklyChallengeOverride = other.DeprecatedWeeklyChallengeOverride;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Act = input.ReadSInt32();
            break;
          }
          case 21: {
            SnoQuest = input.ReadSFixed32();
            break;
          }
          case 24: {
            QuestStepId = input.ReadInt32();
            break;
          }
          case 34: {
            if (resumeFromSaveHeroId_ == null) {
              resumeFromSaveHeroId_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(resumeFromSaveHeroId_);
            break;
          }
          case 40: {
            DeprecatedOpenToFriends = input.ReadBool();
            break;
          }
          case 50: {
            DeprecatedOpenToFriendsMessage = input.ReadString();
            break;
          }
          case 56: {
            HandicapLevel = input.ReadInt32();
            break;
          }
          case 66: {
            GameTag = input.ReadString();
            break;
          }
          case 72: {
            MonsterLevel = input.ReadInt32();
            break;
          }
          case 80: {
            DeprecatedWeeklyChallengeOverride = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PvPCreateParams : pb::IMessage<PvPCreateParams> {
    private static readonly pb::MessageParser<PvPCreateParams> _parser = new pb::MessageParser<PvPCreateParams>(() => new PvPCreateParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvPCreateParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvPCreateParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvPCreateParams(PvPCreateParams other) : this() {
      snoWorld_ = other.snoWorld_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvPCreateParams Clone() {
      return new PvPCreateParams(this);
    }

    /// <summary>Field number for the "sno_world" field.</summary>
    public const int SnoWorldFieldNumber = 1;
    private int snoWorld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SnoWorld {
      get { return snoWorld_; }
      set {
        snoWorld_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvPCreateParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvPCreateParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SnoWorld != other.SnoWorld) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SnoWorld != 0) hash ^= SnoWorld.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SnoWorld != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(SnoWorld);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SnoWorld != 0) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvPCreateParams other) {
      if (other == null) {
        return;
      }
      if (other.SnoWorld != 0) {
        SnoWorld = other.SnoWorld;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SnoWorld = input.ReadSFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChallengeCreateParams : pb::IMessage<ChallengeCreateParams> {
    private static readonly pb::MessageParser<ChallengeCreateParams> _parser = new pb::MessageParser<ChallengeCreateParams>(() => new ChallengeCreateParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChallengeCreateParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeCreateParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeCreateParams(ChallengeCreateParams other) : this() {
      challengeOverride_ = other.challengeOverride_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeCreateParams Clone() {
      return new ChallengeCreateParams(this);
    }

    /// <summary>Field number for the "challenge_override" field.</summary>
    public const int ChallengeOverrideFieldNumber = 1;
    private uint challengeOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeOverride {
      get { return challengeOverride_; }
      set {
        challengeOverride_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChallengeCreateParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChallengeCreateParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChallengeOverride != other.ChallengeOverride) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChallengeOverride != 0) hash ^= ChallengeOverride.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChallengeOverride != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ChallengeOverride);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChallengeOverride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeOverride);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChallengeCreateParams other) {
      if (other == null) {
        return;
      }
      if (other.ChallengeOverride != 0) {
        ChallengeOverride = other.ChallengeOverride;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChallengeOverride = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameCreateParams : pb::IMessage<GameCreateParams> {
    private static readonly pb::MessageParser<GameCreateParams> _parser = new pb::MessageParser<GameCreateParams>(() => new GameCreateParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameCreateParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCreateParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCreateParams(GameCreateParams other) : this() {
      gameType_ = other.gameType_;
      creationFlags_ = other.creationFlags_;
      campaignOrAdventureMode_ = other.campaignOrAdventureMode_ != null ? other.campaignOrAdventureMode_.Clone() : null;
      pvp_ = other.pvp_ != null ? other.pvp_.Clone() : null;
      name_ = other.name_;
      openToFriends_ = other.openToFriends_;
      challenge_ = other.challenge_ != null ? other.challenge_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCreateParams Clone() {
      return new GameCreateParams(this);
    }

    /// <summary>Field number for the "game_type" field.</summary>
    public const int GameTypeFieldNumber = 1;
    private int gameType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "creation_flags" field.</summary>
    public const int CreationFlagsFieldNumber = 2;
    private uint creationFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreationFlags {
      get { return creationFlags_; }
      set {
        creationFlags_ = value;
      }
    }

    /// <summary>Field number for the "campaign_or_adventure_mode" field.</summary>
    public const int CampaignOrAdventureModeFieldNumber = 3;
    private global::D3.OnlineService.CampaignOrAdventureModeCreateParams campaignOrAdventureMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.CampaignOrAdventureModeCreateParams CampaignOrAdventureMode {
      get { return campaignOrAdventureMode_; }
      set {
        campaignOrAdventureMode_ = value;
      }
    }

    /// <summary>Field number for the "pvp" field.</summary>
    public const int PvpFieldNumber = 4;
    private global::D3.OnlineService.PvPCreateParams pvp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.PvPCreateParams Pvp {
      get { return pvp_; }
      set {
        pvp_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "open_to_friends" field.</summary>
    public const int OpenToFriendsFieldNumber = 6;
    private bool openToFriends_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OpenToFriends {
      get { return openToFriends_; }
      set {
        openToFriends_ = value;
      }
    }

    /// <summary>Field number for the "challenge" field.</summary>
    public const int ChallengeFieldNumber = 7;
    private global::D3.OnlineService.ChallengeCreateParams challenge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.ChallengeCreateParams Challenge {
      get { return challenge_; }
      set {
        challenge_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameCreateParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameCreateParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameType != other.GameType) return false;
      if (CreationFlags != other.CreationFlags) return false;
      if (!object.Equals(CampaignOrAdventureMode, other.CampaignOrAdventureMode)) return false;
      if (!object.Equals(Pvp, other.Pvp)) return false;
      if (Name != other.Name) return false;
      if (OpenToFriends != other.OpenToFriends) return false;
      if (!object.Equals(Challenge, other.Challenge)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (CreationFlags != 0) hash ^= CreationFlags.GetHashCode();
      if (campaignOrAdventureMode_ != null) hash ^= CampaignOrAdventureMode.GetHashCode();
      if (pvp_ != null) hash ^= Pvp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (OpenToFriends != false) hash ^= OpenToFriends.GetHashCode();
      if (challenge_ != null) hash ^= Challenge.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameType != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(GameType);
      }
      if (CreationFlags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CreationFlags);
      }
      if (campaignOrAdventureMode_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CampaignOrAdventureMode);
      }
      if (pvp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Pvp);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (OpenToFriends != false) {
        output.WriteRawTag(48);
        output.WriteBool(OpenToFriends);
      }
      if (challenge_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Challenge);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(GameType);
      }
      if (CreationFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreationFlags);
      }
      if (campaignOrAdventureMode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CampaignOrAdventureMode);
      }
      if (pvp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pvp);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (OpenToFriends != false) {
        size += 1 + 1;
      }
      if (challenge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Challenge);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameCreateParams other) {
      if (other == null) {
        return;
      }
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      if (other.CreationFlags != 0) {
        CreationFlags = other.CreationFlags;
      }
      if (other.campaignOrAdventureMode_ != null) {
        if (campaignOrAdventureMode_ == null) {
          campaignOrAdventureMode_ = new global::D3.OnlineService.CampaignOrAdventureModeCreateParams();
        }
        CampaignOrAdventureMode.MergeFrom(other.CampaignOrAdventureMode);
      }
      if (other.pvp_ != null) {
        if (pvp_ == null) {
          pvp_ = new global::D3.OnlineService.PvPCreateParams();
        }
        Pvp.MergeFrom(other.Pvp);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.OpenToFriends != false) {
        OpenToFriends = other.OpenToFriends;
      }
      if (other.challenge_ != null) {
        if (challenge_ == null) {
          challenge_ = new global::D3.OnlineService.ChallengeCreateParams();
        }
        Challenge.MergeFrom(other.Challenge);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameType = input.ReadSInt32();
            break;
          }
          case 16: {
            CreationFlags = input.ReadUInt32();
            break;
          }
          case 26: {
            if (campaignOrAdventureMode_ == null) {
              campaignOrAdventureMode_ = new global::D3.OnlineService.CampaignOrAdventureModeCreateParams();
            }
            input.ReadMessage(campaignOrAdventureMode_);
            break;
          }
          case 34: {
            if (pvp_ == null) {
              pvp_ = new global::D3.OnlineService.PvPCreateParams();
            }
            input.ReadMessage(pvp_);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            OpenToFriends = input.ReadBool();
            break;
          }
          case 58: {
            if (challenge_ == null) {
              challenge_ = new global::D3.OnlineService.ChallengeCreateParams();
            }
            input.ReadMessage(challenge_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroCreateParams : pb::IMessage<HeroCreateParams> {
    private static readonly pb::MessageParser<HeroCreateParams> _parser = new pb::MessageParser<HeroCreateParams>(() => new HeroCreateParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroCreateParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroCreateParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroCreateParams(HeroCreateParams other) : this() {
      name_ = other.name_;
      gbidClass_ = other.gbidClass_;
      isHardcore_ = other.isHardcore_;
      isFemale_ = other.isFemale_;
      isSeason_ = other.isSeason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroCreateParams Clone() {
      return new HeroCreateParams(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gbid_class" field.</summary>
    public const int GbidClassFieldNumber = 2;
    private int gbidClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GbidClass {
      get { return gbidClass_; }
      set {
        gbidClass_ = value;
      }
    }

    /// <summary>Field number for the "is_hardcore" field.</summary>
    public const int IsHardcoreFieldNumber = 3;
    private bool isHardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHardcore {
      get { return isHardcore_; }
      set {
        isHardcore_ = value;
      }
    }

    /// <summary>Field number for the "is_female" field.</summary>
    public const int IsFemaleFieldNumber = 4;
    private bool isFemale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFemale {
      get { return isFemale_; }
      set {
        isFemale_ = value;
      }
    }

    /// <summary>Field number for the "is_season" field.</summary>
    public const int IsSeasonFieldNumber = 5;
    private bool isSeason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSeason {
      get { return isSeason_; }
      set {
        isSeason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroCreateParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroCreateParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (GbidClass != other.GbidClass) return false;
      if (IsHardcore != other.IsHardcore) return false;
      if (IsFemale != other.IsFemale) return false;
      if (IsSeason != other.IsSeason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GbidClass != 0) hash ^= GbidClass.GetHashCode();
      if (IsHardcore != false) hash ^= IsHardcore.GetHashCode();
      if (IsFemale != false) hash ^= IsFemale.GetHashCode();
      if (IsSeason != false) hash ^= IsSeason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (GbidClass != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(GbidClass);
      }
      if (IsHardcore != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsHardcore);
      }
      if (IsFemale != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFemale);
      }
      if (IsSeason != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSeason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GbidClass != 0) {
        size += 1 + 4;
      }
      if (IsHardcore != false) {
        size += 1 + 1;
      }
      if (IsFemale != false) {
        size += 1 + 1;
      }
      if (IsSeason != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroCreateParams other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GbidClass != 0) {
        GbidClass = other.GbidClass;
      }
      if (other.IsHardcore != false) {
        IsHardcore = other.IsHardcore;
      }
      if (other.IsFemale != false) {
        IsFemale = other.IsFemale;
      }
      if (other.IsSeason != false) {
        IsSeason = other.IsSeason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 21: {
            GbidClass = input.ReadSFixed32();
            break;
          }
          case 24: {
            IsHardcore = input.ReadBool();
            break;
          }
          case 32: {
            IsFemale = input.ReadBool();
            break;
          }
          case 40: {
            IsSeason = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentHandle : pb::IMessage<ContentHandle> {
    private static readonly pb::MessageParser<ContentHandle> _parser = new pb::MessageParser<ContentHandle>(() => new ContentHandle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentHandle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentHandle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentHandle(ContentHandle other) : this() {
      hash_ = other.hash_;
      usage_ = other.usage_;
      region_ = other.region_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentHandle Clone() {
      return new ContentHandle(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 2;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 3;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentHandle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentHandle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Usage != other.Usage) return false;
      if (Region != other.Region) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Usage);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Region);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentHandle other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 18: {
            Usage = input.ReadString();
            break;
          }
          case 26: {
            Region = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentLicense : pb::IMessage<ContentLicense> {
    private static readonly pb::MessageParser<ContentLicense> _parser = new pb::MessageParser<ContentLicense>(() => new ContentLicense());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentLicense> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentLicense() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentLicense(ContentLicense other) : this() {
      id_ = other.id_;
      expireTime_ = other.expireTime_;
      quantity_ = other.quantity_;
      propertyFlags_ = other.propertyFlags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentLicense Clone() {
      return new ContentLicense(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private ulong expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private uint quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "property_flags" field.</summary>
    public const int PropertyFlagsFieldNumber = 4;
    private uint propertyFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropertyFlags {
      get { return propertyFlags_; }
      set {
        propertyFlags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentLicense);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentLicense other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (Quantity != other.Quantity) return false;
      if (PropertyFlags != other.PropertyFlags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ExpireTime != 0UL) hash ^= ExpireTime.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (PropertyFlags != 0) hash ^= PropertyFlags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpireTime);
      }
      if (Quantity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quantity);
      }
      if (PropertyFlags != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PropertyFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (PropertyFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropertyFlags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentLicense other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ExpireTime != 0UL) {
        ExpireTime = other.ExpireTime;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.PropertyFlags != 0) {
        PropertyFlags = other.PropertyFlags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 24: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 32: {
            PropertyFlags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContentLicenses : pb::IMessage<ContentLicenses> {
    private static readonly pb::MessageParser<ContentLicenses> _parser = new pb::MessageParser<ContentLicenses>(() => new ContentLicenses());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContentLicenses> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.OnlineService.OnlineServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentLicenses() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentLicenses(ContentLicenses other) : this() {
      licenses_ = other.licenses_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentLicenses Clone() {
      return new ContentLicenses(this);
    }

    /// <summary>Field number for the "licenses" field.</summary>
    public const int LicensesFieldNumber = 1;
    private double licenses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Licenses {
      get { return licenses_; }
      set {
        licenses_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContentLicenses);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContentLicenses other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Licenses, other.Licenses)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Licenses != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Licenses);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Licenses != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Licenses);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Licenses != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContentLicenses other) {
      if (other == null) {
        return;
      }
      if (other.Licenses != 0D) {
        Licenses = other.Licenses;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Licenses = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
