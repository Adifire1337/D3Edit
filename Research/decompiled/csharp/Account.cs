// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Account.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D3.Account {

  /// <summary>Holder for reflection information generated from Account.proto</summary>
  public static partial class AccountReflection {

    #region Descriptor
    /// <summary>File descriptor for Account.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccountReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1BY2NvdW50LnByb3RvEgpEMy5BY2NvdW50GhlBdHRyaWJ1dGVTZXJpYWxp",
            "emVyLnByb3RvGhJBY2hpZXZlbWVudHMucHJvdG8aC0l0ZW1zLnByb3RvGhNP",
            "bmxpbmVTZXJ2aWNlLnByb3RvGhJJdGVtQ3JhZnRpbmcucHJvdG8aE0Nvc21l",
            "dGljSXRlbXMucHJvdG8aEUdhbWVCYWxhbmNlLnByb3RvGhRDaGFsbGVuZ2VS",
            "aWZ0cy5wcm90byL1AQoTQmFubmVyQ29uZmlndXJhdGlvbhIUCgxiYW5uZXJf",
            "c2hhcGUYASABKA0SEgoKc2lnaWxfbWFpbhgCIAEoDRIUCgxzaWdpbF9hY2Nl",
            "bnQYAyABKA0SFQoNcGF0dGVybl9jb2xvchgEIAEoDRIYChBiYWNrZ3JvdW5k",
            "X2NvbG9yGAUgASgNEhMKC3NpZ2lsX2NvbG9yGAYgASgNEhcKD3NpZ2lsX3Bs",
            "YWNlbWVudBgHIAEoDRIPCgdwYXR0ZXJuGAggASgNEhkKEXVzZV9zaWdpbF92",
            "YXJpYW50GAkgASgIEhMKC2VwaWNfYmFubmVyGAogASgNIpIHCgZEaWdlc3QS",
            "DwoHdmVyc2lvbhgBIAEoDRI3ChNsYXN0X3BsYXllZF9oZXJvX2lkGAIgASgL",
            "MhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZBI9ChRiYW5uZXJfY29uZmln",
            "dXJhdGlvbhgDIAEoCzIfLkQzLkFjY291bnQuQmFubmVyQ29uZmlndXJhdGlv",
            "bhINCgVmbGFncxgEIAEoDRIUCgxwdnBfY29vbGRvd24YBSABKAQSEQoJc2Vh",
            "c29uX2lkGAcgASgNEhAKCGd1aWxkX2lkGAggASgEEhIKCmFsdF9sZXZlbHMY",
            "CSADKA0SKAogc3Rhc2hfdGFic19yZXdhcmRlZF9mcm9tX3NlYXNvbnMYCiAB",
            "KA0SFQoNcmViaXJ0aHNfdXNlZBgLIAEoDRIVCg1wYXRjaF92ZXJzaW9uGAwg",
            "ASgJEkMKG2NoYWxsZW5nZV9yaWZ0X2FjY291bnRfZGF0YRgNIAEoCzIeLkQz",
            "LkNoYWxsZW5nZVJpZnRzLkFjY291bnREYXRhEhsKE2NvbXBsZXRlZF9zb2xv",
            "X3JpZnQYDiABKAgSGQoRbGFzdF9wdWJsaXNoX3RpbWUYDyABKA0iywMKBUZs",
            "YWdzEgoKBlVOVVNFRBAAEiUKIUhBUkRDT1JFX0hFUk9fVU5MT0NLRURfREVQ",
            "UkVDQVRFRBABEhsKF0FEVkVOVFVSRV9NT0RFX1VOTE9DS0VEEAISHAoYUEFS",
            "QUdPTl8xMDBfVkFOSUxMQV9GRUFUEAMSHgoaTUFTVEVSX0RJRkZJQ1VMVFlf",
            "VU5MT0NLRUQQBBIfChtUT1JNRU5UX0RJRkZJQ1VMVFlfVU5MT0NLRUQQBRIi",
            "Ch5BRFZFTlRVUkVfTU9ERV9UVVRPUklBTF9QTEFZRUQQBhInCiNIQVJEQ09S",
            "RV9NQVNURVJfRElGRklDVUxUWV9VTkxPQ0tFRBAHEigKJEhBUkRDT1JFX1RP",
            "Uk1FTlRfRElGRklDVUxUWV9VTkxPQ0tFRBAIEiQKIEhBUkRDT1JFX0FEVkVO",
            "VFVSRV9NT0RFX1VOTE9DS0VEEAkSKgomVE9STUVOVF9ESUZGSUNVTFRZXzdf",
            "QU5EX09WRVJfVU5MT0NLRUQQChI+CjpIQVJEQ09SRV9UT1JNRU5UX0RJRkZJ",
            "Q1VMVFlfN19BTkRfT1ZFUl9VTkxPQ0tFRF9ERVBSRUNBVEVEEAsSCgoGQkFO",
            "TkVEEAwiaAoaQ29uc29sZVJhbmRvbVRyYW5zbXV0ZVNlZWQSFQoNaXRlbV9z",
            "bG90X2tleRgBIAEoERIYChByYW5kb21faXRlbV9zZWVkGAIgASgREhkKEXJh",
            "bmRvbV9pdGVtX2NhcnJ5GAMgASgRIm8KHkNvbnNvbGVSYW5kb21UcmFuc211",
            "dGVTZWVkTGlzdBJNCh1jb25zb2xlX3JhbmRvbV90cmFuc211dGVfc2VlZBgB",
            "IAMoCzImLkQzLkFjY291bnQuQ29uc29sZVJhbmRvbVRyYW5zbXV0ZVNlZWQi",
            "uwIKFENvbnNvbGVQYXJ0aXRpb25EYXRhEiQKHHNlYXNvbmFsX2dpZnRfZ2Jp",
            "ZHNfcmVkZWVtZWQYASADKBESVQoWc2Vhc29uYWxfcm9sbG92ZXJfaXRlbRgC",
            "IAMoCzI1LkQzLkFjY291bnQuQ29uc29sZVBhcnRpdGlvbkRhdGEuU2Vhc29u",
            "YWxSb2xsb3Zlckl0ZW0SVgoiY29uc29sZV9yYW5kb21fdHJhbnNtdXRlX3Nl",
            "ZWRfbGlzdBgDIAEoCzIqLkQzLkFjY291bnQuQ29uc29sZVJhbmRvbVRyYW5z",
            "bXV0ZVNlZWRMaXN0Gk4KFFNlYXNvbmFsUm9sbG92ZXJJdGVtEiEKBGl0ZW0Y",
            "ASABKAsyEy5EMy5JdGVtcy5TYXZlZEl0ZW0SEwoLY3JlYXRlX3RpbWUYAiAB",
            "KA0iywMKEEFjY291bnRQYXJ0aXRpb24SFAoMcGFydGl0aW9uX2lkGAEgASgF",
            "EkEKEHNhdmVkX2F0dHJpYnV0ZXMYAiABKAsyJy5EMy5BdHRyaWJ1dGVTZXJp",
            "YWxpemVyLlNhdmVkQXR0cmlidXRlcxIhCgVpdGVtcxgDIAEoCzISLkQzLkl0",
            "ZW1zLkl0ZW1MaXN0EjcKDGNyYWZ0ZXJfZGF0YRgEIAEoCzIhLkQzLkl0ZW1D",
            "cmFmdGluZy5DcmFmdGVyU2F2ZWREYXRhEjYKEmdvbGRfaWRfZGVwcmVjYXRl",
            "ZBgFIAEoCzIaLkQzLk9ubGluZVNlcnZpY2UuRW50aXR5SWQSEwoLc3Rhc2hf",
            "aWNvbnMYBiABKAwSHQoVYWNjZXB0ZWRfbGljZW5zZV9iaXRzGAcgASgEEhEK",
            "CWFsdF9sZXZlbBgIIAEoDRIyCg1jdXJyZW5jeV9kYXRhGAkgASgLMhsuRDMu",
            "SXRlbXMuQ3VycmVuY3lTYXZlZERhdGESDQoFZmxhZ3MYCiABKA0SQAoWY29u",
            "c29sZV9wYXJ0aXRpb25fZGF0YRgLIAEoCzIgLkQzLkFjY291bnQuQ29uc29s",
            "ZVBhcnRpdGlvbkRhdGEi9goKD1NhdmVkRGVmaW5pdGlvbhIPCgd2ZXJzaW9u",
            "GAEgASgNEiIKBmRpZ2VzdBgCIAEoCzISLkQzLkFjY291bnQuRGlnZXN0EkEK",
            "EHNhdmVkX2F0dHJpYnV0ZXMYAyABKAsyJy5EMy5BdHRyaWJ1dGVTZXJpYWxp",
            "emVyLlNhdmVkQXR0cmlidXRlcxIWCg5zZWVuX3R1dG9yaWFscxgJIAEoDBIm",
            "Ch5udW1fdm90ZV9raWNrc19wYXJ0aWNpcGF0ZWRfaW4YCiABKBASIAoYbnVt",
            "X3ZvdGVfa2lja3NfaW5pdGlhdGVkGAsgASgQEiAKGG51bV9wdWJsaWNfZ2Ft",
            "ZXNfbm9fa2ljaxgMIAEoEBIZChF0aW1lc192b3RlX2tpY2tlZBgNIAEoEBIT",
            "CgtjcmVhdGVfdGltZRgTIAEoDRIlCh1udW1fZ3JvdXBzX2NyZWF0ZWRfZGVw",
            "cmVjYXRlZBgWIAEoDRIwCgpwYXJ0aXRpb25zGBQgAygLMhwuRDMuQWNjb3Vu",
            "dC5BY2NvdW50UGFydGl0aW9uElUKJGRlcHJlY2F0ZWRfc2F2ZWRfYXR0cmli",
            "dXRlc19oYXJkY29yZRgEIAEoCzInLkQzLkF0dHJpYnV0ZVNlcmlhbGl6ZXIu",
            "U2F2ZWRBdHRyaWJ1dGVzEkAKJGRlcHJlY2F0ZWRfbm9ybWFsX3NoYXJlZF9z",
            "YXZlZF9pdGVtcxgFIAEoCzISLkQzLkl0ZW1zLkl0ZW1MaXN0EkIKJmRlcHJl",
            "Y2F0ZWRfaGFyZGNvcmVfc2hhcmVkX3NhdmVkX2l0ZW1zGAYgASgLMhIuRDMu",
            "SXRlbXMuSXRlbUxpc3QSSQoeZGVwcmVjYXRlZF9jcmFmdGVyX25vcm1hbF9k",
            "YXRhGAcgASgLMiEuRDMuSXRlbUNyYWZ0aW5nLkNyYWZ0ZXJTYXZlZERhdGES",
            "SwogZGVwcmVjYXRlZF9jcmFmdGVyX2hhcmRjb3JlX2RhdGEYCCABKAsyIS5E",
            "My5JdGVtQ3JhZnRpbmcuQ3JhZnRlclNhdmVkRGF0YRI9ChlkZXByZWNhdGVk",
            "X2dvbGRfaWRfbm9ybWFsGA4gASgLMhouRDMuT25saW5lU2VydmljZS5FbnRp",
            "dHlJZBI/ChtkZXByZWNhdGVkX2dvbGRfaWRfaGFyZGNvcmUYDyABKAsyGi5E",
            "My5PbmxpbmVTZXJ2aWNlLkVudGl0eUlkEiUKHWRlcHJlY2F0ZWRfc3Rhc2hf",
            "aWNvbnNfbm9ybWFsGBAgASgMEigKIGRlcHJlY2F0ZWRfYWNjZXB0ZWRfbGlj",
            "ZW5zZV9iaXRzGBEgASgEEicKH2RlcHJlY2F0ZWRfc3Rhc2hfaWNvbnNfaGFy",
            "ZGNvcmUYEiABKAwSLQoMY29uc29sZV9kYXRhGBUgASgLMhcuRDMuQWNjb3Vu",
            "dC5Db25zb2xlRGF0YRJGChphY2NvdW50X3dpZGVfdHJhbnNtb2dfZGF0YRgX",
            "IAEoCzIiLkQzLkdhbWVCYWxhbmNlLkJpdFBhY2tlZEdiaWRBcnJheRJQCh9h",
            "Y2NvdW50X3dpZGVfY29zbWV0aWNfaXRlbV9kYXRhGBggASgLMicuRDMuQ29z",
            "bWV0aWNJdGVtcy5Db3NtZXRpY0l0ZW1TYXZlZERhdGESPwoaYWNjb3VudF93",
            "aWRlX2N1cnJlbmN5X2RhdGEYGiABKAsyGy5EMy5JdGVtcy5DdXJyZW5jeVNh",
            "dmVkRGF0YRI3ChFkZWxpdmVyZWRfcmV3YXJkcxgbIAEoCzIcLkQzLkFjY291",
            "bnQuRGVsaXZlcmVkUmV3YXJkcxIsCgtjb25zdW1hYmxlcxgcIAEoCzIXLkQz",
            "LkFjY291bnQuQ29uc3VtYWJsZXMiNgoNQXZlbmdlclZpY3RpbRISCgpnYmlk",
            "X2NsYXNzGAEgASgNEhEKCWlzX2ZlbWFsZRgCIAEoCCK7AgoHQXZlbmdlchIf",
            "ChdkZXByZWNhdGVkX3BsYXllcl9raWxscxgBIAEoDRIUCgxhdmVuZ2VyX25h",
            "bWUYAiABKAkSHgoWZGVwcmVjYXRlZF9tb25zdGVyX3NubxgDIAEoERIbChNk",
            "ZXByZWNhdGVkX3Jlc29sdmVkGAQgASgIEjQKEWRlcHJlY2F0ZWRfcmVzdWx0",
            "GAUgASgOMhkuRDMuQWNjb3VudC5BdmVuZ2VyLlN0YXRlEhEKCXNlbnRfZnJv",
            "bRgGIAEoBBIUCgxhZmZpeF9idWNrZXQYByABKAUSKgoHdmljdGltcxgIIAMo",
            "CzIZLkQzLkFjY291bnQuQXZlbmdlclZpY3RpbSIxCgVTdGF0ZRIJCgVBTElW",
            "RRAAEhEKDUtJTExFRF9QTEFZRVIQARIKCgZLSUxMRUQQAiKgAQoLQXZlbmdl",
            "ckRhdGESOAobZGVwcmVjYXRlZF9hdmVuZ2VyX2hhcmRjb3JlGAEgASgLMhMu",
            "RDMuQWNjb3VudC5BdmVuZ2VyEikKDGF2ZW5nZXJfc29sbxgCIAEoCzITLkQz",
            "LkFjY291bnQuQXZlbmdlchIsCg9hdmVuZ2VyX2ZyaWVuZHMYAyABKAsyEy5E",
            "My5BY2NvdW50LkF2ZW5nZXIihAEKGkNvbnNvbGVDaGFsbGVuZ2VSaWZ0UmV3",
            "YXJkEiIKBWl0ZW1zGAEgAygLMhMuRDMuSXRlbXMuU2F2ZWRJdGVtEhYKDmNo",
            "YWxsZW5nZV9yaWZ0GAIgASgNEhMKC2NyZWF0ZV90aW1lGAMgASgNEhUKDXNl",
            "YXNvbl9lYXJuZWQYBCABKA0iUAogQ29uc29sZUNoYWxsZW5nZVJpZnRQZXJz",
            "b25hbEJlc3QSCgoCaWQYASABKAQSDQoFc2NvcmUYAiABKAQSEQoJdGltZXN0",
            "YW1wGAMgASgDIoMFCgtDb25zb2xlRGF0YRIQCgh2ZXJzaW9uXxgBIAEoDRI3",
            "ChRhY2hpZXZlbWVudF9zbmFwc2hvdBgCIAEoCzIZLkQzLkFjaGlldmVtZW50",
            "cy5TbmFwc2hvdBIvCidoaWdoZXN0X2NvbXBsZXRlZF9kaWZmaWN1bHR5X2Rl",
            "cHJlY2F0ZWQYAyABKBESFQoNaGFzX2RlbW9fc2F2ZRgEIAEoCBItCgxhdmVu",
            "Z2VyX2RhdGEYBSABKAsyFy5EMy5BY2NvdW50LkF2ZW5nZXJEYXRhEhAKCHBy",
            "b2dyZXNzGAYgASgCEhgKEGhhc19ibmV0X2FjY291bnQYByABKAgSGwoTbGVn",
            "YWN5X2xpY2Vuc2VfYml0cxgIIAEoDRIlCh1sZWFkZXJib2FyZF9oZWFsX2Fj",
            "aGlldmVtZW50cxgJIAEoDRIiChpsZWFkZXJib2FyZF9oZWFsX2NvbnF1ZXN0",
            "cxgKIAMoBBJFChVjaGFsbGVuZ2VfcmlmdF9yZXdhcmQYCyADKAsyJi5EMy5B",
            "Y2NvdW50LkNvbnNvbGVDaGFsbGVuZ2VSaWZ0UmV3YXJkEjAKKGNoYWxsZW5n",
            "ZV9yaWZ0X3BlcnNvbmFsX2Jlc3RfcmlmdF9udW1iZXIYDCABKA0SUgocY2hh",
            "bGxlbmdlX3JpZnRfcGVyc29uYWxfYmVzdBgNIAMoCzIsLkQzLkFjY291bnQu",
            "Q29uc29sZUNoYWxsZW5nZVJpZnRQZXJzb25hbEJlc3QSHgoWY29uc29sZV9j",
            "dWJlX2Jhc2Vfc2VlZBgOIAEoDRIYChBuZnBfZGVmYXVsdF90aW1lGA8gASgF",
            "EhcKD25mcF9nb2JsaW5fdGltZRgQIAEoBSI0ChpEZWxpdmVyZWRBY2hpZXZl",
            "bWVudFJld2FyZBIWCg5hY2hpZXZlbWVudF9pZBgBIAEoBiLNAQoQRGVsaXZl",
            "cmVkUmV3YXJkcxJCChJhY2hpZXZlbWVudF9yZXdhcmQYASADKAsyJi5EMy5B",
            "Y2NvdW50LkRlbGl2ZXJlZEFjaGlldmVtZW50UmV3YXJkEiQKHGVudGl0bGVk",
            "X3Jld2FyZF9saWNlbnNlX2JpdHMYAiABKA0SJwofb3V0c3RhbmRpbmdfcmV3",
            "YXJkX2xpY2Vuc2VfYml0cxgDIAEoDRImCh5sZWdhY3lfYWNoaWV2ZW1lbnRz",
            "X3RvX2RlbGl2ZXIYBCADKAYivAEKCkNvbnN1bWFibGUSGwoTbGljZW5zZV9p",
            "bnN0YW5jZV9pZBgBIAEoBBISCgpsaWNlbnNlX2lkGAIgASgEEhYKDnRyYW5z",
            "YWN0aW9uX2lkGAMgASgEEhAKCHF1YW50aXR5GAQgASgDEhQKDGNvbnN1bWVf",
            "dGltZRgFIAEoAxITCgtyZXZva2VfdGltZRgGIAEoAxIMCgR0eXBlGAcgASgF",
            "EhoKEmRhdGFfcGVyc2lzdF9mbGFncxgIIAEoDSJACgtDb25zdW1hYmxlcxIx",
            "ChFjb25zdW1lZF9saWNlbnNlcxgBIAMoCzIWLkQzLkFjY291bnQuQ29uc3Vt",
            "YWJsZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D3.AttributeSerializer.AttributeSerializerReflection.Descriptor, global::D3.Achievements.AchievementsReflection.Descriptor, global::D3.Items.ItemsReflection.Descriptor, global::D3.OnlineService.OnlineServiceReflection.Descriptor, global::D3.ItemCrafting.ItemCraftingReflection.Descriptor, global::D3.CosmeticItems.CosmeticItemsReflection.Descriptor, global::D3.GameBalance.GameBalanceReflection.Descriptor, global::D3.ChallengeRifts.ChallengeRiftsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.BannerConfiguration), global::D3.Account.BannerConfiguration.Parser, new[]{ "BannerShape", "SigilMain", "SigilAccent", "PatternColor", "BackgroundColor", "SigilColor", "SigilPlacement", "Pattern", "UseSigilVariant", "EpicBanner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.Digest), global::D3.Account.Digest.Parser, new[]{ "Version", "LastPlayedHeroId", "BannerConfiguration", "Flags", "PvpCooldown", "SeasonId", "GuildId", "AltLevels", "StashTabsRewardedFromSeasons", "RebirthsUsed", "PatchVersion", "ChallengeRiftAccountData", "CompletedSoloRift", "LastPublishTime" }, null, new[]{ typeof(global::D3.Account.Digest.Types.Flags) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.ConsoleRandomTransmuteSeed), global::D3.Account.ConsoleRandomTransmuteSeed.Parser, new[]{ "ItemSlotKey", "RandomItemSeed", "RandomItemCarry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.ConsoleRandomTransmuteSeedList), global::D3.Account.ConsoleRandomTransmuteSeedList.Parser, new[]{ "ConsoleRandomTransmuteSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.ConsolePartitionData), global::D3.Account.ConsolePartitionData.Parser, new[]{ "SeasonalGiftGbidsRedeemed", "SeasonalRolloverItem", "ConsoleRandomTransmuteSeedList" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem), global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.Parser, new[]{ "Item", "CreateTime" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.AccountPartition), global::D3.Account.AccountPartition.Parser, new[]{ "PartitionId", "SavedAttributes", "Items", "CrafterData", "GoldIdDeprecated", "StashIcons", "AcceptedLicenseBits", "AltLevel", "CurrencyData", "Flags", "ConsolePartitionData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.SavedDefinition), global::D3.Account.SavedDefinition.Parser, new[]{ "Version", "Digest", "SavedAttributes", "SeenTutorials", "NumVoteKicksParticipatedIn", "NumVoteKicksInitiated", "NumPublicGamesNoKick", "TimesVoteKicked", "CreateTime", "NumGroupsCreatedDeprecated", "Partitions", "DeprecatedSavedAttributesHardcore", "DeprecatedNormalSharedSavedItems", "DeprecatedHardcoreSharedSavedItems", "DeprecatedCrafterNormalData", "DeprecatedCrafterHardcoreData", "DeprecatedGoldIdNormal", "DeprecatedGoldIdHardcore", "DeprecatedStashIconsNormal", "DeprecatedAcceptedLicenseBits", "DeprecatedStashIconsHardcore", "ConsoleData", "AccountWideTransmogData", "AccountWideCosmeticItemData", "AccountWideCurrencyData", "DeliveredRewards", "Consumables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.AvengerVictim), global::D3.Account.AvengerVictim.Parser, new[]{ "GbidClass", "IsFemale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.Avenger), global::D3.Account.Avenger.Parser, new[]{ "DeprecatedPlayerKills", "AvengerName", "DeprecatedMonsterSno", "DeprecatedResolved", "DeprecatedResult", "SentFrom", "AffixBucket", "Victims" }, null, new[]{ typeof(global::D3.Account.Avenger.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.AvengerData), global::D3.Account.AvengerData.Parser, new[]{ "DeprecatedAvengerHardcore", "AvengerSolo", "AvengerFriends" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.ConsoleChallengeRiftReward), global::D3.Account.ConsoleChallengeRiftReward.Parser, new[]{ "Items", "ChallengeRift", "CreateTime", "SeasonEarned" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.ConsoleChallengeRiftPersonalBest), global::D3.Account.ConsoleChallengeRiftPersonalBest.Parser, new[]{ "Id", "Score", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.ConsoleData), global::D3.Account.ConsoleData.Parser, new[]{ "Version", "AchievementSnapshot", "HighestCompletedDifficultyDeprecated", "HasDemoSave", "AvengerData", "Progress", "HasBnetAccount", "LegacyLicenseBits", "LeaderboardHealAchievements", "LeaderboardHealConquests", "ChallengeRiftReward", "ChallengeRiftPersonalBestRiftNumber", "ChallengeRiftPersonalBest", "ConsoleCubeBaseSeed", "NfpDefaultTime", "NfpGoblinTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.DeliveredAchievementReward), global::D3.Account.DeliveredAchievementReward.Parser, new[]{ "AchievementId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.DeliveredRewards), global::D3.Account.DeliveredRewards.Parser, new[]{ "AchievementReward", "EntitledRewardLicenseBits", "OutstandingRewardLicenseBits", "LegacyAchievementsToDeliver" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.Consumable), global::D3.Account.Consumable.Parser, new[]{ "LicenseInstanceId", "LicenseId", "TransactionId", "Quantity", "ConsumeTime", "RevokeTime", "Type", "DataPersistFlags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Account.Consumables), global::D3.Account.Consumables.Parser, new[]{ "ConsumedLicenses" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BannerConfiguration : pb::IMessage<BannerConfiguration> {
    private static readonly pb::MessageParser<BannerConfiguration> _parser = new pb::MessageParser<BannerConfiguration>(() => new BannerConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BannerConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BannerConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BannerConfiguration(BannerConfiguration other) : this() {
      bannerShape_ = other.bannerShape_;
      sigilMain_ = other.sigilMain_;
      sigilAccent_ = other.sigilAccent_;
      patternColor_ = other.patternColor_;
      backgroundColor_ = other.backgroundColor_;
      sigilColor_ = other.sigilColor_;
      sigilPlacement_ = other.sigilPlacement_;
      pattern_ = other.pattern_;
      useSigilVariant_ = other.useSigilVariant_;
      epicBanner_ = other.epicBanner_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BannerConfiguration Clone() {
      return new BannerConfiguration(this);
    }

    /// <summary>Field number for the "banner_shape" field.</summary>
    public const int BannerShapeFieldNumber = 1;
    private uint bannerShape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BannerShape {
      get { return bannerShape_; }
      set {
        bannerShape_ = value;
      }
    }

    /// <summary>Field number for the "sigil_main" field.</summary>
    public const int SigilMainFieldNumber = 2;
    private uint sigilMain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SigilMain {
      get { return sigilMain_; }
      set {
        sigilMain_ = value;
      }
    }

    /// <summary>Field number for the "sigil_accent" field.</summary>
    public const int SigilAccentFieldNumber = 3;
    private uint sigilAccent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SigilAccent {
      get { return sigilAccent_; }
      set {
        sigilAccent_ = value;
      }
    }

    /// <summary>Field number for the "pattern_color" field.</summary>
    public const int PatternColorFieldNumber = 4;
    private uint patternColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PatternColor {
      get { return patternColor_; }
      set {
        patternColor_ = value;
      }
    }

    /// <summary>Field number for the "background_color" field.</summary>
    public const int BackgroundColorFieldNumber = 5;
    private uint backgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "sigil_color" field.</summary>
    public const int SigilColorFieldNumber = 6;
    private uint sigilColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SigilColor {
      get { return sigilColor_; }
      set {
        sigilColor_ = value;
      }
    }

    /// <summary>Field number for the "sigil_placement" field.</summary>
    public const int SigilPlacementFieldNumber = 7;
    private uint sigilPlacement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SigilPlacement {
      get { return sigilPlacement_; }
      set {
        sigilPlacement_ = value;
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 8;
    private uint pattern_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pattern {
      get { return pattern_; }
      set {
        pattern_ = value;
      }
    }

    /// <summary>Field number for the "use_sigil_variant" field.</summary>
    public const int UseSigilVariantFieldNumber = 9;
    private bool useSigilVariant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSigilVariant {
      get { return useSigilVariant_; }
      set {
        useSigilVariant_ = value;
      }
    }

    /// <summary>Field number for the "epic_banner" field.</summary>
    public const int EpicBannerFieldNumber = 10;
    private uint epicBanner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EpicBanner {
      get { return epicBanner_; }
      set {
        epicBanner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BannerConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BannerConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BannerShape != other.BannerShape) return false;
      if (SigilMain != other.SigilMain) return false;
      if (SigilAccent != other.SigilAccent) return false;
      if (PatternColor != other.PatternColor) return false;
      if (BackgroundColor != other.BackgroundColor) return false;
      if (SigilColor != other.SigilColor) return false;
      if (SigilPlacement != other.SigilPlacement) return false;
      if (Pattern != other.Pattern) return false;
      if (UseSigilVariant != other.UseSigilVariant) return false;
      if (EpicBanner != other.EpicBanner) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BannerShape != 0) hash ^= BannerShape.GetHashCode();
      if (SigilMain != 0) hash ^= SigilMain.GetHashCode();
      if (SigilAccent != 0) hash ^= SigilAccent.GetHashCode();
      if (PatternColor != 0) hash ^= PatternColor.GetHashCode();
      if (BackgroundColor != 0) hash ^= BackgroundColor.GetHashCode();
      if (SigilColor != 0) hash ^= SigilColor.GetHashCode();
      if (SigilPlacement != 0) hash ^= SigilPlacement.GetHashCode();
      if (Pattern != 0) hash ^= Pattern.GetHashCode();
      if (UseSigilVariant != false) hash ^= UseSigilVariant.GetHashCode();
      if (EpicBanner != 0) hash ^= EpicBanner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BannerShape != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BannerShape);
      }
      if (SigilMain != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SigilMain);
      }
      if (SigilAccent != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SigilAccent);
      }
      if (PatternColor != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PatternColor);
      }
      if (BackgroundColor != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BackgroundColor);
      }
      if (SigilColor != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SigilColor);
      }
      if (SigilPlacement != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SigilPlacement);
      }
      if (Pattern != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Pattern);
      }
      if (UseSigilVariant != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseSigilVariant);
      }
      if (EpicBanner != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(EpicBanner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BannerShape != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BannerShape);
      }
      if (SigilMain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SigilMain);
      }
      if (SigilAccent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SigilAccent);
      }
      if (PatternColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PatternColor);
      }
      if (BackgroundColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BackgroundColor);
      }
      if (SigilColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SigilColor);
      }
      if (SigilPlacement != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SigilPlacement);
      }
      if (Pattern != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pattern);
      }
      if (UseSigilVariant != false) {
        size += 1 + 1;
      }
      if (EpicBanner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EpicBanner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BannerConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.BannerShape != 0) {
        BannerShape = other.BannerShape;
      }
      if (other.SigilMain != 0) {
        SigilMain = other.SigilMain;
      }
      if (other.SigilAccent != 0) {
        SigilAccent = other.SigilAccent;
      }
      if (other.PatternColor != 0) {
        PatternColor = other.PatternColor;
      }
      if (other.BackgroundColor != 0) {
        BackgroundColor = other.BackgroundColor;
      }
      if (other.SigilColor != 0) {
        SigilColor = other.SigilColor;
      }
      if (other.SigilPlacement != 0) {
        SigilPlacement = other.SigilPlacement;
      }
      if (other.Pattern != 0) {
        Pattern = other.Pattern;
      }
      if (other.UseSigilVariant != false) {
        UseSigilVariant = other.UseSigilVariant;
      }
      if (other.EpicBanner != 0) {
        EpicBanner = other.EpicBanner;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BannerShape = input.ReadUInt32();
            break;
          }
          case 16: {
            SigilMain = input.ReadUInt32();
            break;
          }
          case 24: {
            SigilAccent = input.ReadUInt32();
            break;
          }
          case 32: {
            PatternColor = input.ReadUInt32();
            break;
          }
          case 40: {
            BackgroundColor = input.ReadUInt32();
            break;
          }
          case 48: {
            SigilColor = input.ReadUInt32();
            break;
          }
          case 56: {
            SigilPlacement = input.ReadUInt32();
            break;
          }
          case 64: {
            Pattern = input.ReadUInt32();
            break;
          }
          case 72: {
            UseSigilVariant = input.ReadBool();
            break;
          }
          case 80: {
            EpicBanner = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Digest : pb::IMessage<Digest> {
    private static readonly pb::MessageParser<Digest> _parser = new pb::MessageParser<Digest>(() => new Digest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Digest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Digest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Digest(Digest other) : this() {
      version_ = other.version_;
      lastPlayedHeroId_ = other.lastPlayedHeroId_ != null ? other.lastPlayedHeroId_.Clone() : null;
      bannerConfiguration_ = other.bannerConfiguration_ != null ? other.bannerConfiguration_.Clone() : null;
      flags_ = other.flags_;
      pvpCooldown_ = other.pvpCooldown_;
      seasonId_ = other.seasonId_;
      guildId_ = other.guildId_;
      altLevels_ = other.altLevels_.Clone();
      stashTabsRewardedFromSeasons_ = other.stashTabsRewardedFromSeasons_;
      rebirthsUsed_ = other.rebirthsUsed_;
      patchVersion_ = other.patchVersion_;
      challengeRiftAccountData_ = other.challengeRiftAccountData_ != null ? other.challengeRiftAccountData_.Clone() : null;
      completedSoloRift_ = other.completedSoloRift_;
      lastPublishTime_ = other.lastPublishTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Digest Clone() {
      return new Digest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "last_played_hero_id" field.</summary>
    public const int LastPlayedHeroIdFieldNumber = 2;
    private global::D3.OnlineService.EntityId lastPlayedHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId LastPlayedHeroId {
      get { return lastPlayedHeroId_; }
      set {
        lastPlayedHeroId_ = value;
      }
    }

    /// <summary>Field number for the "banner_configuration" field.</summary>
    public const int BannerConfigurationFieldNumber = 3;
    private global::D3.Account.BannerConfiguration bannerConfiguration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.BannerConfiguration BannerConfiguration {
      get { return bannerConfiguration_; }
      set {
        bannerConfiguration_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "pvp_cooldown" field.</summary>
    public const int PvpCooldownFieldNumber = 5;
    private ulong pvpCooldown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PvpCooldown {
      get { return pvpCooldown_; }
      set {
        pvpCooldown_ = value;
      }
    }

    /// <summary>Field number for the "season_id" field.</summary>
    public const int SeasonIdFieldNumber = 7;
    private uint seasonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "guild_id" field.</summary>
    public const int GuildIdFieldNumber = 8;
    private ulong guildId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuildId {
      get { return guildId_; }
      set {
        guildId_ = value;
      }
    }

    /// <summary>Field number for the "alt_levels" field.</summary>
    public const int AltLevelsFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_altLevels_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> altLevels_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AltLevels {
      get { return altLevels_; }
    }

    /// <summary>Field number for the "stash_tabs_rewarded_from_seasons" field.</summary>
    public const int StashTabsRewardedFromSeasonsFieldNumber = 10;
    private uint stashTabsRewardedFromSeasons_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StashTabsRewardedFromSeasons {
      get { return stashTabsRewardedFromSeasons_; }
      set {
        stashTabsRewardedFromSeasons_ = value;
      }
    }

    /// <summary>Field number for the "rebirths_used" field.</summary>
    public const int RebirthsUsedFieldNumber = 11;
    private uint rebirthsUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RebirthsUsed {
      get { return rebirthsUsed_; }
      set {
        rebirthsUsed_ = value;
      }
    }

    /// <summary>Field number for the "patch_version" field.</summary>
    public const int PatchVersionFieldNumber = 12;
    private string patchVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatchVersion {
      get { return patchVersion_; }
      set {
        patchVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "challenge_rift_account_data" field.</summary>
    public const int ChallengeRiftAccountDataFieldNumber = 13;
    private global::D3.ChallengeRifts.AccountData challengeRiftAccountData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.ChallengeRifts.AccountData ChallengeRiftAccountData {
      get { return challengeRiftAccountData_; }
      set {
        challengeRiftAccountData_ = value;
      }
    }

    /// <summary>Field number for the "completed_solo_rift" field.</summary>
    public const int CompletedSoloRiftFieldNumber = 14;
    private bool completedSoloRift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompletedSoloRift {
      get { return completedSoloRift_; }
      set {
        completedSoloRift_ = value;
      }
    }

    /// <summary>Field number for the "last_publish_time" field.</summary>
    public const int LastPublishTimeFieldNumber = 15;
    private uint lastPublishTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastPublishTime {
      get { return lastPublishTime_; }
      set {
        lastPublishTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Digest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Digest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(LastPlayedHeroId, other.LastPlayedHeroId)) return false;
      if (!object.Equals(BannerConfiguration, other.BannerConfiguration)) return false;
      if (Flags != other.Flags) return false;
      if (PvpCooldown != other.PvpCooldown) return false;
      if (SeasonId != other.SeasonId) return false;
      if (GuildId != other.GuildId) return false;
      if(!altLevels_.Equals(other.altLevels_)) return false;
      if (StashTabsRewardedFromSeasons != other.StashTabsRewardedFromSeasons) return false;
      if (RebirthsUsed != other.RebirthsUsed) return false;
      if (PatchVersion != other.PatchVersion) return false;
      if (!object.Equals(ChallengeRiftAccountData, other.ChallengeRiftAccountData)) return false;
      if (CompletedSoloRift != other.CompletedSoloRift) return false;
      if (LastPublishTime != other.LastPublishTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (lastPlayedHeroId_ != null) hash ^= LastPlayedHeroId.GetHashCode();
      if (bannerConfiguration_ != null) hash ^= BannerConfiguration.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (PvpCooldown != 0UL) hash ^= PvpCooldown.GetHashCode();
      if (SeasonId != 0) hash ^= SeasonId.GetHashCode();
      if (GuildId != 0UL) hash ^= GuildId.GetHashCode();
      hash ^= altLevels_.GetHashCode();
      if (StashTabsRewardedFromSeasons != 0) hash ^= StashTabsRewardedFromSeasons.GetHashCode();
      if (RebirthsUsed != 0) hash ^= RebirthsUsed.GetHashCode();
      if (PatchVersion.Length != 0) hash ^= PatchVersion.GetHashCode();
      if (challengeRiftAccountData_ != null) hash ^= ChallengeRiftAccountData.GetHashCode();
      if (CompletedSoloRift != false) hash ^= CompletedSoloRift.GetHashCode();
      if (LastPublishTime != 0) hash ^= LastPublishTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (lastPlayedHeroId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LastPlayedHeroId);
      }
      if (bannerConfiguration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BannerConfiguration);
      }
      if (Flags != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Flags);
      }
      if (PvpCooldown != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PvpCooldown);
      }
      if (SeasonId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SeasonId);
      }
      if (GuildId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(GuildId);
      }
      altLevels_.WriteTo(output, _repeated_altLevels_codec);
      if (StashTabsRewardedFromSeasons != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(StashTabsRewardedFromSeasons);
      }
      if (RebirthsUsed != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RebirthsUsed);
      }
      if (PatchVersion.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PatchVersion);
      }
      if (challengeRiftAccountData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ChallengeRiftAccountData);
      }
      if (CompletedSoloRift != false) {
        output.WriteRawTag(112);
        output.WriteBool(CompletedSoloRift);
      }
      if (LastPublishTime != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(LastPublishTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (lastPlayedHeroId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastPlayedHeroId);
      }
      if (bannerConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BannerConfiguration);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (PvpCooldown != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PvpCooldown);
      }
      if (SeasonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeasonId);
      }
      if (GuildId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuildId);
      }
      size += altLevels_.CalculateSize(_repeated_altLevels_codec);
      if (StashTabsRewardedFromSeasons != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StashTabsRewardedFromSeasons);
      }
      if (RebirthsUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RebirthsUsed);
      }
      if (PatchVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatchVersion);
      }
      if (challengeRiftAccountData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChallengeRiftAccountData);
      }
      if (CompletedSoloRift != false) {
        size += 1 + 1;
      }
      if (LastPublishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastPublishTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Digest other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.lastPlayedHeroId_ != null) {
        if (lastPlayedHeroId_ == null) {
          lastPlayedHeroId_ = new global::D3.OnlineService.EntityId();
        }
        LastPlayedHeroId.MergeFrom(other.LastPlayedHeroId);
      }
      if (other.bannerConfiguration_ != null) {
        if (bannerConfiguration_ == null) {
          bannerConfiguration_ = new global::D3.Account.BannerConfiguration();
        }
        BannerConfiguration.MergeFrom(other.BannerConfiguration);
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.PvpCooldown != 0UL) {
        PvpCooldown = other.PvpCooldown;
      }
      if (other.SeasonId != 0) {
        SeasonId = other.SeasonId;
      }
      if (other.GuildId != 0UL) {
        GuildId = other.GuildId;
      }
      altLevels_.Add(other.altLevels_);
      if (other.StashTabsRewardedFromSeasons != 0) {
        StashTabsRewardedFromSeasons = other.StashTabsRewardedFromSeasons;
      }
      if (other.RebirthsUsed != 0) {
        RebirthsUsed = other.RebirthsUsed;
      }
      if (other.PatchVersion.Length != 0) {
        PatchVersion = other.PatchVersion;
      }
      if (other.challengeRiftAccountData_ != null) {
        if (challengeRiftAccountData_ == null) {
          challengeRiftAccountData_ = new global::D3.ChallengeRifts.AccountData();
        }
        ChallengeRiftAccountData.MergeFrom(other.ChallengeRiftAccountData);
      }
      if (other.CompletedSoloRift != false) {
        CompletedSoloRift = other.CompletedSoloRift;
      }
      if (other.LastPublishTime != 0) {
        LastPublishTime = other.LastPublishTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (lastPlayedHeroId_ == null) {
              lastPlayedHeroId_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(lastPlayedHeroId_);
            break;
          }
          case 26: {
            if (bannerConfiguration_ == null) {
              bannerConfiguration_ = new global::D3.Account.BannerConfiguration();
            }
            input.ReadMessage(bannerConfiguration_);
            break;
          }
          case 32: {
            Flags = input.ReadUInt32();
            break;
          }
          case 40: {
            PvpCooldown = input.ReadUInt64();
            break;
          }
          case 56: {
            SeasonId = input.ReadUInt32();
            break;
          }
          case 64: {
            GuildId = input.ReadUInt64();
            break;
          }
          case 74:
          case 72: {
            altLevels_.AddEntriesFrom(input, _repeated_altLevels_codec);
            break;
          }
          case 80: {
            StashTabsRewardedFromSeasons = input.ReadUInt32();
            break;
          }
          case 88: {
            RebirthsUsed = input.ReadUInt32();
            break;
          }
          case 98: {
            PatchVersion = input.ReadString();
            break;
          }
          case 106: {
            if (challengeRiftAccountData_ == null) {
              challengeRiftAccountData_ = new global::D3.ChallengeRifts.AccountData();
            }
            input.ReadMessage(challengeRiftAccountData_);
            break;
          }
          case 112: {
            CompletedSoloRift = input.ReadBool();
            break;
          }
          case 120: {
            LastPublishTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Digest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Flags {
        [pbr::OriginalName("UNUSED")] Unused = 0,
        [pbr::OriginalName("HARDCORE_HERO_UNLOCKED_DEPRECATED")] HardcoreHeroUnlockedDeprecated = 1,
        [pbr::OriginalName("ADVENTURE_MODE_UNLOCKED")] AdventureModeUnlocked = 2,
        [pbr::OriginalName("PARAGON_100_VANILLA_FEAT")] Paragon100VanillaFeat = 3,
        [pbr::OriginalName("MASTER_DIFFICULTY_UNLOCKED")] MasterDifficultyUnlocked = 4,
        [pbr::OriginalName("TORMENT_DIFFICULTY_UNLOCKED")] TormentDifficultyUnlocked = 5,
        [pbr::OriginalName("ADVENTURE_MODE_TUTORIAL_PLAYED")] AdventureModeTutorialPlayed = 6,
        [pbr::OriginalName("HARDCORE_MASTER_DIFFICULTY_UNLOCKED")] HardcoreMasterDifficultyUnlocked = 7,
        [pbr::OriginalName("HARDCORE_TORMENT_DIFFICULTY_UNLOCKED")] HardcoreTormentDifficultyUnlocked = 8,
        [pbr::OriginalName("HARDCORE_ADVENTURE_MODE_UNLOCKED")] HardcoreAdventureModeUnlocked = 9,
        [pbr::OriginalName("TORMENT_DIFFICULTY_7_AND_OVER_UNLOCKED")] TormentDifficulty7AndOverUnlocked = 10,
        [pbr::OriginalName("HARDCORE_TORMENT_DIFFICULTY_7_AND_OVER_UNLOCKED_DEPRECATED")] HardcoreTormentDifficulty7AndOverUnlockedDeprecated = 11,
        [pbr::OriginalName("BANNED")] Banned = 12,
      }

    }
    #endregion

  }

  public sealed partial class ConsoleRandomTransmuteSeed : pb::IMessage<ConsoleRandomTransmuteSeed> {
    private static readonly pb::MessageParser<ConsoleRandomTransmuteSeed> _parser = new pb::MessageParser<ConsoleRandomTransmuteSeed>(() => new ConsoleRandomTransmuteSeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleRandomTransmuteSeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomTransmuteSeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomTransmuteSeed(ConsoleRandomTransmuteSeed other) : this() {
      itemSlotKey_ = other.itemSlotKey_;
      randomItemSeed_ = other.randomItemSeed_;
      randomItemCarry_ = other.randomItemCarry_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomTransmuteSeed Clone() {
      return new ConsoleRandomTransmuteSeed(this);
    }

    /// <summary>Field number for the "item_slot_key" field.</summary>
    public const int ItemSlotKeyFieldNumber = 1;
    private int itemSlotKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSlotKey {
      get { return itemSlotKey_; }
      set {
        itemSlotKey_ = value;
      }
    }

    /// <summary>Field number for the "random_item_seed" field.</summary>
    public const int RandomItemSeedFieldNumber = 2;
    private int randomItemSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomItemSeed {
      get { return randomItemSeed_; }
      set {
        randomItemSeed_ = value;
      }
    }

    /// <summary>Field number for the "random_item_carry" field.</summary>
    public const int RandomItemCarryFieldNumber = 3;
    private int randomItemCarry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomItemCarry {
      get { return randomItemCarry_; }
      set {
        randomItemCarry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleRandomTransmuteSeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleRandomTransmuteSeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemSlotKey != other.ItemSlotKey) return false;
      if (RandomItemSeed != other.RandomItemSeed) return false;
      if (RandomItemCarry != other.RandomItemCarry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemSlotKey != 0) hash ^= ItemSlotKey.GetHashCode();
      if (RandomItemSeed != 0) hash ^= RandomItemSeed.GetHashCode();
      if (RandomItemCarry != 0) hash ^= RandomItemCarry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemSlotKey != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ItemSlotKey);
      }
      if (RandomItemSeed != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(RandomItemSeed);
      }
      if (RandomItemCarry != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(RandomItemCarry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemSlotKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemSlotKey);
      }
      if (RandomItemSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RandomItemSeed);
      }
      if (RandomItemCarry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RandomItemCarry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleRandomTransmuteSeed other) {
      if (other == null) {
        return;
      }
      if (other.ItemSlotKey != 0) {
        ItemSlotKey = other.ItemSlotKey;
      }
      if (other.RandomItemSeed != 0) {
        RandomItemSeed = other.RandomItemSeed;
      }
      if (other.RandomItemCarry != 0) {
        RandomItemCarry = other.RandomItemCarry;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemSlotKey = input.ReadSInt32();
            break;
          }
          case 16: {
            RandomItemSeed = input.ReadSInt32();
            break;
          }
          case 24: {
            RandomItemCarry = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsoleRandomTransmuteSeedList : pb::IMessage<ConsoleRandomTransmuteSeedList> {
    private static readonly pb::MessageParser<ConsoleRandomTransmuteSeedList> _parser = new pb::MessageParser<ConsoleRandomTransmuteSeedList>(() => new ConsoleRandomTransmuteSeedList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleRandomTransmuteSeedList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomTransmuteSeedList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomTransmuteSeedList(ConsoleRandomTransmuteSeedList other) : this() {
      consoleRandomTransmuteSeed_ = other.consoleRandomTransmuteSeed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomTransmuteSeedList Clone() {
      return new ConsoleRandomTransmuteSeedList(this);
    }

    /// <summary>Field number for the "console_random_transmute_seed" field.</summary>
    public const int ConsoleRandomTransmuteSeedFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Account.ConsoleRandomTransmuteSeed> _repeated_consoleRandomTransmuteSeed_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Account.ConsoleRandomTransmuteSeed.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.ConsoleRandomTransmuteSeed> consoleRandomTransmuteSeed_ = new pbc::RepeatedField<global::D3.Account.ConsoleRandomTransmuteSeed>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.ConsoleRandomTransmuteSeed> ConsoleRandomTransmuteSeed {
      get { return consoleRandomTransmuteSeed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleRandomTransmuteSeedList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleRandomTransmuteSeedList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!consoleRandomTransmuteSeed_.Equals(other.consoleRandomTransmuteSeed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= consoleRandomTransmuteSeed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      consoleRandomTransmuteSeed_.WriteTo(output, _repeated_consoleRandomTransmuteSeed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += consoleRandomTransmuteSeed_.CalculateSize(_repeated_consoleRandomTransmuteSeed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleRandomTransmuteSeedList other) {
      if (other == null) {
        return;
      }
      consoleRandomTransmuteSeed_.Add(other.consoleRandomTransmuteSeed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            consoleRandomTransmuteSeed_.AddEntriesFrom(input, _repeated_consoleRandomTransmuteSeed_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsolePartitionData : pb::IMessage<ConsolePartitionData> {
    private static readonly pb::MessageParser<ConsolePartitionData> _parser = new pb::MessageParser<ConsolePartitionData>(() => new ConsolePartitionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsolePartitionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsolePartitionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsolePartitionData(ConsolePartitionData other) : this() {
      seasonalGiftGbidsRedeemed_ = other.seasonalGiftGbidsRedeemed_.Clone();
      seasonalRolloverItem_ = other.seasonalRolloverItem_.Clone();
      consoleRandomTransmuteSeedList_ = other.consoleRandomTransmuteSeedList_ != null ? other.consoleRandomTransmuteSeedList_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsolePartitionData Clone() {
      return new ConsolePartitionData(this);
    }

    /// <summary>Field number for the "seasonal_gift_gbids_redeemed" field.</summary>
    public const int SeasonalGiftGbidsRedeemedFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_seasonalGiftGbidsRedeemed_codec
        = pb::FieldCodec.ForSInt32(10);
    private readonly pbc::RepeatedField<int> seasonalGiftGbidsRedeemed_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SeasonalGiftGbidsRedeemed {
      get { return seasonalGiftGbidsRedeemed_; }
    }

    /// <summary>Field number for the "seasonal_rollover_item" field.</summary>
    public const int SeasonalRolloverItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem> _repeated_seasonalRolloverItem_codec
        = pb::FieldCodec.ForMessage(18, global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem> seasonalRolloverItem_ = new pbc::RepeatedField<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.ConsolePartitionData.Types.SeasonalRolloverItem> SeasonalRolloverItem {
      get { return seasonalRolloverItem_; }
    }

    /// <summary>Field number for the "console_random_transmute_seed_list" field.</summary>
    public const int ConsoleRandomTransmuteSeedListFieldNumber = 3;
    private global::D3.Account.ConsoleRandomTransmuteSeedList consoleRandomTransmuteSeedList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.ConsoleRandomTransmuteSeedList ConsoleRandomTransmuteSeedList {
      get { return consoleRandomTransmuteSeedList_; }
      set {
        consoleRandomTransmuteSeedList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsolePartitionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsolePartitionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!seasonalGiftGbidsRedeemed_.Equals(other.seasonalGiftGbidsRedeemed_)) return false;
      if(!seasonalRolloverItem_.Equals(other.seasonalRolloverItem_)) return false;
      if (!object.Equals(ConsoleRandomTransmuteSeedList, other.ConsoleRandomTransmuteSeedList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= seasonalGiftGbidsRedeemed_.GetHashCode();
      hash ^= seasonalRolloverItem_.GetHashCode();
      if (consoleRandomTransmuteSeedList_ != null) hash ^= ConsoleRandomTransmuteSeedList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      seasonalGiftGbidsRedeemed_.WriteTo(output, _repeated_seasonalGiftGbidsRedeemed_codec);
      seasonalRolloverItem_.WriteTo(output, _repeated_seasonalRolloverItem_codec);
      if (consoleRandomTransmuteSeedList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConsoleRandomTransmuteSeedList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += seasonalGiftGbidsRedeemed_.CalculateSize(_repeated_seasonalGiftGbidsRedeemed_codec);
      size += seasonalRolloverItem_.CalculateSize(_repeated_seasonalRolloverItem_codec);
      if (consoleRandomTransmuteSeedList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsoleRandomTransmuteSeedList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsolePartitionData other) {
      if (other == null) {
        return;
      }
      seasonalGiftGbidsRedeemed_.Add(other.seasonalGiftGbidsRedeemed_);
      seasonalRolloverItem_.Add(other.seasonalRolloverItem_);
      if (other.consoleRandomTransmuteSeedList_ != null) {
        if (consoleRandomTransmuteSeedList_ == null) {
          consoleRandomTransmuteSeedList_ = new global::D3.Account.ConsoleRandomTransmuteSeedList();
        }
        ConsoleRandomTransmuteSeedList.MergeFrom(other.ConsoleRandomTransmuteSeedList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            seasonalGiftGbidsRedeemed_.AddEntriesFrom(input, _repeated_seasonalGiftGbidsRedeemed_codec);
            break;
          }
          case 18: {
            seasonalRolloverItem_.AddEntriesFrom(input, _repeated_seasonalRolloverItem_codec);
            break;
          }
          case 26: {
            if (consoleRandomTransmuteSeedList_ == null) {
              consoleRandomTransmuteSeedList_ = new global::D3.Account.ConsoleRandomTransmuteSeedList();
            }
            input.ReadMessage(consoleRandomTransmuteSeedList_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConsolePartitionData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class SeasonalRolloverItem : pb::IMessage<SeasonalRolloverItem> {
        private static readonly pb::MessageParser<SeasonalRolloverItem> _parser = new pb::MessageParser<SeasonalRolloverItem>(() => new SeasonalRolloverItem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SeasonalRolloverItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::D3.Account.ConsolePartitionData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SeasonalRolloverItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SeasonalRolloverItem(SeasonalRolloverItem other) : this() {
          item_ = other.item_ != null ? other.item_.Clone() : null;
          createTime_ = other.createTime_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SeasonalRolloverItem Clone() {
          return new SeasonalRolloverItem(this);
        }

        /// <summary>Field number for the "item" field.</summary>
        public const int ItemFieldNumber = 1;
        private global::D3.Items.SavedItem item_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::D3.Items.SavedItem Item {
          get { return item_; }
          set {
            item_ = value;
          }
        }

        /// <summary>Field number for the "create_time" field.</summary>
        public const int CreateTimeFieldNumber = 2;
        private uint createTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreateTime {
          get { return createTime_; }
          set {
            createTime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SeasonalRolloverItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SeasonalRolloverItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Item, other.Item)) return false;
          if (CreateTime != other.CreateTime) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (item_ != null) hash ^= Item.GetHashCode();
          if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (item_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Item);
          }
          if (CreateTime != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(CreateTime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (item_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
          }
          if (CreateTime != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SeasonalRolloverItem other) {
          if (other == null) {
            return;
          }
          if (other.item_ != null) {
            if (item_ == null) {
              item_ = new global::D3.Items.SavedItem();
            }
            Item.MergeFrom(other.Item);
          }
          if (other.CreateTime != 0) {
            CreateTime = other.CreateTime;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (item_ == null) {
                  item_ = new global::D3.Items.SavedItem();
                }
                input.ReadMessage(item_);
                break;
              }
              case 16: {
                CreateTime = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class AccountPartition : pb::IMessage<AccountPartition> {
    private static readonly pb::MessageParser<AccountPartition> _parser = new pb::MessageParser<AccountPartition>(() => new AccountPartition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountPartition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountPartition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountPartition(AccountPartition other) : this() {
      partitionId_ = other.partitionId_;
      savedAttributes_ = other.savedAttributes_ != null ? other.savedAttributes_.Clone() : null;
      items_ = other.items_ != null ? other.items_.Clone() : null;
      crafterData_ = other.crafterData_ != null ? other.crafterData_.Clone() : null;
      goldIdDeprecated_ = other.goldIdDeprecated_ != null ? other.goldIdDeprecated_.Clone() : null;
      stashIcons_ = other.stashIcons_;
      acceptedLicenseBits_ = other.acceptedLicenseBits_;
      altLevel_ = other.altLevel_;
      currencyData_ = other.currencyData_ != null ? other.currencyData_.Clone() : null;
      flags_ = other.flags_;
      consolePartitionData_ = other.consolePartitionData_ != null ? other.consolePartitionData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountPartition Clone() {
      return new AccountPartition(this);
    }

    /// <summary>Field number for the "partition_id" field.</summary>
    public const int PartitionIdFieldNumber = 1;
    private int partitionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "saved_attributes" field.</summary>
    public const int SavedAttributesFieldNumber = 2;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_; }
      set {
        savedAttributes_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 3;
    private global::D3.Items.ItemList items_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.ItemList Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "crafter_data" field.</summary>
    public const int CrafterDataFieldNumber = 4;
    private global::D3.ItemCrafting.CrafterSavedData crafterData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.ItemCrafting.CrafterSavedData CrafterData {
      get { return crafterData_; }
      set {
        crafterData_ = value;
      }
    }

    /// <summary>Field number for the "gold_id_deprecated" field.</summary>
    public const int GoldIdDeprecatedFieldNumber = 5;
    private global::D3.OnlineService.EntityId goldIdDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId GoldIdDeprecated {
      get { return goldIdDeprecated_; }
      set {
        goldIdDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "stash_icons" field.</summary>
    public const int StashIconsFieldNumber = 6;
    private pb::ByteString stashIcons_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StashIcons {
      get { return stashIcons_; }
      set {
        stashIcons_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accepted_license_bits" field.</summary>
    public const int AcceptedLicenseBitsFieldNumber = 7;
    private ulong acceptedLicenseBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AcceptedLicenseBits {
      get { return acceptedLicenseBits_; }
      set {
        acceptedLicenseBits_ = value;
      }
    }

    /// <summary>Field number for the "alt_level" field.</summary>
    public const int AltLevelFieldNumber = 8;
    private uint altLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AltLevel {
      get { return altLevel_; }
      set {
        altLevel_ = value;
      }
    }

    /// <summary>Field number for the "currency_data" field.</summary>
    public const int CurrencyDataFieldNumber = 9;
    private global::D3.Items.CurrencySavedData currencyData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.CurrencySavedData CurrencyData {
      get { return currencyData_; }
      set {
        currencyData_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 10;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "console_partition_data" field.</summary>
    public const int ConsolePartitionDataFieldNumber = 11;
    private global::D3.Account.ConsolePartitionData consolePartitionData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.ConsolePartitionData ConsolePartitionData {
      get { return consolePartitionData_; }
      set {
        consolePartitionData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountPartition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountPartition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartitionId != other.PartitionId) return false;
      if (!object.Equals(SavedAttributes, other.SavedAttributes)) return false;
      if (!object.Equals(Items, other.Items)) return false;
      if (!object.Equals(CrafterData, other.CrafterData)) return false;
      if (!object.Equals(GoldIdDeprecated, other.GoldIdDeprecated)) return false;
      if (StashIcons != other.StashIcons) return false;
      if (AcceptedLicenseBits != other.AcceptedLicenseBits) return false;
      if (AltLevel != other.AltLevel) return false;
      if (!object.Equals(CurrencyData, other.CurrencyData)) return false;
      if (Flags != other.Flags) return false;
      if (!object.Equals(ConsolePartitionData, other.ConsolePartitionData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartitionId != 0) hash ^= PartitionId.GetHashCode();
      if (savedAttributes_ != null) hash ^= SavedAttributes.GetHashCode();
      if (items_ != null) hash ^= Items.GetHashCode();
      if (crafterData_ != null) hash ^= CrafterData.GetHashCode();
      if (goldIdDeprecated_ != null) hash ^= GoldIdDeprecated.GetHashCode();
      if (StashIcons.Length != 0) hash ^= StashIcons.GetHashCode();
      if (AcceptedLicenseBits != 0UL) hash ^= AcceptedLicenseBits.GetHashCode();
      if (AltLevel != 0) hash ^= AltLevel.GetHashCode();
      if (currencyData_ != null) hash ^= CurrencyData.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (consolePartitionData_ != null) hash ^= ConsolePartitionData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartitionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PartitionId);
      }
      if (savedAttributes_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SavedAttributes);
      }
      if (items_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Items);
      }
      if (crafterData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CrafterData);
      }
      if (goldIdDeprecated_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GoldIdDeprecated);
      }
      if (StashIcons.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(StashIcons);
      }
      if (AcceptedLicenseBits != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AcceptedLicenseBits);
      }
      if (AltLevel != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(AltLevel);
      }
      if (currencyData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CurrencyData);
      }
      if (Flags != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Flags);
      }
      if (consolePartitionData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ConsolePartitionData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartitionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartitionId);
      }
      if (savedAttributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SavedAttributes);
      }
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (crafterData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CrafterData);
      }
      if (goldIdDeprecated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoldIdDeprecated);
      }
      if (StashIcons.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StashIcons);
      }
      if (AcceptedLicenseBits != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AcceptedLicenseBits);
      }
      if (AltLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AltLevel);
      }
      if (currencyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrencyData);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (consolePartitionData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsolePartitionData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountPartition other) {
      if (other == null) {
        return;
      }
      if (other.PartitionId != 0) {
        PartitionId = other.PartitionId;
      }
      if (other.savedAttributes_ != null) {
        if (savedAttributes_ == null) {
          savedAttributes_ = new global::D3.AttributeSerializer.SavedAttributes();
        }
        SavedAttributes.MergeFrom(other.SavedAttributes);
      }
      if (other.items_ != null) {
        if (items_ == null) {
          items_ = new global::D3.Items.ItemList();
        }
        Items.MergeFrom(other.Items);
      }
      if (other.crafterData_ != null) {
        if (crafterData_ == null) {
          crafterData_ = new global::D3.ItemCrafting.CrafterSavedData();
        }
        CrafterData.MergeFrom(other.CrafterData);
      }
      if (other.goldIdDeprecated_ != null) {
        if (goldIdDeprecated_ == null) {
          goldIdDeprecated_ = new global::D3.OnlineService.EntityId();
        }
        GoldIdDeprecated.MergeFrom(other.GoldIdDeprecated);
      }
      if (other.StashIcons.Length != 0) {
        StashIcons = other.StashIcons;
      }
      if (other.AcceptedLicenseBits != 0UL) {
        AcceptedLicenseBits = other.AcceptedLicenseBits;
      }
      if (other.AltLevel != 0) {
        AltLevel = other.AltLevel;
      }
      if (other.currencyData_ != null) {
        if (currencyData_ == null) {
          currencyData_ = new global::D3.Items.CurrencySavedData();
        }
        CurrencyData.MergeFrom(other.CurrencyData);
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.consolePartitionData_ != null) {
        if (consolePartitionData_ == null) {
          consolePartitionData_ = new global::D3.Account.ConsolePartitionData();
        }
        ConsolePartitionData.MergeFrom(other.ConsolePartitionData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PartitionId = input.ReadInt32();
            break;
          }
          case 18: {
            if (savedAttributes_ == null) {
              savedAttributes_ = new global::D3.AttributeSerializer.SavedAttributes();
            }
            input.ReadMessage(savedAttributes_);
            break;
          }
          case 26: {
            if (items_ == null) {
              items_ = new global::D3.Items.ItemList();
            }
            input.ReadMessage(items_);
            break;
          }
          case 34: {
            if (crafterData_ == null) {
              crafterData_ = new global::D3.ItemCrafting.CrafterSavedData();
            }
            input.ReadMessage(crafterData_);
            break;
          }
          case 42: {
            if (goldIdDeprecated_ == null) {
              goldIdDeprecated_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(goldIdDeprecated_);
            break;
          }
          case 50: {
            StashIcons = input.ReadBytes();
            break;
          }
          case 56: {
            AcceptedLicenseBits = input.ReadUInt64();
            break;
          }
          case 64: {
            AltLevel = input.ReadUInt32();
            break;
          }
          case 74: {
            if (currencyData_ == null) {
              currencyData_ = new global::D3.Items.CurrencySavedData();
            }
            input.ReadMessage(currencyData_);
            break;
          }
          case 80: {
            Flags = input.ReadUInt32();
            break;
          }
          case 90: {
            if (consolePartitionData_ == null) {
              consolePartitionData_ = new global::D3.Account.ConsolePartitionData();
            }
            input.ReadMessage(consolePartitionData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SavedDefinition : pb::IMessage<SavedDefinition> {
    private static readonly pb::MessageParser<SavedDefinition> _parser = new pb::MessageParser<SavedDefinition>(() => new SavedDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SavedDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedDefinition(SavedDefinition other) : this() {
      version_ = other.version_;
      digest_ = other.digest_ != null ? other.digest_.Clone() : null;
      savedAttributes_ = other.savedAttributes_ != null ? other.savedAttributes_.Clone() : null;
      seenTutorials_ = other.seenTutorials_;
      numVoteKicksParticipatedIn_ = other.numVoteKicksParticipatedIn_;
      numVoteKicksInitiated_ = other.numVoteKicksInitiated_;
      numPublicGamesNoKick_ = other.numPublicGamesNoKick_;
      timesVoteKicked_ = other.timesVoteKicked_;
      createTime_ = other.createTime_;
      numGroupsCreatedDeprecated_ = other.numGroupsCreatedDeprecated_;
      partitions_ = other.partitions_.Clone();
      deprecatedSavedAttributesHardcore_ = other.deprecatedSavedAttributesHardcore_ != null ? other.deprecatedSavedAttributesHardcore_.Clone() : null;
      deprecatedNormalSharedSavedItems_ = other.deprecatedNormalSharedSavedItems_ != null ? other.deprecatedNormalSharedSavedItems_.Clone() : null;
      deprecatedHardcoreSharedSavedItems_ = other.deprecatedHardcoreSharedSavedItems_ != null ? other.deprecatedHardcoreSharedSavedItems_.Clone() : null;
      deprecatedCrafterNormalData_ = other.deprecatedCrafterNormalData_ != null ? other.deprecatedCrafterNormalData_.Clone() : null;
      deprecatedCrafterHardcoreData_ = other.deprecatedCrafterHardcoreData_ != null ? other.deprecatedCrafterHardcoreData_.Clone() : null;
      deprecatedGoldIdNormal_ = other.deprecatedGoldIdNormal_ != null ? other.deprecatedGoldIdNormal_.Clone() : null;
      deprecatedGoldIdHardcore_ = other.deprecatedGoldIdHardcore_ != null ? other.deprecatedGoldIdHardcore_.Clone() : null;
      deprecatedStashIconsNormal_ = other.deprecatedStashIconsNormal_;
      deprecatedAcceptedLicenseBits_ = other.deprecatedAcceptedLicenseBits_;
      deprecatedStashIconsHardcore_ = other.deprecatedStashIconsHardcore_;
      consoleData_ = other.consoleData_ != null ? other.consoleData_.Clone() : null;
      accountWideTransmogData_ = other.accountWideTransmogData_ != null ? other.accountWideTransmogData_.Clone() : null;
      accountWideCosmeticItemData_ = other.accountWideCosmeticItemData_ != null ? other.accountWideCosmeticItemData_.Clone() : null;
      accountWideCurrencyData_ = other.accountWideCurrencyData_ != null ? other.accountWideCurrencyData_.Clone() : null;
      deliveredRewards_ = other.deliveredRewards_ != null ? other.deliveredRewards_.Clone() : null;
      consumables_ = other.consumables_ != null ? other.consumables_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedDefinition Clone() {
      return new SavedDefinition(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 2;
    private global::D3.Account.Digest digest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.Digest Digest {
      get { return digest_; }
      set {
        digest_ = value;
      }
    }

    /// <summary>Field number for the "saved_attributes" field.</summary>
    public const int SavedAttributesFieldNumber = 3;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_; }
      set {
        savedAttributes_ = value;
      }
    }

    /// <summary>Field number for the "seen_tutorials" field.</summary>
    public const int SeenTutorialsFieldNumber = 9;
    private pb::ByteString seenTutorials_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SeenTutorials {
      get { return seenTutorials_; }
      set {
        seenTutorials_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_vote_kicks_participated_in" field.</summary>
    public const int NumVoteKicksParticipatedInFieldNumber = 10;
    private long numVoteKicksParticipatedIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumVoteKicksParticipatedIn {
      get { return numVoteKicksParticipatedIn_; }
      set {
        numVoteKicksParticipatedIn_ = value;
      }
    }

    /// <summary>Field number for the "num_vote_kicks_initiated" field.</summary>
    public const int NumVoteKicksInitiatedFieldNumber = 11;
    private long numVoteKicksInitiated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumVoteKicksInitiated {
      get { return numVoteKicksInitiated_; }
      set {
        numVoteKicksInitiated_ = value;
      }
    }

    /// <summary>Field number for the "num_public_games_no_kick" field.</summary>
    public const int NumPublicGamesNoKickFieldNumber = 12;
    private long numPublicGamesNoKick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumPublicGamesNoKick {
      get { return numPublicGamesNoKick_; }
      set {
        numPublicGamesNoKick_ = value;
      }
    }

    /// <summary>Field number for the "times_vote_kicked" field.</summary>
    public const int TimesVoteKickedFieldNumber = 13;
    private long timesVoteKicked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimesVoteKicked {
      get { return timesVoteKicked_; }
      set {
        timesVoteKicked_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 19;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "num_groups_created_deprecated" field.</summary>
    public const int NumGroupsCreatedDeprecatedFieldNumber = 22;
    private uint numGroupsCreatedDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumGroupsCreatedDeprecated {
      get { return numGroupsCreatedDeprecated_; }
      set {
        numGroupsCreatedDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "partitions" field.</summary>
    public const int PartitionsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::D3.Account.AccountPartition> _repeated_partitions_codec
        = pb::FieldCodec.ForMessage(162, global::D3.Account.AccountPartition.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.AccountPartition> partitions_ = new pbc::RepeatedField<global::D3.Account.AccountPartition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.AccountPartition> Partitions {
      get { return partitions_; }
    }

    /// <summary>Field number for the "deprecated_saved_attributes_hardcore" field.</summary>
    public const int DeprecatedSavedAttributesHardcoreFieldNumber = 4;
    private global::D3.AttributeSerializer.SavedAttributes deprecatedSavedAttributesHardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.AttributeSerializer.SavedAttributes DeprecatedSavedAttributesHardcore {
      get { return deprecatedSavedAttributesHardcore_; }
      set {
        deprecatedSavedAttributesHardcore_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_normal_shared_saved_items" field.</summary>
    public const int DeprecatedNormalSharedSavedItemsFieldNumber = 5;
    private global::D3.Items.ItemList deprecatedNormalSharedSavedItems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.ItemList DeprecatedNormalSharedSavedItems {
      get { return deprecatedNormalSharedSavedItems_; }
      set {
        deprecatedNormalSharedSavedItems_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_hardcore_shared_saved_items" field.</summary>
    public const int DeprecatedHardcoreSharedSavedItemsFieldNumber = 6;
    private global::D3.Items.ItemList deprecatedHardcoreSharedSavedItems_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.ItemList DeprecatedHardcoreSharedSavedItems {
      get { return deprecatedHardcoreSharedSavedItems_; }
      set {
        deprecatedHardcoreSharedSavedItems_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_crafter_normal_data" field.</summary>
    public const int DeprecatedCrafterNormalDataFieldNumber = 7;
    private global::D3.ItemCrafting.CrafterSavedData deprecatedCrafterNormalData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.ItemCrafting.CrafterSavedData DeprecatedCrafterNormalData {
      get { return deprecatedCrafterNormalData_; }
      set {
        deprecatedCrafterNormalData_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_crafter_hardcore_data" field.</summary>
    public const int DeprecatedCrafterHardcoreDataFieldNumber = 8;
    private global::D3.ItemCrafting.CrafterSavedData deprecatedCrafterHardcoreData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.ItemCrafting.CrafterSavedData DeprecatedCrafterHardcoreData {
      get { return deprecatedCrafterHardcoreData_; }
      set {
        deprecatedCrafterHardcoreData_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_gold_id_normal" field.</summary>
    public const int DeprecatedGoldIdNormalFieldNumber = 14;
    private global::D3.OnlineService.EntityId deprecatedGoldIdNormal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId DeprecatedGoldIdNormal {
      get { return deprecatedGoldIdNormal_; }
      set {
        deprecatedGoldIdNormal_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_gold_id_hardcore" field.</summary>
    public const int DeprecatedGoldIdHardcoreFieldNumber = 15;
    private global::D3.OnlineService.EntityId deprecatedGoldIdHardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId DeprecatedGoldIdHardcore {
      get { return deprecatedGoldIdHardcore_; }
      set {
        deprecatedGoldIdHardcore_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_stash_icons_normal" field.</summary>
    public const int DeprecatedStashIconsNormalFieldNumber = 16;
    private pb::ByteString deprecatedStashIconsNormal_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedStashIconsNormal {
      get { return deprecatedStashIconsNormal_; }
      set {
        deprecatedStashIconsNormal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecated_accepted_license_bits" field.</summary>
    public const int DeprecatedAcceptedLicenseBitsFieldNumber = 17;
    private ulong deprecatedAcceptedLicenseBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeprecatedAcceptedLicenseBits {
      get { return deprecatedAcceptedLicenseBits_; }
      set {
        deprecatedAcceptedLicenseBits_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_stash_icons_hardcore" field.</summary>
    public const int DeprecatedStashIconsHardcoreFieldNumber = 18;
    private pb::ByteString deprecatedStashIconsHardcore_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeprecatedStashIconsHardcore {
      get { return deprecatedStashIconsHardcore_; }
      set {
        deprecatedStashIconsHardcore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "console_data" field.</summary>
    public const int ConsoleDataFieldNumber = 21;
    private global::D3.Account.ConsoleData consoleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.ConsoleData ConsoleData {
      get { return consoleData_; }
      set {
        consoleData_ = value;
      }
    }

    /// <summary>Field number for the "account_wide_transmog_data" field.</summary>
    public const int AccountWideTransmogDataFieldNumber = 23;
    private global::D3.GameBalance.BitPackedGbidArray accountWideTransmogData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.GameBalance.BitPackedGbidArray AccountWideTransmogData {
      get { return accountWideTransmogData_; }
      set {
        accountWideTransmogData_ = value;
      }
    }

    /// <summary>Field number for the "account_wide_cosmetic_item_data" field.</summary>
    public const int AccountWideCosmeticItemDataFieldNumber = 24;
    private global::D3.CosmeticItems.CosmeticItemSavedData accountWideCosmeticItemData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.CosmeticItems.CosmeticItemSavedData AccountWideCosmeticItemData {
      get { return accountWideCosmeticItemData_; }
      set {
        accountWideCosmeticItemData_ = value;
      }
    }

    /// <summary>Field number for the "account_wide_currency_data" field.</summary>
    public const int AccountWideCurrencyDataFieldNumber = 26;
    private global::D3.Items.CurrencySavedData accountWideCurrencyData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.CurrencySavedData AccountWideCurrencyData {
      get { return accountWideCurrencyData_; }
      set {
        accountWideCurrencyData_ = value;
      }
    }

    /// <summary>Field number for the "delivered_rewards" field.</summary>
    public const int DeliveredRewardsFieldNumber = 27;
    private global::D3.Account.DeliveredRewards deliveredRewards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.DeliveredRewards DeliveredRewards {
      get { return deliveredRewards_; }
      set {
        deliveredRewards_ = value;
      }
    }

    /// <summary>Field number for the "consumables" field.</summary>
    public const int ConsumablesFieldNumber = 28;
    private global::D3.Account.Consumables consumables_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.Consumables Consumables {
      get { return consumables_; }
      set {
        consumables_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SavedDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SavedDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Digest, other.Digest)) return false;
      if (!object.Equals(SavedAttributes, other.SavedAttributes)) return false;
      if (SeenTutorials != other.SeenTutorials) return false;
      if (NumVoteKicksParticipatedIn != other.NumVoteKicksParticipatedIn) return false;
      if (NumVoteKicksInitiated != other.NumVoteKicksInitiated) return false;
      if (NumPublicGamesNoKick != other.NumPublicGamesNoKick) return false;
      if (TimesVoteKicked != other.TimesVoteKicked) return false;
      if (CreateTime != other.CreateTime) return false;
      if (NumGroupsCreatedDeprecated != other.NumGroupsCreatedDeprecated) return false;
      if(!partitions_.Equals(other.partitions_)) return false;
      if (!object.Equals(DeprecatedSavedAttributesHardcore, other.DeprecatedSavedAttributesHardcore)) return false;
      if (!object.Equals(DeprecatedNormalSharedSavedItems, other.DeprecatedNormalSharedSavedItems)) return false;
      if (!object.Equals(DeprecatedHardcoreSharedSavedItems, other.DeprecatedHardcoreSharedSavedItems)) return false;
      if (!object.Equals(DeprecatedCrafterNormalData, other.DeprecatedCrafterNormalData)) return false;
      if (!object.Equals(DeprecatedCrafterHardcoreData, other.DeprecatedCrafterHardcoreData)) return false;
      if (!object.Equals(DeprecatedGoldIdNormal, other.DeprecatedGoldIdNormal)) return false;
      if (!object.Equals(DeprecatedGoldIdHardcore, other.DeprecatedGoldIdHardcore)) return false;
      if (DeprecatedStashIconsNormal != other.DeprecatedStashIconsNormal) return false;
      if (DeprecatedAcceptedLicenseBits != other.DeprecatedAcceptedLicenseBits) return false;
      if (DeprecatedStashIconsHardcore != other.DeprecatedStashIconsHardcore) return false;
      if (!object.Equals(ConsoleData, other.ConsoleData)) return false;
      if (!object.Equals(AccountWideTransmogData, other.AccountWideTransmogData)) return false;
      if (!object.Equals(AccountWideCosmeticItemData, other.AccountWideCosmeticItemData)) return false;
      if (!object.Equals(AccountWideCurrencyData, other.AccountWideCurrencyData)) return false;
      if (!object.Equals(DeliveredRewards, other.DeliveredRewards)) return false;
      if (!object.Equals(Consumables, other.Consumables)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (digest_ != null) hash ^= Digest.GetHashCode();
      if (savedAttributes_ != null) hash ^= SavedAttributes.GetHashCode();
      if (SeenTutorials.Length != 0) hash ^= SeenTutorials.GetHashCode();
      if (NumVoteKicksParticipatedIn != 0L) hash ^= NumVoteKicksParticipatedIn.GetHashCode();
      if (NumVoteKicksInitiated != 0L) hash ^= NumVoteKicksInitiated.GetHashCode();
      if (NumPublicGamesNoKick != 0L) hash ^= NumPublicGamesNoKick.GetHashCode();
      if (TimesVoteKicked != 0L) hash ^= TimesVoteKicked.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (NumGroupsCreatedDeprecated != 0) hash ^= NumGroupsCreatedDeprecated.GetHashCode();
      hash ^= partitions_.GetHashCode();
      if (deprecatedSavedAttributesHardcore_ != null) hash ^= DeprecatedSavedAttributesHardcore.GetHashCode();
      if (deprecatedNormalSharedSavedItems_ != null) hash ^= DeprecatedNormalSharedSavedItems.GetHashCode();
      if (deprecatedHardcoreSharedSavedItems_ != null) hash ^= DeprecatedHardcoreSharedSavedItems.GetHashCode();
      if (deprecatedCrafterNormalData_ != null) hash ^= DeprecatedCrafterNormalData.GetHashCode();
      if (deprecatedCrafterHardcoreData_ != null) hash ^= DeprecatedCrafterHardcoreData.GetHashCode();
      if (deprecatedGoldIdNormal_ != null) hash ^= DeprecatedGoldIdNormal.GetHashCode();
      if (deprecatedGoldIdHardcore_ != null) hash ^= DeprecatedGoldIdHardcore.GetHashCode();
      if (DeprecatedStashIconsNormal.Length != 0) hash ^= DeprecatedStashIconsNormal.GetHashCode();
      if (DeprecatedAcceptedLicenseBits != 0UL) hash ^= DeprecatedAcceptedLicenseBits.GetHashCode();
      if (DeprecatedStashIconsHardcore.Length != 0) hash ^= DeprecatedStashIconsHardcore.GetHashCode();
      if (consoleData_ != null) hash ^= ConsoleData.GetHashCode();
      if (accountWideTransmogData_ != null) hash ^= AccountWideTransmogData.GetHashCode();
      if (accountWideCosmeticItemData_ != null) hash ^= AccountWideCosmeticItemData.GetHashCode();
      if (accountWideCurrencyData_ != null) hash ^= AccountWideCurrencyData.GetHashCode();
      if (deliveredRewards_ != null) hash ^= DeliveredRewards.GetHashCode();
      if (consumables_ != null) hash ^= Consumables.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (digest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Digest);
      }
      if (savedAttributes_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SavedAttributes);
      }
      if (deprecatedSavedAttributesHardcore_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DeprecatedSavedAttributesHardcore);
      }
      if (deprecatedNormalSharedSavedItems_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DeprecatedNormalSharedSavedItems);
      }
      if (deprecatedHardcoreSharedSavedItems_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeprecatedHardcoreSharedSavedItems);
      }
      if (deprecatedCrafterNormalData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DeprecatedCrafterNormalData);
      }
      if (deprecatedCrafterHardcoreData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DeprecatedCrafterHardcoreData);
      }
      if (SeenTutorials.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(SeenTutorials);
      }
      if (NumVoteKicksParticipatedIn != 0L) {
        output.WriteRawTag(81);
        output.WriteSFixed64(NumVoteKicksParticipatedIn);
      }
      if (NumVoteKicksInitiated != 0L) {
        output.WriteRawTag(89);
        output.WriteSFixed64(NumVoteKicksInitiated);
      }
      if (NumPublicGamesNoKick != 0L) {
        output.WriteRawTag(97);
        output.WriteSFixed64(NumPublicGamesNoKick);
      }
      if (TimesVoteKicked != 0L) {
        output.WriteRawTag(105);
        output.WriteSFixed64(TimesVoteKicked);
      }
      if (deprecatedGoldIdNormal_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(DeprecatedGoldIdNormal);
      }
      if (deprecatedGoldIdHardcore_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DeprecatedGoldIdHardcore);
      }
      if (DeprecatedStashIconsNormal.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(DeprecatedStashIconsNormal);
      }
      if (DeprecatedAcceptedLicenseBits != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(DeprecatedAcceptedLicenseBits);
      }
      if (DeprecatedStashIconsHardcore.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(DeprecatedStashIconsHardcore);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(CreateTime);
      }
      partitions_.WriteTo(output, _repeated_partitions_codec);
      if (consoleData_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ConsoleData);
      }
      if (NumGroupsCreatedDeprecated != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(NumGroupsCreatedDeprecated);
      }
      if (accountWideTransmogData_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(AccountWideTransmogData);
      }
      if (accountWideCosmeticItemData_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(AccountWideCosmeticItemData);
      }
      if (accountWideCurrencyData_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(AccountWideCurrencyData);
      }
      if (deliveredRewards_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(DeliveredRewards);
      }
      if (consumables_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Consumables);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (digest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Digest);
      }
      if (savedAttributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SavedAttributes);
      }
      if (SeenTutorials.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SeenTutorials);
      }
      if (NumVoteKicksParticipatedIn != 0L) {
        size += 1 + 8;
      }
      if (NumVoteKicksInitiated != 0L) {
        size += 1 + 8;
      }
      if (NumPublicGamesNoKick != 0L) {
        size += 1 + 8;
      }
      if (TimesVoteKicked != 0L) {
        size += 1 + 8;
      }
      if (CreateTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (NumGroupsCreatedDeprecated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumGroupsCreatedDeprecated);
      }
      size += partitions_.CalculateSize(_repeated_partitions_codec);
      if (deprecatedSavedAttributesHardcore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedSavedAttributesHardcore);
      }
      if (deprecatedNormalSharedSavedItems_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedNormalSharedSavedItems);
      }
      if (deprecatedHardcoreSharedSavedItems_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedHardcoreSharedSavedItems);
      }
      if (deprecatedCrafterNormalData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedCrafterNormalData);
      }
      if (deprecatedCrafterHardcoreData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedCrafterHardcoreData);
      }
      if (deprecatedGoldIdNormal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedGoldIdNormal);
      }
      if (deprecatedGoldIdHardcore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedGoldIdHardcore);
      }
      if (DeprecatedStashIconsNormal.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedStashIconsNormal);
      }
      if (DeprecatedAcceptedLicenseBits != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(DeprecatedAcceptedLicenseBits);
      }
      if (DeprecatedStashIconsHardcore.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(DeprecatedStashIconsHardcore);
      }
      if (consoleData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConsoleData);
      }
      if (accountWideTransmogData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccountWideTransmogData);
      }
      if (accountWideCosmeticItemData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccountWideCosmeticItemData);
      }
      if (accountWideCurrencyData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccountWideCurrencyData);
      }
      if (deliveredRewards_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeliveredRewards);
      }
      if (consumables_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Consumables);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SavedDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.digest_ != null) {
        if (digest_ == null) {
          digest_ = new global::D3.Account.Digest();
        }
        Digest.MergeFrom(other.Digest);
      }
      if (other.savedAttributes_ != null) {
        if (savedAttributes_ == null) {
          savedAttributes_ = new global::D3.AttributeSerializer.SavedAttributes();
        }
        SavedAttributes.MergeFrom(other.SavedAttributes);
      }
      if (other.SeenTutorials.Length != 0) {
        SeenTutorials = other.SeenTutorials;
      }
      if (other.NumVoteKicksParticipatedIn != 0L) {
        NumVoteKicksParticipatedIn = other.NumVoteKicksParticipatedIn;
      }
      if (other.NumVoteKicksInitiated != 0L) {
        NumVoteKicksInitiated = other.NumVoteKicksInitiated;
      }
      if (other.NumPublicGamesNoKick != 0L) {
        NumPublicGamesNoKick = other.NumPublicGamesNoKick;
      }
      if (other.TimesVoteKicked != 0L) {
        TimesVoteKicked = other.TimesVoteKicked;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.NumGroupsCreatedDeprecated != 0) {
        NumGroupsCreatedDeprecated = other.NumGroupsCreatedDeprecated;
      }
      partitions_.Add(other.partitions_);
      if (other.deprecatedSavedAttributesHardcore_ != null) {
        if (deprecatedSavedAttributesHardcore_ == null) {
          deprecatedSavedAttributesHardcore_ = new global::D3.AttributeSerializer.SavedAttributes();
        }
        DeprecatedSavedAttributesHardcore.MergeFrom(other.DeprecatedSavedAttributesHardcore);
      }
      if (other.deprecatedNormalSharedSavedItems_ != null) {
        if (deprecatedNormalSharedSavedItems_ == null) {
          deprecatedNormalSharedSavedItems_ = new global::D3.Items.ItemList();
        }
        DeprecatedNormalSharedSavedItems.MergeFrom(other.DeprecatedNormalSharedSavedItems);
      }
      if (other.deprecatedHardcoreSharedSavedItems_ != null) {
        if (deprecatedHardcoreSharedSavedItems_ == null) {
          deprecatedHardcoreSharedSavedItems_ = new global::D3.Items.ItemList();
        }
        DeprecatedHardcoreSharedSavedItems.MergeFrom(other.DeprecatedHardcoreSharedSavedItems);
      }
      if (other.deprecatedCrafterNormalData_ != null) {
        if (deprecatedCrafterNormalData_ == null) {
          deprecatedCrafterNormalData_ = new global::D3.ItemCrafting.CrafterSavedData();
        }
        DeprecatedCrafterNormalData.MergeFrom(other.DeprecatedCrafterNormalData);
      }
      if (other.deprecatedCrafterHardcoreData_ != null) {
        if (deprecatedCrafterHardcoreData_ == null) {
          deprecatedCrafterHardcoreData_ = new global::D3.ItemCrafting.CrafterSavedData();
        }
        DeprecatedCrafterHardcoreData.MergeFrom(other.DeprecatedCrafterHardcoreData);
      }
      if (other.deprecatedGoldIdNormal_ != null) {
        if (deprecatedGoldIdNormal_ == null) {
          deprecatedGoldIdNormal_ = new global::D3.OnlineService.EntityId();
        }
        DeprecatedGoldIdNormal.MergeFrom(other.DeprecatedGoldIdNormal);
      }
      if (other.deprecatedGoldIdHardcore_ != null) {
        if (deprecatedGoldIdHardcore_ == null) {
          deprecatedGoldIdHardcore_ = new global::D3.OnlineService.EntityId();
        }
        DeprecatedGoldIdHardcore.MergeFrom(other.DeprecatedGoldIdHardcore);
      }
      if (other.DeprecatedStashIconsNormal.Length != 0) {
        DeprecatedStashIconsNormal = other.DeprecatedStashIconsNormal;
      }
      if (other.DeprecatedAcceptedLicenseBits != 0UL) {
        DeprecatedAcceptedLicenseBits = other.DeprecatedAcceptedLicenseBits;
      }
      if (other.DeprecatedStashIconsHardcore.Length != 0) {
        DeprecatedStashIconsHardcore = other.DeprecatedStashIconsHardcore;
      }
      if (other.consoleData_ != null) {
        if (consoleData_ == null) {
          consoleData_ = new global::D3.Account.ConsoleData();
        }
        ConsoleData.MergeFrom(other.ConsoleData);
      }
      if (other.accountWideTransmogData_ != null) {
        if (accountWideTransmogData_ == null) {
          accountWideTransmogData_ = new global::D3.GameBalance.BitPackedGbidArray();
        }
        AccountWideTransmogData.MergeFrom(other.AccountWideTransmogData);
      }
      if (other.accountWideCosmeticItemData_ != null) {
        if (accountWideCosmeticItemData_ == null) {
          accountWideCosmeticItemData_ = new global::D3.CosmeticItems.CosmeticItemSavedData();
        }
        AccountWideCosmeticItemData.MergeFrom(other.AccountWideCosmeticItemData);
      }
      if (other.accountWideCurrencyData_ != null) {
        if (accountWideCurrencyData_ == null) {
          accountWideCurrencyData_ = new global::D3.Items.CurrencySavedData();
        }
        AccountWideCurrencyData.MergeFrom(other.AccountWideCurrencyData);
      }
      if (other.deliveredRewards_ != null) {
        if (deliveredRewards_ == null) {
          deliveredRewards_ = new global::D3.Account.DeliveredRewards();
        }
        DeliveredRewards.MergeFrom(other.DeliveredRewards);
      }
      if (other.consumables_ != null) {
        if (consumables_ == null) {
          consumables_ = new global::D3.Account.Consumables();
        }
        Consumables.MergeFrom(other.Consumables);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (digest_ == null) {
              digest_ = new global::D3.Account.Digest();
            }
            input.ReadMessage(digest_);
            break;
          }
          case 26: {
            if (savedAttributes_ == null) {
              savedAttributes_ = new global::D3.AttributeSerializer.SavedAttributes();
            }
            input.ReadMessage(savedAttributes_);
            break;
          }
          case 34: {
            if (deprecatedSavedAttributesHardcore_ == null) {
              deprecatedSavedAttributesHardcore_ = new global::D3.AttributeSerializer.SavedAttributes();
            }
            input.ReadMessage(deprecatedSavedAttributesHardcore_);
            break;
          }
          case 42: {
            if (deprecatedNormalSharedSavedItems_ == null) {
              deprecatedNormalSharedSavedItems_ = new global::D3.Items.ItemList();
            }
            input.ReadMessage(deprecatedNormalSharedSavedItems_);
            break;
          }
          case 50: {
            if (deprecatedHardcoreSharedSavedItems_ == null) {
              deprecatedHardcoreSharedSavedItems_ = new global::D3.Items.ItemList();
            }
            input.ReadMessage(deprecatedHardcoreSharedSavedItems_);
            break;
          }
          case 58: {
            if (deprecatedCrafterNormalData_ == null) {
              deprecatedCrafterNormalData_ = new global::D3.ItemCrafting.CrafterSavedData();
            }
            input.ReadMessage(deprecatedCrafterNormalData_);
            break;
          }
          case 66: {
            if (deprecatedCrafterHardcoreData_ == null) {
              deprecatedCrafterHardcoreData_ = new global::D3.ItemCrafting.CrafterSavedData();
            }
            input.ReadMessage(deprecatedCrafterHardcoreData_);
            break;
          }
          case 74: {
            SeenTutorials = input.ReadBytes();
            break;
          }
          case 81: {
            NumVoteKicksParticipatedIn = input.ReadSFixed64();
            break;
          }
          case 89: {
            NumVoteKicksInitiated = input.ReadSFixed64();
            break;
          }
          case 97: {
            NumPublicGamesNoKick = input.ReadSFixed64();
            break;
          }
          case 105: {
            TimesVoteKicked = input.ReadSFixed64();
            break;
          }
          case 114: {
            if (deprecatedGoldIdNormal_ == null) {
              deprecatedGoldIdNormal_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(deprecatedGoldIdNormal_);
            break;
          }
          case 122: {
            if (deprecatedGoldIdHardcore_ == null) {
              deprecatedGoldIdHardcore_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(deprecatedGoldIdHardcore_);
            break;
          }
          case 130: {
            DeprecatedStashIconsNormal = input.ReadBytes();
            break;
          }
          case 136: {
            DeprecatedAcceptedLicenseBits = input.ReadUInt64();
            break;
          }
          case 146: {
            DeprecatedStashIconsHardcore = input.ReadBytes();
            break;
          }
          case 152: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 162: {
            partitions_.AddEntriesFrom(input, _repeated_partitions_codec);
            break;
          }
          case 170: {
            if (consoleData_ == null) {
              consoleData_ = new global::D3.Account.ConsoleData();
            }
            input.ReadMessage(consoleData_);
            break;
          }
          case 176: {
            NumGroupsCreatedDeprecated = input.ReadUInt32();
            break;
          }
          case 186: {
            if (accountWideTransmogData_ == null) {
              accountWideTransmogData_ = new global::D3.GameBalance.BitPackedGbidArray();
            }
            input.ReadMessage(accountWideTransmogData_);
            break;
          }
          case 194: {
            if (accountWideCosmeticItemData_ == null) {
              accountWideCosmeticItemData_ = new global::D3.CosmeticItems.CosmeticItemSavedData();
            }
            input.ReadMessage(accountWideCosmeticItemData_);
            break;
          }
          case 210: {
            if (accountWideCurrencyData_ == null) {
              accountWideCurrencyData_ = new global::D3.Items.CurrencySavedData();
            }
            input.ReadMessage(accountWideCurrencyData_);
            break;
          }
          case 218: {
            if (deliveredRewards_ == null) {
              deliveredRewards_ = new global::D3.Account.DeliveredRewards();
            }
            input.ReadMessage(deliveredRewards_);
            break;
          }
          case 226: {
            if (consumables_ == null) {
              consumables_ = new global::D3.Account.Consumables();
            }
            input.ReadMessage(consumables_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AvengerVictim : pb::IMessage<AvengerVictim> {
    private static readonly pb::MessageParser<AvengerVictim> _parser = new pb::MessageParser<AvengerVictim>(() => new AvengerVictim());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvengerVictim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvengerVictim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvengerVictim(AvengerVictim other) : this() {
      gbidClass_ = other.gbidClass_;
      isFemale_ = other.isFemale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvengerVictim Clone() {
      return new AvengerVictim(this);
    }

    /// <summary>Field number for the "gbid_class" field.</summary>
    public const int GbidClassFieldNumber = 1;
    private uint gbidClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GbidClass {
      get { return gbidClass_; }
      set {
        gbidClass_ = value;
      }
    }

    /// <summary>Field number for the "is_female" field.</summary>
    public const int IsFemaleFieldNumber = 2;
    private bool isFemale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFemale {
      get { return isFemale_; }
      set {
        isFemale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvengerVictim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvengerVictim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GbidClass != other.GbidClass) return false;
      if (IsFemale != other.IsFemale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GbidClass != 0) hash ^= GbidClass.GetHashCode();
      if (IsFemale != false) hash ^= IsFemale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GbidClass != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GbidClass);
      }
      if (IsFemale != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFemale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GbidClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GbidClass);
      }
      if (IsFemale != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvengerVictim other) {
      if (other == null) {
        return;
      }
      if (other.GbidClass != 0) {
        GbidClass = other.GbidClass;
      }
      if (other.IsFemale != false) {
        IsFemale = other.IsFemale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GbidClass = input.ReadUInt32();
            break;
          }
          case 16: {
            IsFemale = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Avenger : pb::IMessage<Avenger> {
    private static readonly pb::MessageParser<Avenger> _parser = new pb::MessageParser<Avenger>(() => new Avenger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Avenger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avenger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avenger(Avenger other) : this() {
      deprecatedPlayerKills_ = other.deprecatedPlayerKills_;
      avengerName_ = other.avengerName_;
      deprecatedMonsterSno_ = other.deprecatedMonsterSno_;
      deprecatedResolved_ = other.deprecatedResolved_;
      deprecatedResult_ = other.deprecatedResult_;
      sentFrom_ = other.sentFrom_;
      affixBucket_ = other.affixBucket_;
      victims_ = other.victims_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avenger Clone() {
      return new Avenger(this);
    }

    /// <summary>Field number for the "deprecated_player_kills" field.</summary>
    public const int DeprecatedPlayerKillsFieldNumber = 1;
    private uint deprecatedPlayerKills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedPlayerKills {
      get { return deprecatedPlayerKills_; }
      set {
        deprecatedPlayerKills_ = value;
      }
    }

    /// <summary>Field number for the "avenger_name" field.</summary>
    public const int AvengerNameFieldNumber = 2;
    private string avengerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvengerName {
      get { return avengerName_; }
      set {
        avengerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecated_monster_sno" field.</summary>
    public const int DeprecatedMonsterSnoFieldNumber = 3;
    private int deprecatedMonsterSno_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedMonsterSno {
      get { return deprecatedMonsterSno_; }
      set {
        deprecatedMonsterSno_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_resolved" field.</summary>
    public const int DeprecatedResolvedFieldNumber = 4;
    private bool deprecatedResolved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeprecatedResolved {
      get { return deprecatedResolved_; }
      set {
        deprecatedResolved_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_result" field.</summary>
    public const int DeprecatedResultFieldNumber = 5;
    private global::D3.Account.Avenger.Types.State deprecatedResult_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.Avenger.Types.State DeprecatedResult {
      get { return deprecatedResult_; }
      set {
        deprecatedResult_ = value;
      }
    }

    /// <summary>Field number for the "sent_from" field.</summary>
    public const int SentFromFieldNumber = 6;
    private ulong sentFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SentFrom {
      get { return sentFrom_; }
      set {
        sentFrom_ = value;
      }
    }

    /// <summary>Field number for the "affix_bucket" field.</summary>
    public const int AffixBucketFieldNumber = 7;
    private int affixBucket_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AffixBucket {
      get { return affixBucket_; }
      set {
        affixBucket_ = value;
      }
    }

    /// <summary>Field number for the "victims" field.</summary>
    public const int VictimsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::D3.Account.AvengerVictim> _repeated_victims_codec
        = pb::FieldCodec.ForMessage(66, global::D3.Account.AvengerVictim.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.AvengerVictim> victims_ = new pbc::RepeatedField<global::D3.Account.AvengerVictim>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.AvengerVictim> Victims {
      get { return victims_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Avenger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Avenger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeprecatedPlayerKills != other.DeprecatedPlayerKills) return false;
      if (AvengerName != other.AvengerName) return false;
      if (DeprecatedMonsterSno != other.DeprecatedMonsterSno) return false;
      if (DeprecatedResolved != other.DeprecatedResolved) return false;
      if (DeprecatedResult != other.DeprecatedResult) return false;
      if (SentFrom != other.SentFrom) return false;
      if (AffixBucket != other.AffixBucket) return false;
      if(!victims_.Equals(other.victims_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeprecatedPlayerKills != 0) hash ^= DeprecatedPlayerKills.GetHashCode();
      if (AvengerName.Length != 0) hash ^= AvengerName.GetHashCode();
      if (DeprecatedMonsterSno != 0) hash ^= DeprecatedMonsterSno.GetHashCode();
      if (DeprecatedResolved != false) hash ^= DeprecatedResolved.GetHashCode();
      if (DeprecatedResult != 0) hash ^= DeprecatedResult.GetHashCode();
      if (SentFrom != 0UL) hash ^= SentFrom.GetHashCode();
      if (AffixBucket != 0) hash ^= AffixBucket.GetHashCode();
      hash ^= victims_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeprecatedPlayerKills != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DeprecatedPlayerKills);
      }
      if (AvengerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AvengerName);
      }
      if (DeprecatedMonsterSno != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(DeprecatedMonsterSno);
      }
      if (DeprecatedResolved != false) {
        output.WriteRawTag(32);
        output.WriteBool(DeprecatedResolved);
      }
      if (DeprecatedResult != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DeprecatedResult);
      }
      if (SentFrom != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SentFrom);
      }
      if (AffixBucket != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AffixBucket);
      }
      victims_.WriteTo(output, _repeated_victims_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeprecatedPlayerKills != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedPlayerKills);
      }
      if (AvengerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvengerName);
      }
      if (DeprecatedMonsterSno != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DeprecatedMonsterSno);
      }
      if (DeprecatedResolved != false) {
        size += 1 + 1;
      }
      if (DeprecatedResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeprecatedResult);
      }
      if (SentFrom != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SentFrom);
      }
      if (AffixBucket != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AffixBucket);
      }
      size += victims_.CalculateSize(_repeated_victims_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Avenger other) {
      if (other == null) {
        return;
      }
      if (other.DeprecatedPlayerKills != 0) {
        DeprecatedPlayerKills = other.DeprecatedPlayerKills;
      }
      if (other.AvengerName.Length != 0) {
        AvengerName = other.AvengerName;
      }
      if (other.DeprecatedMonsterSno != 0) {
        DeprecatedMonsterSno = other.DeprecatedMonsterSno;
      }
      if (other.DeprecatedResolved != false) {
        DeprecatedResolved = other.DeprecatedResolved;
      }
      if (other.DeprecatedResult != 0) {
        DeprecatedResult = other.DeprecatedResult;
      }
      if (other.SentFrom != 0UL) {
        SentFrom = other.SentFrom;
      }
      if (other.AffixBucket != 0) {
        AffixBucket = other.AffixBucket;
      }
      victims_.Add(other.victims_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeprecatedPlayerKills = input.ReadUInt32();
            break;
          }
          case 18: {
            AvengerName = input.ReadString();
            break;
          }
          case 24: {
            DeprecatedMonsterSno = input.ReadSInt32();
            break;
          }
          case 32: {
            DeprecatedResolved = input.ReadBool();
            break;
          }
          case 40: {
            deprecatedResult_ = (global::D3.Account.Avenger.Types.State) input.ReadEnum();
            break;
          }
          case 48: {
            SentFrom = input.ReadUInt64();
            break;
          }
          case 56: {
            AffixBucket = input.ReadInt32();
            break;
          }
          case 66: {
            victims_.AddEntriesFrom(input, _repeated_victims_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Avenger message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("ALIVE")] Alive = 0,
        [pbr::OriginalName("KILLED_PLAYER")] KilledPlayer = 1,
        [pbr::OriginalName("KILLED")] Killed = 2,
      }

    }
    #endregion

  }

  public sealed partial class AvengerData : pb::IMessage<AvengerData> {
    private static readonly pb::MessageParser<AvengerData> _parser = new pb::MessageParser<AvengerData>(() => new AvengerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvengerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvengerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvengerData(AvengerData other) : this() {
      deprecatedAvengerHardcore_ = other.deprecatedAvengerHardcore_ != null ? other.deprecatedAvengerHardcore_.Clone() : null;
      avengerSolo_ = other.avengerSolo_ != null ? other.avengerSolo_.Clone() : null;
      avengerFriends_ = other.avengerFriends_ != null ? other.avengerFriends_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvengerData Clone() {
      return new AvengerData(this);
    }

    /// <summary>Field number for the "deprecated_avenger_hardcore" field.</summary>
    public const int DeprecatedAvengerHardcoreFieldNumber = 1;
    private global::D3.Account.Avenger deprecatedAvengerHardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.Avenger DeprecatedAvengerHardcore {
      get { return deprecatedAvengerHardcore_; }
      set {
        deprecatedAvengerHardcore_ = value;
      }
    }

    /// <summary>Field number for the "avenger_solo" field.</summary>
    public const int AvengerSoloFieldNumber = 2;
    private global::D3.Account.Avenger avengerSolo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.Avenger AvengerSolo {
      get { return avengerSolo_; }
      set {
        avengerSolo_ = value;
      }
    }

    /// <summary>Field number for the "avenger_friends" field.</summary>
    public const int AvengerFriendsFieldNumber = 3;
    private global::D3.Account.Avenger avengerFriends_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.Avenger AvengerFriends {
      get { return avengerFriends_; }
      set {
        avengerFriends_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvengerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvengerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DeprecatedAvengerHardcore, other.DeprecatedAvengerHardcore)) return false;
      if (!object.Equals(AvengerSolo, other.AvengerSolo)) return false;
      if (!object.Equals(AvengerFriends, other.AvengerFriends)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (deprecatedAvengerHardcore_ != null) hash ^= DeprecatedAvengerHardcore.GetHashCode();
      if (avengerSolo_ != null) hash ^= AvengerSolo.GetHashCode();
      if (avengerFriends_ != null) hash ^= AvengerFriends.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (deprecatedAvengerHardcore_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DeprecatedAvengerHardcore);
      }
      if (avengerSolo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AvengerSolo);
      }
      if (avengerFriends_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AvengerFriends);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (deprecatedAvengerHardcore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeprecatedAvengerHardcore);
      }
      if (avengerSolo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvengerSolo);
      }
      if (avengerFriends_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvengerFriends);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvengerData other) {
      if (other == null) {
        return;
      }
      if (other.deprecatedAvengerHardcore_ != null) {
        if (deprecatedAvengerHardcore_ == null) {
          deprecatedAvengerHardcore_ = new global::D3.Account.Avenger();
        }
        DeprecatedAvengerHardcore.MergeFrom(other.DeprecatedAvengerHardcore);
      }
      if (other.avengerSolo_ != null) {
        if (avengerSolo_ == null) {
          avengerSolo_ = new global::D3.Account.Avenger();
        }
        AvengerSolo.MergeFrom(other.AvengerSolo);
      }
      if (other.avengerFriends_ != null) {
        if (avengerFriends_ == null) {
          avengerFriends_ = new global::D3.Account.Avenger();
        }
        AvengerFriends.MergeFrom(other.AvengerFriends);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (deprecatedAvengerHardcore_ == null) {
              deprecatedAvengerHardcore_ = new global::D3.Account.Avenger();
            }
            input.ReadMessage(deprecatedAvengerHardcore_);
            break;
          }
          case 18: {
            if (avengerSolo_ == null) {
              avengerSolo_ = new global::D3.Account.Avenger();
            }
            input.ReadMessage(avengerSolo_);
            break;
          }
          case 26: {
            if (avengerFriends_ == null) {
              avengerFriends_ = new global::D3.Account.Avenger();
            }
            input.ReadMessage(avengerFriends_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsoleChallengeRiftReward : pb::IMessage<ConsoleChallengeRiftReward> {
    private static readonly pb::MessageParser<ConsoleChallengeRiftReward> _parser = new pb::MessageParser<ConsoleChallengeRiftReward>(() => new ConsoleChallengeRiftReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleChallengeRiftReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleChallengeRiftReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleChallengeRiftReward(ConsoleChallengeRiftReward other) : this() {
      items_ = other.items_.Clone();
      challengeRift_ = other.challengeRift_;
      createTime_ = other.createTime_;
      seasonEarned_ = other.seasonEarned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleChallengeRiftReward Clone() {
      return new ConsoleChallengeRiftReward(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Items.SavedItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Items.SavedItem.Parser);
    private readonly pbc::RepeatedField<global::D3.Items.SavedItem> items_ = new pbc::RepeatedField<global::D3.Items.SavedItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Items.SavedItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "challenge_rift" field.</summary>
    public const int ChallengeRiftFieldNumber = 2;
    private uint challengeRift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeRift {
      get { return challengeRift_; }
      set {
        challengeRift_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 3;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "season_earned" field.</summary>
    public const int SeasonEarnedFieldNumber = 4;
    private uint seasonEarned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonEarned {
      get { return seasonEarned_; }
      set {
        seasonEarned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleChallengeRiftReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleChallengeRiftReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (ChallengeRift != other.ChallengeRift) return false;
      if (CreateTime != other.CreateTime) return false;
      if (SeasonEarned != other.SeasonEarned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (ChallengeRift != 0) hash ^= ChallengeRift.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (SeasonEarned != 0) hash ^= SeasonEarned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (ChallengeRift != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ChallengeRift);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CreateTime);
      }
      if (SeasonEarned != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SeasonEarned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (ChallengeRift != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeRift);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (SeasonEarned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeasonEarned);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleChallengeRiftReward other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.ChallengeRift != 0) {
        ChallengeRift = other.ChallengeRift;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.SeasonEarned != 0) {
        SeasonEarned = other.SeasonEarned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            ChallengeRift = input.ReadUInt32();
            break;
          }
          case 24: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 32: {
            SeasonEarned = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsoleChallengeRiftPersonalBest : pb::IMessage<ConsoleChallengeRiftPersonalBest> {
    private static readonly pb::MessageParser<ConsoleChallengeRiftPersonalBest> _parser = new pb::MessageParser<ConsoleChallengeRiftPersonalBest>(() => new ConsoleChallengeRiftPersonalBest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleChallengeRiftPersonalBest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleChallengeRiftPersonalBest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleChallengeRiftPersonalBest(ConsoleChallengeRiftPersonalBest other) : this() {
      id_ = other.id_;
      score_ = other.score_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleChallengeRiftPersonalBest Clone() {
      return new ConsoleChallengeRiftPersonalBest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private ulong score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleChallengeRiftPersonalBest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleChallengeRiftPersonalBest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Score != other.Score) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Score != 0UL) hash ^= Score.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Score != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Score);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Score != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleChallengeRiftPersonalBest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Score != 0UL) {
        Score = other.Score;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            Score = input.ReadUInt64();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsoleData : pb::IMessage<ConsoleData> {
    private static readonly pb::MessageParser<ConsoleData> _parser = new pb::MessageParser<ConsoleData>(() => new ConsoleData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleData(ConsoleData other) : this() {
      version_ = other.version_;
      achievementSnapshot_ = other.achievementSnapshot_ != null ? other.achievementSnapshot_.Clone() : null;
      highestCompletedDifficultyDeprecated_ = other.highestCompletedDifficultyDeprecated_;
      hasDemoSave_ = other.hasDemoSave_;
      avengerData_ = other.avengerData_ != null ? other.avengerData_.Clone() : null;
      progress_ = other.progress_;
      hasBnetAccount_ = other.hasBnetAccount_;
      legacyLicenseBits_ = other.legacyLicenseBits_;
      leaderboardHealAchievements_ = other.leaderboardHealAchievements_;
      leaderboardHealConquests_ = other.leaderboardHealConquests_.Clone();
      challengeRiftReward_ = other.challengeRiftReward_.Clone();
      challengeRiftPersonalBestRiftNumber_ = other.challengeRiftPersonalBestRiftNumber_;
      challengeRiftPersonalBest_ = other.challengeRiftPersonalBest_.Clone();
      consoleCubeBaseSeed_ = other.consoleCubeBaseSeed_;
      nfpDefaultTime_ = other.nfpDefaultTime_;
      nfpGoblinTime_ = other.nfpGoblinTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleData Clone() {
      return new ConsoleData(this);
    }

    /// <summary>Field number for the "version_" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "achievement_snapshot" field.</summary>
    public const int AchievementSnapshotFieldNumber = 2;
    private global::D3.Achievements.Snapshot achievementSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Achievements.Snapshot AchievementSnapshot {
      get { return achievementSnapshot_; }
      set {
        achievementSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "highest_completed_difficulty_deprecated" field.</summary>
    public const int HighestCompletedDifficultyDeprecatedFieldNumber = 3;
    private int highestCompletedDifficultyDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestCompletedDifficultyDeprecated {
      get { return highestCompletedDifficultyDeprecated_; }
      set {
        highestCompletedDifficultyDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "has_demo_save" field.</summary>
    public const int HasDemoSaveFieldNumber = 4;
    private bool hasDemoSave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDemoSave {
      get { return hasDemoSave_; }
      set {
        hasDemoSave_ = value;
      }
    }

    /// <summary>Field number for the "avenger_data" field.</summary>
    public const int AvengerDataFieldNumber = 5;
    private global::D3.Account.AvengerData avengerData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Account.AvengerData AvengerData {
      get { return avengerData_; }
      set {
        avengerData_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 6;
    private float progress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    /// <summary>Field number for the "has_bnet_account" field.</summary>
    public const int HasBnetAccountFieldNumber = 7;
    private bool hasBnetAccount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBnetAccount {
      get { return hasBnetAccount_; }
      set {
        hasBnetAccount_ = value;
      }
    }

    /// <summary>Field number for the "legacy_license_bits" field.</summary>
    public const int LegacyLicenseBitsFieldNumber = 8;
    private uint legacyLicenseBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LegacyLicenseBits {
      get { return legacyLicenseBits_; }
      set {
        legacyLicenseBits_ = value;
      }
    }

    /// <summary>Field number for the "leaderboard_heal_achievements" field.</summary>
    public const int LeaderboardHealAchievementsFieldNumber = 9;
    private uint leaderboardHealAchievements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderboardHealAchievements {
      get { return leaderboardHealAchievements_; }
      set {
        leaderboardHealAchievements_ = value;
      }
    }

    /// <summary>Field number for the "leaderboard_heal_conquests" field.</summary>
    public const int LeaderboardHealConquestsFieldNumber = 10;
    private static readonly pb::FieldCodec<ulong> _repeated_leaderboardHealConquests_codec
        = pb::FieldCodec.ForUInt64(82);
    private readonly pbc::RepeatedField<ulong> leaderboardHealConquests_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> LeaderboardHealConquests {
      get { return leaderboardHealConquests_; }
    }

    /// <summary>Field number for the "challenge_rift_reward" field.</summary>
    public const int ChallengeRiftRewardFieldNumber = 11;
    private static readonly pb::FieldCodec<global::D3.Account.ConsoleChallengeRiftReward> _repeated_challengeRiftReward_codec
        = pb::FieldCodec.ForMessage(90, global::D3.Account.ConsoleChallengeRiftReward.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.ConsoleChallengeRiftReward> challengeRiftReward_ = new pbc::RepeatedField<global::D3.Account.ConsoleChallengeRiftReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.ConsoleChallengeRiftReward> ChallengeRiftReward {
      get { return challengeRiftReward_; }
    }

    /// <summary>Field number for the "challenge_rift_personal_best_rift_number" field.</summary>
    public const int ChallengeRiftPersonalBestRiftNumberFieldNumber = 12;
    private uint challengeRiftPersonalBestRiftNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChallengeRiftPersonalBestRiftNumber {
      get { return challengeRiftPersonalBestRiftNumber_; }
      set {
        challengeRiftPersonalBestRiftNumber_ = value;
      }
    }

    /// <summary>Field number for the "challenge_rift_personal_best" field.</summary>
    public const int ChallengeRiftPersonalBestFieldNumber = 13;
    private static readonly pb::FieldCodec<global::D3.Account.ConsoleChallengeRiftPersonalBest> _repeated_challengeRiftPersonalBest_codec
        = pb::FieldCodec.ForMessage(106, global::D3.Account.ConsoleChallengeRiftPersonalBest.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.ConsoleChallengeRiftPersonalBest> challengeRiftPersonalBest_ = new pbc::RepeatedField<global::D3.Account.ConsoleChallengeRiftPersonalBest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.ConsoleChallengeRiftPersonalBest> ChallengeRiftPersonalBest {
      get { return challengeRiftPersonalBest_; }
    }

    /// <summary>Field number for the "console_cube_base_seed" field.</summary>
    public const int ConsoleCubeBaseSeedFieldNumber = 14;
    private uint consoleCubeBaseSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConsoleCubeBaseSeed {
      get { return consoleCubeBaseSeed_; }
      set {
        consoleCubeBaseSeed_ = value;
      }
    }

    /// <summary>Field number for the "nfp_default_time" field.</summary>
    public const int NfpDefaultTimeFieldNumber = 15;
    private int nfpDefaultTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NfpDefaultTime {
      get { return nfpDefaultTime_; }
      set {
        nfpDefaultTime_ = value;
      }
    }

    /// <summary>Field number for the "nfp_goblin_time" field.</summary>
    public const int NfpGoblinTimeFieldNumber = 16;
    private int nfpGoblinTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NfpGoblinTime {
      get { return nfpGoblinTime_; }
      set {
        nfpGoblinTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(AchievementSnapshot, other.AchievementSnapshot)) return false;
      if (HighestCompletedDifficultyDeprecated != other.HighestCompletedDifficultyDeprecated) return false;
      if (HasDemoSave != other.HasDemoSave) return false;
      if (!object.Equals(AvengerData, other.AvengerData)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Progress, other.Progress)) return false;
      if (HasBnetAccount != other.HasBnetAccount) return false;
      if (LegacyLicenseBits != other.LegacyLicenseBits) return false;
      if (LeaderboardHealAchievements != other.LeaderboardHealAchievements) return false;
      if(!leaderboardHealConquests_.Equals(other.leaderboardHealConquests_)) return false;
      if(!challengeRiftReward_.Equals(other.challengeRiftReward_)) return false;
      if (ChallengeRiftPersonalBestRiftNumber != other.ChallengeRiftPersonalBestRiftNumber) return false;
      if(!challengeRiftPersonalBest_.Equals(other.challengeRiftPersonalBest_)) return false;
      if (ConsoleCubeBaseSeed != other.ConsoleCubeBaseSeed) return false;
      if (NfpDefaultTime != other.NfpDefaultTime) return false;
      if (NfpGoblinTime != other.NfpGoblinTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (achievementSnapshot_ != null) hash ^= AchievementSnapshot.GetHashCode();
      if (HighestCompletedDifficultyDeprecated != 0) hash ^= HighestCompletedDifficultyDeprecated.GetHashCode();
      if (HasDemoSave != false) hash ^= HasDemoSave.GetHashCode();
      if (avengerData_ != null) hash ^= AvengerData.GetHashCode();
      if (Progress != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Progress);
      if (HasBnetAccount != false) hash ^= HasBnetAccount.GetHashCode();
      if (LegacyLicenseBits != 0) hash ^= LegacyLicenseBits.GetHashCode();
      if (LeaderboardHealAchievements != 0) hash ^= LeaderboardHealAchievements.GetHashCode();
      hash ^= leaderboardHealConquests_.GetHashCode();
      hash ^= challengeRiftReward_.GetHashCode();
      if (ChallengeRiftPersonalBestRiftNumber != 0) hash ^= ChallengeRiftPersonalBestRiftNumber.GetHashCode();
      hash ^= challengeRiftPersonalBest_.GetHashCode();
      if (ConsoleCubeBaseSeed != 0) hash ^= ConsoleCubeBaseSeed.GetHashCode();
      if (NfpDefaultTime != 0) hash ^= NfpDefaultTime.GetHashCode();
      if (NfpGoblinTime != 0) hash ^= NfpGoblinTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (achievementSnapshot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AchievementSnapshot);
      }
      if (HighestCompletedDifficultyDeprecated != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(HighestCompletedDifficultyDeprecated);
      }
      if (HasDemoSave != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasDemoSave);
      }
      if (avengerData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AvengerData);
      }
      if (Progress != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Progress);
      }
      if (HasBnetAccount != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasBnetAccount);
      }
      if (LegacyLicenseBits != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LegacyLicenseBits);
      }
      if (LeaderboardHealAchievements != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LeaderboardHealAchievements);
      }
      leaderboardHealConquests_.WriteTo(output, _repeated_leaderboardHealConquests_codec);
      challengeRiftReward_.WriteTo(output, _repeated_challengeRiftReward_codec);
      if (ChallengeRiftPersonalBestRiftNumber != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(ChallengeRiftPersonalBestRiftNumber);
      }
      challengeRiftPersonalBest_.WriteTo(output, _repeated_challengeRiftPersonalBest_codec);
      if (ConsoleCubeBaseSeed != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(ConsoleCubeBaseSeed);
      }
      if (NfpDefaultTime != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NfpDefaultTime);
      }
      if (NfpGoblinTime != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(NfpGoblinTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (achievementSnapshot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AchievementSnapshot);
      }
      if (HighestCompletedDifficultyDeprecated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HighestCompletedDifficultyDeprecated);
      }
      if (HasDemoSave != false) {
        size += 1 + 1;
      }
      if (avengerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvengerData);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      if (HasBnetAccount != false) {
        size += 1 + 1;
      }
      if (LegacyLicenseBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LegacyLicenseBits);
      }
      if (LeaderboardHealAchievements != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderboardHealAchievements);
      }
      size += leaderboardHealConquests_.CalculateSize(_repeated_leaderboardHealConquests_codec);
      size += challengeRiftReward_.CalculateSize(_repeated_challengeRiftReward_codec);
      if (ChallengeRiftPersonalBestRiftNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChallengeRiftPersonalBestRiftNumber);
      }
      size += challengeRiftPersonalBest_.CalculateSize(_repeated_challengeRiftPersonalBest_codec);
      if (ConsoleCubeBaseSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConsoleCubeBaseSeed);
      }
      if (NfpDefaultTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NfpDefaultTime);
      }
      if (NfpGoblinTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NfpGoblinTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleData other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.achievementSnapshot_ != null) {
        if (achievementSnapshot_ == null) {
          achievementSnapshot_ = new global::D3.Achievements.Snapshot();
        }
        AchievementSnapshot.MergeFrom(other.AchievementSnapshot);
      }
      if (other.HighestCompletedDifficultyDeprecated != 0) {
        HighestCompletedDifficultyDeprecated = other.HighestCompletedDifficultyDeprecated;
      }
      if (other.HasDemoSave != false) {
        HasDemoSave = other.HasDemoSave;
      }
      if (other.avengerData_ != null) {
        if (avengerData_ == null) {
          avengerData_ = new global::D3.Account.AvengerData();
        }
        AvengerData.MergeFrom(other.AvengerData);
      }
      if (other.Progress != 0F) {
        Progress = other.Progress;
      }
      if (other.HasBnetAccount != false) {
        HasBnetAccount = other.HasBnetAccount;
      }
      if (other.LegacyLicenseBits != 0) {
        LegacyLicenseBits = other.LegacyLicenseBits;
      }
      if (other.LeaderboardHealAchievements != 0) {
        LeaderboardHealAchievements = other.LeaderboardHealAchievements;
      }
      leaderboardHealConquests_.Add(other.leaderboardHealConquests_);
      challengeRiftReward_.Add(other.challengeRiftReward_);
      if (other.ChallengeRiftPersonalBestRiftNumber != 0) {
        ChallengeRiftPersonalBestRiftNumber = other.ChallengeRiftPersonalBestRiftNumber;
      }
      challengeRiftPersonalBest_.Add(other.challengeRiftPersonalBest_);
      if (other.ConsoleCubeBaseSeed != 0) {
        ConsoleCubeBaseSeed = other.ConsoleCubeBaseSeed;
      }
      if (other.NfpDefaultTime != 0) {
        NfpDefaultTime = other.NfpDefaultTime;
      }
      if (other.NfpGoblinTime != 0) {
        NfpGoblinTime = other.NfpGoblinTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (achievementSnapshot_ == null) {
              achievementSnapshot_ = new global::D3.Achievements.Snapshot();
            }
            input.ReadMessage(achievementSnapshot_);
            break;
          }
          case 24: {
            HighestCompletedDifficultyDeprecated = input.ReadSInt32();
            break;
          }
          case 32: {
            HasDemoSave = input.ReadBool();
            break;
          }
          case 42: {
            if (avengerData_ == null) {
              avengerData_ = new global::D3.Account.AvengerData();
            }
            input.ReadMessage(avengerData_);
            break;
          }
          case 53: {
            Progress = input.ReadFloat();
            break;
          }
          case 56: {
            HasBnetAccount = input.ReadBool();
            break;
          }
          case 64: {
            LegacyLicenseBits = input.ReadUInt32();
            break;
          }
          case 72: {
            LeaderboardHealAchievements = input.ReadUInt32();
            break;
          }
          case 82:
          case 80: {
            leaderboardHealConquests_.AddEntriesFrom(input, _repeated_leaderboardHealConquests_codec);
            break;
          }
          case 90: {
            challengeRiftReward_.AddEntriesFrom(input, _repeated_challengeRiftReward_codec);
            break;
          }
          case 96: {
            ChallengeRiftPersonalBestRiftNumber = input.ReadUInt32();
            break;
          }
          case 106: {
            challengeRiftPersonalBest_.AddEntriesFrom(input, _repeated_challengeRiftPersonalBest_codec);
            break;
          }
          case 112: {
            ConsoleCubeBaseSeed = input.ReadUInt32();
            break;
          }
          case 120: {
            NfpDefaultTime = input.ReadInt32();
            break;
          }
          case 128: {
            NfpGoblinTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeliveredAchievementReward : pb::IMessage<DeliveredAchievementReward> {
    private static readonly pb::MessageParser<DeliveredAchievementReward> _parser = new pb::MessageParser<DeliveredAchievementReward>(() => new DeliveredAchievementReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeliveredAchievementReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliveredAchievementReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliveredAchievementReward(DeliveredAchievementReward other) : this() {
      achievementId_ = other.achievementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliveredAchievementReward Clone() {
      return new DeliveredAchievementReward(this);
    }

    /// <summary>Field number for the "achievement_id" field.</summary>
    public const int AchievementIdFieldNumber = 1;
    private ulong achievementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AchievementId {
      get { return achievementId_; }
      set {
        achievementId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeliveredAchievementReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeliveredAchievementReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AchievementId != other.AchievementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AchievementId != 0UL) hash ^= AchievementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AchievementId != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(AchievementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AchievementId != 0UL) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeliveredAchievementReward other) {
      if (other == null) {
        return;
      }
      if (other.AchievementId != 0UL) {
        AchievementId = other.AchievementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            AchievementId = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeliveredRewards : pb::IMessage<DeliveredRewards> {
    private static readonly pb::MessageParser<DeliveredRewards> _parser = new pb::MessageParser<DeliveredRewards>(() => new DeliveredRewards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeliveredRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliveredRewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliveredRewards(DeliveredRewards other) : this() {
      achievementReward_ = other.achievementReward_.Clone();
      entitledRewardLicenseBits_ = other.entitledRewardLicenseBits_;
      outstandingRewardLicenseBits_ = other.outstandingRewardLicenseBits_;
      legacyAchievementsToDeliver_ = other.legacyAchievementsToDeliver_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeliveredRewards Clone() {
      return new DeliveredRewards(this);
    }

    /// <summary>Field number for the "achievement_reward" field.</summary>
    public const int AchievementRewardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Account.DeliveredAchievementReward> _repeated_achievementReward_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Account.DeliveredAchievementReward.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.DeliveredAchievementReward> achievementReward_ = new pbc::RepeatedField<global::D3.Account.DeliveredAchievementReward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.DeliveredAchievementReward> AchievementReward {
      get { return achievementReward_; }
    }

    /// <summary>Field number for the "entitled_reward_license_bits" field.</summary>
    public const int EntitledRewardLicenseBitsFieldNumber = 2;
    private uint entitledRewardLicenseBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EntitledRewardLicenseBits {
      get { return entitledRewardLicenseBits_; }
      set {
        entitledRewardLicenseBits_ = value;
      }
    }

    /// <summary>Field number for the "outstanding_reward_license_bits" field.</summary>
    public const int OutstandingRewardLicenseBitsFieldNumber = 3;
    private uint outstandingRewardLicenseBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutstandingRewardLicenseBits {
      get { return outstandingRewardLicenseBits_; }
      set {
        outstandingRewardLicenseBits_ = value;
      }
    }

    /// <summary>Field number for the "legacy_achievements_to_deliver" field.</summary>
    public const int LegacyAchievementsToDeliverFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_legacyAchievementsToDeliver_codec
        = pb::FieldCodec.ForFixed64(34);
    private readonly pbc::RepeatedField<ulong> legacyAchievementsToDeliver_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> LegacyAchievementsToDeliver {
      get { return legacyAchievementsToDeliver_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeliveredRewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeliveredRewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!achievementReward_.Equals(other.achievementReward_)) return false;
      if (EntitledRewardLicenseBits != other.EntitledRewardLicenseBits) return false;
      if (OutstandingRewardLicenseBits != other.OutstandingRewardLicenseBits) return false;
      if(!legacyAchievementsToDeliver_.Equals(other.legacyAchievementsToDeliver_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= achievementReward_.GetHashCode();
      if (EntitledRewardLicenseBits != 0) hash ^= EntitledRewardLicenseBits.GetHashCode();
      if (OutstandingRewardLicenseBits != 0) hash ^= OutstandingRewardLicenseBits.GetHashCode();
      hash ^= legacyAchievementsToDeliver_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      achievementReward_.WriteTo(output, _repeated_achievementReward_codec);
      if (EntitledRewardLicenseBits != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EntitledRewardLicenseBits);
      }
      if (OutstandingRewardLicenseBits != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutstandingRewardLicenseBits);
      }
      legacyAchievementsToDeliver_.WriteTo(output, _repeated_legacyAchievementsToDeliver_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += achievementReward_.CalculateSize(_repeated_achievementReward_codec);
      if (EntitledRewardLicenseBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EntitledRewardLicenseBits);
      }
      if (OutstandingRewardLicenseBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutstandingRewardLicenseBits);
      }
      size += legacyAchievementsToDeliver_.CalculateSize(_repeated_legacyAchievementsToDeliver_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeliveredRewards other) {
      if (other == null) {
        return;
      }
      achievementReward_.Add(other.achievementReward_);
      if (other.EntitledRewardLicenseBits != 0) {
        EntitledRewardLicenseBits = other.EntitledRewardLicenseBits;
      }
      if (other.OutstandingRewardLicenseBits != 0) {
        OutstandingRewardLicenseBits = other.OutstandingRewardLicenseBits;
      }
      legacyAchievementsToDeliver_.Add(other.legacyAchievementsToDeliver_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            achievementReward_.AddEntriesFrom(input, _repeated_achievementReward_codec);
            break;
          }
          case 16: {
            EntitledRewardLicenseBits = input.ReadUInt32();
            break;
          }
          case 24: {
            OutstandingRewardLicenseBits = input.ReadUInt32();
            break;
          }
          case 34:
          case 33: {
            legacyAchievementsToDeliver_.AddEntriesFrom(input, _repeated_legacyAchievementsToDeliver_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Consumable : pb::IMessage<Consumable> {
    private static readonly pb::MessageParser<Consumable> _parser = new pb::MessageParser<Consumable>(() => new Consumable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Consumable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Consumable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Consumable(Consumable other) : this() {
      licenseInstanceId_ = other.licenseInstanceId_;
      licenseId_ = other.licenseId_;
      transactionId_ = other.transactionId_;
      quantity_ = other.quantity_;
      consumeTime_ = other.consumeTime_;
      revokeTime_ = other.revokeTime_;
      type_ = other.type_;
      dataPersistFlags_ = other.dataPersistFlags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Consumable Clone() {
      return new Consumable(this);
    }

    /// <summary>Field number for the "license_instance_id" field.</summary>
    public const int LicenseInstanceIdFieldNumber = 1;
    private ulong licenseInstanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LicenseInstanceId {
      get { return licenseInstanceId_; }
      set {
        licenseInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "license_id" field.</summary>
    public const int LicenseIdFieldNumber = 2;
    private ulong licenseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LicenseId {
      get { return licenseId_; }
      set {
        licenseId_ = value;
      }
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 3;
    private ulong transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private long quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "consume_time" field.</summary>
    public const int ConsumeTimeFieldNumber = 5;
    private long consumeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConsumeTime {
      get { return consumeTime_; }
      set {
        consumeTime_ = value;
      }
    }

    /// <summary>Field number for the "revoke_time" field.</summary>
    public const int RevokeTimeFieldNumber = 6;
    private long revokeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RevokeTime {
      get { return revokeTime_; }
      set {
        revokeTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data_persist_flags" field.</summary>
    public const int DataPersistFlagsFieldNumber = 8;
    private uint dataPersistFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataPersistFlags {
      get { return dataPersistFlags_; }
      set {
        dataPersistFlags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Consumable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Consumable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LicenseInstanceId != other.LicenseInstanceId) return false;
      if (LicenseId != other.LicenseId) return false;
      if (TransactionId != other.TransactionId) return false;
      if (Quantity != other.Quantity) return false;
      if (ConsumeTime != other.ConsumeTime) return false;
      if (RevokeTime != other.RevokeTime) return false;
      if (Type != other.Type) return false;
      if (DataPersistFlags != other.DataPersistFlags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LicenseInstanceId != 0UL) hash ^= LicenseInstanceId.GetHashCode();
      if (LicenseId != 0UL) hash ^= LicenseId.GetHashCode();
      if (TransactionId != 0UL) hash ^= TransactionId.GetHashCode();
      if (Quantity != 0L) hash ^= Quantity.GetHashCode();
      if (ConsumeTime != 0L) hash ^= ConsumeTime.GetHashCode();
      if (RevokeTime != 0L) hash ^= RevokeTime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DataPersistFlags != 0) hash ^= DataPersistFlags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LicenseInstanceId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(LicenseInstanceId);
      }
      if (LicenseId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LicenseId);
      }
      if (TransactionId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TransactionId);
      }
      if (Quantity != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Quantity);
      }
      if (ConsumeTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ConsumeTime);
      }
      if (RevokeTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RevokeTime);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Type);
      }
      if (DataPersistFlags != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(DataPersistFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LicenseInstanceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LicenseInstanceId);
      }
      if (LicenseId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LicenseId);
      }
      if (TransactionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransactionId);
      }
      if (Quantity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Quantity);
      }
      if (ConsumeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConsumeTime);
      }
      if (RevokeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RevokeTime);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (DataPersistFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataPersistFlags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Consumable other) {
      if (other == null) {
        return;
      }
      if (other.LicenseInstanceId != 0UL) {
        LicenseInstanceId = other.LicenseInstanceId;
      }
      if (other.LicenseId != 0UL) {
        LicenseId = other.LicenseId;
      }
      if (other.TransactionId != 0UL) {
        TransactionId = other.TransactionId;
      }
      if (other.Quantity != 0L) {
        Quantity = other.Quantity;
      }
      if (other.ConsumeTime != 0L) {
        ConsumeTime = other.ConsumeTime;
      }
      if (other.RevokeTime != 0L) {
        RevokeTime = other.RevokeTime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DataPersistFlags != 0) {
        DataPersistFlags = other.DataPersistFlags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LicenseInstanceId = input.ReadUInt64();
            break;
          }
          case 16: {
            LicenseId = input.ReadUInt64();
            break;
          }
          case 24: {
            TransactionId = input.ReadUInt64();
            break;
          }
          case 32: {
            Quantity = input.ReadInt64();
            break;
          }
          case 40: {
            ConsumeTime = input.ReadInt64();
            break;
          }
          case 48: {
            RevokeTime = input.ReadInt64();
            break;
          }
          case 56: {
            Type = input.ReadInt32();
            break;
          }
          case 64: {
            DataPersistFlags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Consumables : pb::IMessage<Consumables> {
    private static readonly pb::MessageParser<Consumables> _parser = new pb::MessageParser<Consumables>(() => new Consumables());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Consumables> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Account.AccountReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Consumables() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Consumables(Consumables other) : this() {
      consumedLicenses_ = other.consumedLicenses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Consumables Clone() {
      return new Consumables(this);
    }

    /// <summary>Field number for the "consumed_licenses" field.</summary>
    public const int ConsumedLicensesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Account.Consumable> _repeated_consumedLicenses_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Account.Consumable.Parser);
    private readonly pbc::RepeatedField<global::D3.Account.Consumable> consumedLicenses_ = new pbc::RepeatedField<global::D3.Account.Consumable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Account.Consumable> ConsumedLicenses {
      get { return consumedLicenses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Consumables);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Consumables other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!consumedLicenses_.Equals(other.consumedLicenses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= consumedLicenses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      consumedLicenses_.WriteTo(output, _repeated_consumedLicenses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += consumedLicenses_.CalculateSize(_repeated_consumedLicenses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Consumables other) {
      if (other == null) {
        return;
      }
      consumedLicenses_.Add(other.consumedLicenses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            consumedLicenses_.AddEntriesFrom(input, _repeated_consumedLicenses_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
