// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Hero.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D3.Hero {

  /// <summary>Holder for reflection information generated from Hero.proto</summary>
  public static partial class HeroReflection {

    #region Descriptor
    /// <summary>File descriptor for Hero.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HeroReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpIZXJvLnByb3RvEgdEMy5IZXJvGhlBdHRyaWJ1dGVTZXJpYWxpemVyLnBy",
            "b3RvGg5IaXJlbGluZy5wcm90bxoLSXRlbXMucHJvdG8aE09ubGluZVNlcnZp",
            "Y2UucHJvdG8aEEhlcm9Db21tb24ucHJvdG8aDVByb2ZpbGUucHJvdG8aEUdh",
            "bWVCYWxhbmNlLnByb3RvIpgGCgZEaWdlc3QSDwoHdmVyc2lvbhgBIAEoDRIr",
            "CgdoZXJvX2lkGAIgASgLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZBIR",
            "CgloZXJvX25hbWUYAyABKAkSEgoKZ2JpZF9jbGFzcxgEIAEoDxINCgVsZXZl",
            "bBgFIAEoERIUCgxwbGF5ZXJfZmxhZ3MYBiABKA0SMgoQdmlzdWFsX2VxdWlw",
            "bWVudBgHIAEoCzIYLkQzLkhlcm8uVmlzdWFsRXF1aXBtZW50EjEKDXF1ZXN0",
            "X2hpc3RvcnkYCCADKAsyGi5EMy5IZXJvLlF1ZXN0SGlzdG9yeUVudHJ5EhcK",
            "D2xhc3RfcGxheWVkX2FjdBgJIAEoERIcChRoaWdoZXN0X3VubG9ja2VkX2Fj",
            "dBgKIAEoERIpCiFsYXN0X3BsYXllZF9kaWZmaWN1bHR5X2RlcHJlY2F0ZWQY",
            "CyABKBESLgomaGlnaGVzdF91bmxvY2tlZF9kaWZmaWN1bHR5X2RlcHJlY2F0",
            "ZWQYDCABKBESGQoRbGFzdF9wbGF5ZWRfcXVlc3QYDSABKA8SHgoWbGFzdF9w",
            "bGF5ZWRfcXVlc3Rfc3RlcBgOIAEoERITCgt0aW1lX3BsYXllZBgPIAEoDRIv",
            "CidoaWdoZXN0X2NvbXBsZXRlZF9kaWZmaWN1bHR5X2RlcHJlY2F0ZWQYECAB",
            "KBESEwoLY3JlYXRlX3RpbWUYESABKA0SGAoQbGFzdF9wbGF5ZWRfdGltZRgS",
            "IAEoDRITCgtkZWxldGVfdGltZRgTIAEoDRIjChtoaWdoZXN0X3NvbG9fcmlm",
            "dF9jb21wbGV0ZWQYGSABKA0SHAoUZGVwcmVjYXRlZF9hbHRfbGV2ZWwYFCAB",
            "KBESEAoIcHZwX3JhbmsYFSABKBESFgoOc2Vhc29uX2NyZWF0ZWQYFiABKA0S",
            "IwobbGFzdF9wbGF5ZWRfbW9kZV9kZXByZWNhdGVkGBcgASgNEjQKEG9yaWdp",
            "bmFsX2hlcm9faWQYGCABKAsyGi5EMy5PbmxpbmVTZXJ2aWNlLkVudGl0eUlk",
            "IucCCghEaWdlc3RVSRIXCg9sYXN0X3BsYXllZF9hY3QYASABKBESHAoUaGln",
            "aGVzdF91bmxvY2tlZF9hY3QYAiABKBESKQohbGFzdF9wbGF5ZWRfZGlmZmlj",
            "dWx0eV9kZXByZWNhdGVkGAMgASgREi4KJmhpZ2hlc3RfdW5sb2NrZWRfZGlm",
            "ZmljdWx0eV9kZXByZWNhdGVkGAQgASgREhkKEWxhc3RfcGxheWVkX3F1ZXN0",
            "GAUgASgPEh4KFmxhc3RfcGxheWVkX3F1ZXN0X3N0ZXAYBiABKBESEwoLdGlt",
            "ZV9wbGF5ZWQYByABKA0SLwonaGlnaGVzdF9jb21wbGV0ZWRfZGlmZmljdWx0",
            "eV9kZXByZWNhdGVkGAggASgREiMKG2xhc3RfcGxheWVkX21vZGVfZGVwcmVj",
            "YXRlZBgJIAEoDRIjChtoaWdoZXN0X3NvbG9fcmlmdF9jb21wbGV0ZWQYCiAB",
            "KA0iiwUKCVNhdmVkRGF0YRITCgt0aW1lX3BsYXllZBgBIAEoDRIbChNhY3Rp",
            "dmF0ZWRfd2F5cG9pbnRzGAIgASgNEjMKE2hpcmVsaW5nX3NhdmVkX2RhdGEY",
            "AyABKAsyFi5EMy5IaXJlbGluZy5TYXZlZERhdGESFwoPbGFzdF9sZXZlbF90",
            "aW1lGAQgASgNEjgKDGxlYXJuZWRfbG9yZRgFIAEoCzIiLkQzLkdhbWVCYWxh",
            "bmNlLkJpdFBhY2tlZEdiaWRBcnJheRI4ChNzYXZlZF9jb252ZXJzYXRpb25z",
            "GAYgASgLMhsuRDMuSGVyby5TYXZlZENvbnZlcnNhdGlvbnMSEgoKc25vX3Ry",
            "YWl0cxgHIAMoDxIwCgpzYXZlX3BvaW50GAggASgLMhwuRDMuSGVyby5TYXZl",
            "UG9pbnREYXRhX1Byb3RvEhoKEmdiaWRfcG90aW9uX2J1dHRvbhgJIAEoDxIt",
            "Cg1hY3RpdmVfc2tpbGxzGAogAygLMhYuRDMuSGVyby5Ta2lsbFdpdGhSdW5l",
            "EiAKGHNraWxsX3Nsb3RfZXZlcl9hc3NpZ25lZBgLIAEoDBIVCg1za2lsbF92",
            "ZXJzaW9uGAwgASgNEhcKD2Jvc3Nfa2lsbF9mbGFncxgNIAMoDRITCgtldmVu",
            "dF9mbGFncxgOIAEoDRIZChFza2lsbF9raXRfdmVyc2lvbhgPIAEoDRIyChJw",
            "b3Rpb25fYnV0dG9uX2l0ZW0YECABKAsyFi5EMy5IZXJvLlNhdmVkSXRlbUxp",
            "bmsSJAocbWFpbl9xdWVzdF9oYW5kaWNhcF9zbmFwc2hvdBgRIAEoBRIdChVn",
            "YmlkX2xlZ2VuZGFyeV9wb3dlcnMYEiADKA8ixQMKD1NhdmVkRGVmaW5pdGlv",
            "bhIPCgd2ZXJzaW9uGAEgASgNEh8KBmRpZ2VzdBgCIAEoCzIPLkQzLkhlcm8u",
            "RGlnZXN0EkEKEHNhdmVkX2F0dHJpYnV0ZXMYAyABKAsyJy5EMy5BdHRyaWJ1",
            "dGVTZXJpYWxpemVyLlNhdmVkQXR0cmlidXRlcxImCgpzYXZlZF9kYXRhGAQg",
            "ASgLMhIuRDMuSGVyby5TYXZlZERhdGESKAoLc2F2ZWRfcXVlc3QYBSADKAsy",
            "Ey5EMy5IZXJvLlNhdmVkUXVlc3QSIQoFaXRlbXMYBiABKAsyEi5EMy5JdGVt",
            "cy5JdGVtTGlzdBI+ChRxdWVzdF9yZXdhcmRfaGlzdG9yeRgHIAMoCzIgLkQz",
            "Lkhlcm8uUXVlc3RSZXdhcmRIaXN0b3J5RW50cnkSHQoVYWNjZXB0ZWRfbGlj",
            "ZW5zZV9iaXRzGAggASgEEioKDGNvbnNvbGVfZGF0YRgKIAEoCzIULkQzLkhl",
            "cm8uQ29uc29sZURhdGESPQoWZXF1aXBtZW50X21hbmFnZXJfZGF0YRgLIAEo",
            "CzIdLkQzLkhlcm8uRXF1aXBtZW50TWFuYWdlckRhdGEiLgoKRGlnZXN0TGlz",
            "dBIgCgdkaWdlc3RzGAEgAygLMg8uRDMuSGVyby5EaWdlc3QiUAoSQmFzaWNB",
            "dHRyaWJ1dGVMaXN0EjoKCmF0dHJpYnV0ZXMYASADKAsyJi5EMy5BdHRyaWJ1",
            "dGVTZXJpYWxpemVyLlNhdmVkQXR0cmlidXRlImUKF0NvbnNvbGVSYW5kb21W",
            "ZW5kb3JTZWVkEhUKDWl0ZW1fc2xvdF9rZXkYASABKBESGAoQcmFuZG9tX2l0",
            "ZW1fc2VlZBgCIAEoERIZChFyYW5kb21faXRlbV9jYXJyeRgDIAEoESJjChtD",
            "b25zb2xlUmFuZG9tVmVuZG9yU2VlZExpc3QSRAoaY29uc29sZV9yYW5kb21f",
            "dmVuZG9yX3NlZWQYASADKAsyIC5EMy5IZXJvLkNvbnNvbGVSYW5kb21WZW5k",
            "b3JTZWVkIuMBCgtDb25zb2xlRGF0YRItCgxoZXJvX3Byb2ZpbGUYASABKAsy",
            "Fy5EMy5Qcm9maWxlLkhlcm9Qcm9maWxlEhwKFGxhc3RfcGxheWVkX2hhbmRp",
            "Y2FwGAIgASgREhMKC2tpbGxlcl9uYW1lGAMgASgJEiYKHmxhc3RfcGxheWVk",
            "X2FkdmVudHVyZV9tb2RlX2FjdBgEIAEoERJKChxyYW5kb21faXRlbV92ZW5k",
            "b3Jfc2VlZF9saXN0GAUgASgLMiQuRDMuSGVyby5Db25zb2xlUmFuZG9tVmVu",
            "ZG9yU2VlZExpc3RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D3.AttributeSerializer.AttributeSerializerReflection.Descriptor, global::D3.Hireling.HirelingReflection.Descriptor, global::D3.Items.ItemsReflection.Descriptor, global::D3.OnlineService.OnlineServiceReflection.Descriptor, global::D3.Hero.HeroCommonReflection.Descriptor, global::D3.Profile.ProfileReflection.Descriptor, global::D3.GameBalance.GameBalanceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.Digest), global::D3.Hero.Digest.Parser, new[]{ "Version", "HeroId", "HeroName", "GbidClass", "Level", "PlayerFlags", "VisualEquipment", "QuestHistory", "LastPlayedAct", "HighestUnlockedAct", "LastPlayedDifficultyDeprecated", "HighestUnlockedDifficultyDeprecated", "LastPlayedQuest", "LastPlayedQuestStep", "TimePlayed", "HighestCompletedDifficultyDeprecated", "CreateTime", "LastPlayedTime", "DeleteTime", "HighestSoloRiftCompleted", "DeprecatedAltLevel", "PvpRank", "SeasonCreated", "LastPlayedModeDeprecated", "OriginalHeroId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.DigestUI), global::D3.Hero.DigestUI.Parser, new[]{ "LastPlayedAct", "HighestUnlockedAct", "LastPlayedDifficultyDeprecated", "HighestUnlockedDifficultyDeprecated", "LastPlayedQuest", "LastPlayedQuestStep", "TimePlayed", "HighestCompletedDifficultyDeprecated", "LastPlayedModeDeprecated", "HighestSoloRiftCompleted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.SavedData), global::D3.Hero.SavedData.Parser, new[]{ "TimePlayed", "ActivatedWaypoints", "HirelingSavedData", "LastLevelTime", "LearnedLore", "SavedConversations", "SnoTraits", "SavePoint", "GbidPotionButton", "ActiveSkills", "SkillSlotEverAssigned", "SkillVersion", "BossKillFlags", "EventFlags", "SkillKitVersion", "PotionButtonItem", "MainQuestHandicapSnapshot", "GbidLegendaryPowers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.SavedDefinition), global::D3.Hero.SavedDefinition.Parser, new[]{ "Version", "Digest", "SavedAttributes", "SavedData", "SavedQuest", "Items", "QuestRewardHistory", "AcceptedLicenseBits", "ConsoleData", "EquipmentManagerData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.DigestList), global::D3.Hero.DigestList.Parser, new[]{ "Digests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.BasicAttributeList), global::D3.Hero.BasicAttributeList.Parser, new[]{ "Attributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.ConsoleRandomVendorSeed), global::D3.Hero.ConsoleRandomVendorSeed.Parser, new[]{ "ItemSlotKey", "RandomItemSeed", "RandomItemCarry" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.ConsoleRandomVendorSeedList), global::D3.Hero.ConsoleRandomVendorSeedList.Parser, new[]{ "ConsoleRandomVendorSeed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Hero.ConsoleData), global::D3.Hero.ConsoleData.Parser, new[]{ "HeroProfile", "LastPlayedHandicap", "KillerName", "LastPlayedAdventureModeAct", "RandomItemVendorSeedList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Digest : pb::IMessage<Digest> {
    private static readonly pb::MessageParser<Digest> _parser = new pb::MessageParser<Digest>(() => new Digest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Digest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Digest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Digest(Digest other) : this() {
      version_ = other.version_;
      heroId_ = other.heroId_ != null ? other.heroId_.Clone() : null;
      heroName_ = other.heroName_;
      gbidClass_ = other.gbidClass_;
      level_ = other.level_;
      playerFlags_ = other.playerFlags_;
      visualEquipment_ = other.visualEquipment_ != null ? other.visualEquipment_.Clone() : null;
      questHistory_ = other.questHistory_.Clone();
      lastPlayedAct_ = other.lastPlayedAct_;
      highestUnlockedAct_ = other.highestUnlockedAct_;
      lastPlayedDifficultyDeprecated_ = other.lastPlayedDifficultyDeprecated_;
      highestUnlockedDifficultyDeprecated_ = other.highestUnlockedDifficultyDeprecated_;
      lastPlayedQuest_ = other.lastPlayedQuest_;
      lastPlayedQuestStep_ = other.lastPlayedQuestStep_;
      timePlayed_ = other.timePlayed_;
      highestCompletedDifficultyDeprecated_ = other.highestCompletedDifficultyDeprecated_;
      createTime_ = other.createTime_;
      lastPlayedTime_ = other.lastPlayedTime_;
      deleteTime_ = other.deleteTime_;
      highestSoloRiftCompleted_ = other.highestSoloRiftCompleted_;
      deprecatedAltLevel_ = other.deprecatedAltLevel_;
      pvpRank_ = other.pvpRank_;
      seasonCreated_ = other.seasonCreated_;
      lastPlayedModeDeprecated_ = other.lastPlayedModeDeprecated_;
      originalHeroId_ = other.originalHeroId_ != null ? other.originalHeroId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Digest Clone() {
      return new Digest(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private global::D3.OnlineService.EntityId heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "hero_name" field.</summary>
    public const int HeroNameFieldNumber = 3;
    private string heroName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroName {
      get { return heroName_; }
      set {
        heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gbid_class" field.</summary>
    public const int GbidClassFieldNumber = 4;
    private int gbidClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GbidClass {
      get { return gbidClass_; }
      set {
        gbidClass_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "player_flags" field.</summary>
    public const int PlayerFlagsFieldNumber = 6;
    private uint playerFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerFlags {
      get { return playerFlags_; }
      set {
        playerFlags_ = value;
      }
    }

    /// <summary>Field number for the "visual_equipment" field.</summary>
    public const int VisualEquipmentFieldNumber = 7;
    private global::D3.Hero.VisualEquipment visualEquipment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.VisualEquipment VisualEquipment {
      get { return visualEquipment_; }
      set {
        visualEquipment_ = value;
      }
    }

    /// <summary>Field number for the "quest_history" field.</summary>
    public const int QuestHistoryFieldNumber = 8;
    private static readonly pb::FieldCodec<global::D3.Hero.QuestHistoryEntry> _repeated_questHistory_codec
        = pb::FieldCodec.ForMessage(66, global::D3.Hero.QuestHistoryEntry.Parser);
    private readonly pbc::RepeatedField<global::D3.Hero.QuestHistoryEntry> questHistory_ = new pbc::RepeatedField<global::D3.Hero.QuestHistoryEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Hero.QuestHistoryEntry> QuestHistory {
      get { return questHistory_; }
    }

    /// <summary>Field number for the "last_played_act" field.</summary>
    public const int LastPlayedActFieldNumber = 9;
    private int lastPlayedAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedAct {
      get { return lastPlayedAct_; }
      set {
        lastPlayedAct_ = value;
      }
    }

    /// <summary>Field number for the "highest_unlocked_act" field.</summary>
    public const int HighestUnlockedActFieldNumber = 10;
    private int highestUnlockedAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestUnlockedAct {
      get { return highestUnlockedAct_; }
      set {
        highestUnlockedAct_ = value;
      }
    }

    /// <summary>Field number for the "last_played_difficulty_deprecated" field.</summary>
    public const int LastPlayedDifficultyDeprecatedFieldNumber = 11;
    private int lastPlayedDifficultyDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedDifficultyDeprecated {
      get { return lastPlayedDifficultyDeprecated_; }
      set {
        lastPlayedDifficultyDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "highest_unlocked_difficulty_deprecated" field.</summary>
    public const int HighestUnlockedDifficultyDeprecatedFieldNumber = 12;
    private int highestUnlockedDifficultyDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestUnlockedDifficultyDeprecated {
      get { return highestUnlockedDifficultyDeprecated_; }
      set {
        highestUnlockedDifficultyDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "last_played_quest" field.</summary>
    public const int LastPlayedQuestFieldNumber = 13;
    private int lastPlayedQuest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedQuest {
      get { return lastPlayedQuest_; }
      set {
        lastPlayedQuest_ = value;
      }
    }

    /// <summary>Field number for the "last_played_quest_step" field.</summary>
    public const int LastPlayedQuestStepFieldNumber = 14;
    private int lastPlayedQuestStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedQuestStep {
      get { return lastPlayedQuestStep_; }
      set {
        lastPlayedQuestStep_ = value;
      }
    }

    /// <summary>Field number for the "time_played" field.</summary>
    public const int TimePlayedFieldNumber = 15;
    private uint timePlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimePlayed {
      get { return timePlayed_; }
      set {
        timePlayed_ = value;
      }
    }

    /// <summary>Field number for the "highest_completed_difficulty_deprecated" field.</summary>
    public const int HighestCompletedDifficultyDeprecatedFieldNumber = 16;
    private int highestCompletedDifficultyDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestCompletedDifficultyDeprecated {
      get { return highestCompletedDifficultyDeprecated_; }
      set {
        highestCompletedDifficultyDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 17;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "last_played_time" field.</summary>
    public const int LastPlayedTimeFieldNumber = 18;
    private uint lastPlayedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastPlayedTime {
      get { return lastPlayedTime_; }
      set {
        lastPlayedTime_ = value;
      }
    }

    /// <summary>Field number for the "delete_time" field.</summary>
    public const int DeleteTimeFieldNumber = 19;
    private uint deleteTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeleteTime {
      get { return deleteTime_; }
      set {
        deleteTime_ = value;
      }
    }

    /// <summary>Field number for the "highest_solo_rift_completed" field.</summary>
    public const int HighestSoloRiftCompletedFieldNumber = 25;
    private uint highestSoloRiftCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestSoloRiftCompleted {
      get { return highestSoloRiftCompleted_; }
      set {
        highestSoloRiftCompleted_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_alt_level" field.</summary>
    public const int DeprecatedAltLevelFieldNumber = 20;
    private int deprecatedAltLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedAltLevel {
      get { return deprecatedAltLevel_; }
      set {
        deprecatedAltLevel_ = value;
      }
    }

    /// <summary>Field number for the "pvp_rank" field.</summary>
    public const int PvpRankFieldNumber = 21;
    private int pvpRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PvpRank {
      get { return pvpRank_; }
      set {
        pvpRank_ = value;
      }
    }

    /// <summary>Field number for the "season_created" field.</summary>
    public const int SeasonCreatedFieldNumber = 22;
    private uint seasonCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonCreated {
      get { return seasonCreated_; }
      set {
        seasonCreated_ = value;
      }
    }

    /// <summary>Field number for the "last_played_mode_deprecated" field.</summary>
    public const int LastPlayedModeDeprecatedFieldNumber = 23;
    private uint lastPlayedModeDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastPlayedModeDeprecated {
      get { return lastPlayedModeDeprecated_; }
      set {
        lastPlayedModeDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "original_hero_id" field.</summary>
    public const int OriginalHeroIdFieldNumber = 24;
    private global::D3.OnlineService.EntityId originalHeroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId OriginalHeroId {
      get { return originalHeroId_; }
      set {
        originalHeroId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Digest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Digest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(HeroId, other.HeroId)) return false;
      if (HeroName != other.HeroName) return false;
      if (GbidClass != other.GbidClass) return false;
      if (Level != other.Level) return false;
      if (PlayerFlags != other.PlayerFlags) return false;
      if (!object.Equals(VisualEquipment, other.VisualEquipment)) return false;
      if(!questHistory_.Equals(other.questHistory_)) return false;
      if (LastPlayedAct != other.LastPlayedAct) return false;
      if (HighestUnlockedAct != other.HighestUnlockedAct) return false;
      if (LastPlayedDifficultyDeprecated != other.LastPlayedDifficultyDeprecated) return false;
      if (HighestUnlockedDifficultyDeprecated != other.HighestUnlockedDifficultyDeprecated) return false;
      if (LastPlayedQuest != other.LastPlayedQuest) return false;
      if (LastPlayedQuestStep != other.LastPlayedQuestStep) return false;
      if (TimePlayed != other.TimePlayed) return false;
      if (HighestCompletedDifficultyDeprecated != other.HighestCompletedDifficultyDeprecated) return false;
      if (CreateTime != other.CreateTime) return false;
      if (LastPlayedTime != other.LastPlayedTime) return false;
      if (DeleteTime != other.DeleteTime) return false;
      if (HighestSoloRiftCompleted != other.HighestSoloRiftCompleted) return false;
      if (DeprecatedAltLevel != other.DeprecatedAltLevel) return false;
      if (PvpRank != other.PvpRank) return false;
      if (SeasonCreated != other.SeasonCreated) return false;
      if (LastPlayedModeDeprecated != other.LastPlayedModeDeprecated) return false;
      if (!object.Equals(OriginalHeroId, other.OriginalHeroId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (heroId_ != null) hash ^= HeroId.GetHashCode();
      if (HeroName.Length != 0) hash ^= HeroName.GetHashCode();
      if (GbidClass != 0) hash ^= GbidClass.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (PlayerFlags != 0) hash ^= PlayerFlags.GetHashCode();
      if (visualEquipment_ != null) hash ^= VisualEquipment.GetHashCode();
      hash ^= questHistory_.GetHashCode();
      if (LastPlayedAct != 0) hash ^= LastPlayedAct.GetHashCode();
      if (HighestUnlockedAct != 0) hash ^= HighestUnlockedAct.GetHashCode();
      if (LastPlayedDifficultyDeprecated != 0) hash ^= LastPlayedDifficultyDeprecated.GetHashCode();
      if (HighestUnlockedDifficultyDeprecated != 0) hash ^= HighestUnlockedDifficultyDeprecated.GetHashCode();
      if (LastPlayedQuest != 0) hash ^= LastPlayedQuest.GetHashCode();
      if (LastPlayedQuestStep != 0) hash ^= LastPlayedQuestStep.GetHashCode();
      if (TimePlayed != 0) hash ^= TimePlayed.GetHashCode();
      if (HighestCompletedDifficultyDeprecated != 0) hash ^= HighestCompletedDifficultyDeprecated.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (LastPlayedTime != 0) hash ^= LastPlayedTime.GetHashCode();
      if (DeleteTime != 0) hash ^= DeleteTime.GetHashCode();
      if (HighestSoloRiftCompleted != 0) hash ^= HighestSoloRiftCompleted.GetHashCode();
      if (DeprecatedAltLevel != 0) hash ^= DeprecatedAltLevel.GetHashCode();
      if (PvpRank != 0) hash ^= PvpRank.GetHashCode();
      if (SeasonCreated != 0) hash ^= SeasonCreated.GetHashCode();
      if (LastPlayedModeDeprecated != 0) hash ^= LastPlayedModeDeprecated.GetHashCode();
      if (originalHeroId_ != null) hash ^= OriginalHeroId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (heroId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HeroId);
      }
      if (HeroName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HeroName);
      }
      if (GbidClass != 0) {
        output.WriteRawTag(37);
        output.WriteSFixed32(GbidClass);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Level);
      }
      if (PlayerFlags != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PlayerFlags);
      }
      if (visualEquipment_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(VisualEquipment);
      }
      questHistory_.WriteTo(output, _repeated_questHistory_codec);
      if (LastPlayedAct != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(LastPlayedAct);
      }
      if (HighestUnlockedAct != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(HighestUnlockedAct);
      }
      if (LastPlayedDifficultyDeprecated != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(LastPlayedDifficultyDeprecated);
      }
      if (HighestUnlockedDifficultyDeprecated != 0) {
        output.WriteRawTag(96);
        output.WriteSInt32(HighestUnlockedDifficultyDeprecated);
      }
      if (LastPlayedQuest != 0) {
        output.WriteRawTag(109);
        output.WriteSFixed32(LastPlayedQuest);
      }
      if (LastPlayedQuestStep != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(LastPlayedQuestStep);
      }
      if (TimePlayed != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(TimePlayed);
      }
      if (HighestCompletedDifficultyDeprecated != 0) {
        output.WriteRawTag(128, 1);
        output.WriteSInt32(HighestCompletedDifficultyDeprecated);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(CreateTime);
      }
      if (LastPlayedTime != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(LastPlayedTime);
      }
      if (DeleteTime != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(DeleteTime);
      }
      if (DeprecatedAltLevel != 0) {
        output.WriteRawTag(160, 1);
        output.WriteSInt32(DeprecatedAltLevel);
      }
      if (PvpRank != 0) {
        output.WriteRawTag(168, 1);
        output.WriteSInt32(PvpRank);
      }
      if (SeasonCreated != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(SeasonCreated);
      }
      if (LastPlayedModeDeprecated != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(LastPlayedModeDeprecated);
      }
      if (originalHeroId_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(OriginalHeroId);
      }
      if (HighestSoloRiftCompleted != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(HighestSoloRiftCompleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (heroId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroId);
      }
      if (HeroName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
      }
      if (GbidClass != 0) {
        size += 1 + 4;
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Level);
      }
      if (PlayerFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerFlags);
      }
      if (visualEquipment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VisualEquipment);
      }
      size += questHistory_.CalculateSize(_repeated_questHistory_codec);
      if (LastPlayedAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedAct);
      }
      if (HighestUnlockedAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HighestUnlockedAct);
      }
      if (LastPlayedDifficultyDeprecated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedDifficultyDeprecated);
      }
      if (HighestUnlockedDifficultyDeprecated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HighestUnlockedDifficultyDeprecated);
      }
      if (LastPlayedQuest != 0) {
        size += 1 + 4;
      }
      if (LastPlayedQuestStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedQuestStep);
      }
      if (TimePlayed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePlayed);
      }
      if (HighestCompletedDifficultyDeprecated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(HighestCompletedDifficultyDeprecated);
      }
      if (CreateTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (LastPlayedTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastPlayedTime);
      }
      if (DeleteTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeleteTime);
      }
      if (HighestSoloRiftCompleted != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HighestSoloRiftCompleted);
      }
      if (DeprecatedAltLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(DeprecatedAltLevel);
      }
      if (PvpRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(PvpRank);
      }
      if (SeasonCreated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeasonCreated);
      }
      if (LastPlayedModeDeprecated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LastPlayedModeDeprecated);
      }
      if (originalHeroId_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OriginalHeroId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Digest other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.heroId_ != null) {
        if (heroId_ == null) {
          heroId_ = new global::D3.OnlineService.EntityId();
        }
        HeroId.MergeFrom(other.HeroId);
      }
      if (other.HeroName.Length != 0) {
        HeroName = other.HeroName;
      }
      if (other.GbidClass != 0) {
        GbidClass = other.GbidClass;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.PlayerFlags != 0) {
        PlayerFlags = other.PlayerFlags;
      }
      if (other.visualEquipment_ != null) {
        if (visualEquipment_ == null) {
          visualEquipment_ = new global::D3.Hero.VisualEquipment();
        }
        VisualEquipment.MergeFrom(other.VisualEquipment);
      }
      questHistory_.Add(other.questHistory_);
      if (other.LastPlayedAct != 0) {
        LastPlayedAct = other.LastPlayedAct;
      }
      if (other.HighestUnlockedAct != 0) {
        HighestUnlockedAct = other.HighestUnlockedAct;
      }
      if (other.LastPlayedDifficultyDeprecated != 0) {
        LastPlayedDifficultyDeprecated = other.LastPlayedDifficultyDeprecated;
      }
      if (other.HighestUnlockedDifficultyDeprecated != 0) {
        HighestUnlockedDifficultyDeprecated = other.HighestUnlockedDifficultyDeprecated;
      }
      if (other.LastPlayedQuest != 0) {
        LastPlayedQuest = other.LastPlayedQuest;
      }
      if (other.LastPlayedQuestStep != 0) {
        LastPlayedQuestStep = other.LastPlayedQuestStep;
      }
      if (other.TimePlayed != 0) {
        TimePlayed = other.TimePlayed;
      }
      if (other.HighestCompletedDifficultyDeprecated != 0) {
        HighestCompletedDifficultyDeprecated = other.HighestCompletedDifficultyDeprecated;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.LastPlayedTime != 0) {
        LastPlayedTime = other.LastPlayedTime;
      }
      if (other.DeleteTime != 0) {
        DeleteTime = other.DeleteTime;
      }
      if (other.HighestSoloRiftCompleted != 0) {
        HighestSoloRiftCompleted = other.HighestSoloRiftCompleted;
      }
      if (other.DeprecatedAltLevel != 0) {
        DeprecatedAltLevel = other.DeprecatedAltLevel;
      }
      if (other.PvpRank != 0) {
        PvpRank = other.PvpRank;
      }
      if (other.SeasonCreated != 0) {
        SeasonCreated = other.SeasonCreated;
      }
      if (other.LastPlayedModeDeprecated != 0) {
        LastPlayedModeDeprecated = other.LastPlayedModeDeprecated;
      }
      if (other.originalHeroId_ != null) {
        if (originalHeroId_ == null) {
          originalHeroId_ = new global::D3.OnlineService.EntityId();
        }
        OriginalHeroId.MergeFrom(other.OriginalHeroId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (heroId_ == null) {
              heroId_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(heroId_);
            break;
          }
          case 26: {
            HeroName = input.ReadString();
            break;
          }
          case 37: {
            GbidClass = input.ReadSFixed32();
            break;
          }
          case 40: {
            Level = input.ReadSInt32();
            break;
          }
          case 48: {
            PlayerFlags = input.ReadUInt32();
            break;
          }
          case 58: {
            if (visualEquipment_ == null) {
              visualEquipment_ = new global::D3.Hero.VisualEquipment();
            }
            input.ReadMessage(visualEquipment_);
            break;
          }
          case 66: {
            questHistory_.AddEntriesFrom(input, _repeated_questHistory_codec);
            break;
          }
          case 72: {
            LastPlayedAct = input.ReadSInt32();
            break;
          }
          case 80: {
            HighestUnlockedAct = input.ReadSInt32();
            break;
          }
          case 88: {
            LastPlayedDifficultyDeprecated = input.ReadSInt32();
            break;
          }
          case 96: {
            HighestUnlockedDifficultyDeprecated = input.ReadSInt32();
            break;
          }
          case 109: {
            LastPlayedQuest = input.ReadSFixed32();
            break;
          }
          case 112: {
            LastPlayedQuestStep = input.ReadSInt32();
            break;
          }
          case 120: {
            TimePlayed = input.ReadUInt32();
            break;
          }
          case 128: {
            HighestCompletedDifficultyDeprecated = input.ReadSInt32();
            break;
          }
          case 136: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 144: {
            LastPlayedTime = input.ReadUInt32();
            break;
          }
          case 152: {
            DeleteTime = input.ReadUInt32();
            break;
          }
          case 160: {
            DeprecatedAltLevel = input.ReadSInt32();
            break;
          }
          case 168: {
            PvpRank = input.ReadSInt32();
            break;
          }
          case 176: {
            SeasonCreated = input.ReadUInt32();
            break;
          }
          case 184: {
            LastPlayedModeDeprecated = input.ReadUInt32();
            break;
          }
          case 194: {
            if (originalHeroId_ == null) {
              originalHeroId_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(originalHeroId_);
            break;
          }
          case 200: {
            HighestSoloRiftCompleted = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DigestUI : pb::IMessage<DigestUI> {
    private static readonly pb::MessageParser<DigestUI> _parser = new pb::MessageParser<DigestUI>(() => new DigestUI());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DigestUI> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigestUI() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigestUI(DigestUI other) : this() {
      lastPlayedAct_ = other.lastPlayedAct_;
      highestUnlockedAct_ = other.highestUnlockedAct_;
      lastPlayedDifficultyDeprecated_ = other.lastPlayedDifficultyDeprecated_;
      highestUnlockedDifficultyDeprecated_ = other.highestUnlockedDifficultyDeprecated_;
      lastPlayedQuest_ = other.lastPlayedQuest_;
      lastPlayedQuestStep_ = other.lastPlayedQuestStep_;
      timePlayed_ = other.timePlayed_;
      highestCompletedDifficultyDeprecated_ = other.highestCompletedDifficultyDeprecated_;
      lastPlayedModeDeprecated_ = other.lastPlayedModeDeprecated_;
      highestSoloRiftCompleted_ = other.highestSoloRiftCompleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigestUI Clone() {
      return new DigestUI(this);
    }

    /// <summary>Field number for the "last_played_act" field.</summary>
    public const int LastPlayedActFieldNumber = 1;
    private int lastPlayedAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedAct {
      get { return lastPlayedAct_; }
      set {
        lastPlayedAct_ = value;
      }
    }

    /// <summary>Field number for the "highest_unlocked_act" field.</summary>
    public const int HighestUnlockedActFieldNumber = 2;
    private int highestUnlockedAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestUnlockedAct {
      get { return highestUnlockedAct_; }
      set {
        highestUnlockedAct_ = value;
      }
    }

    /// <summary>Field number for the "last_played_difficulty_deprecated" field.</summary>
    public const int LastPlayedDifficultyDeprecatedFieldNumber = 3;
    private int lastPlayedDifficultyDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedDifficultyDeprecated {
      get { return lastPlayedDifficultyDeprecated_; }
      set {
        lastPlayedDifficultyDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "highest_unlocked_difficulty_deprecated" field.</summary>
    public const int HighestUnlockedDifficultyDeprecatedFieldNumber = 4;
    private int highestUnlockedDifficultyDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestUnlockedDifficultyDeprecated {
      get { return highestUnlockedDifficultyDeprecated_; }
      set {
        highestUnlockedDifficultyDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "last_played_quest" field.</summary>
    public const int LastPlayedQuestFieldNumber = 5;
    private int lastPlayedQuest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedQuest {
      get { return lastPlayedQuest_; }
      set {
        lastPlayedQuest_ = value;
      }
    }

    /// <summary>Field number for the "last_played_quest_step" field.</summary>
    public const int LastPlayedQuestStepFieldNumber = 6;
    private int lastPlayedQuestStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedQuestStep {
      get { return lastPlayedQuestStep_; }
      set {
        lastPlayedQuestStep_ = value;
      }
    }

    /// <summary>Field number for the "time_played" field.</summary>
    public const int TimePlayedFieldNumber = 7;
    private uint timePlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimePlayed {
      get { return timePlayed_; }
      set {
        timePlayed_ = value;
      }
    }

    /// <summary>Field number for the "highest_completed_difficulty_deprecated" field.</summary>
    public const int HighestCompletedDifficultyDeprecatedFieldNumber = 8;
    private int highestCompletedDifficultyDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighestCompletedDifficultyDeprecated {
      get { return highestCompletedDifficultyDeprecated_; }
      set {
        highestCompletedDifficultyDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "last_played_mode_deprecated" field.</summary>
    public const int LastPlayedModeDeprecatedFieldNumber = 9;
    private uint lastPlayedModeDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastPlayedModeDeprecated {
      get { return lastPlayedModeDeprecated_; }
      set {
        lastPlayedModeDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "highest_solo_rift_completed" field.</summary>
    public const int HighestSoloRiftCompletedFieldNumber = 10;
    private uint highestSoloRiftCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestSoloRiftCompleted {
      get { return highestSoloRiftCompleted_; }
      set {
        highestSoloRiftCompleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DigestUI);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DigestUI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastPlayedAct != other.LastPlayedAct) return false;
      if (HighestUnlockedAct != other.HighestUnlockedAct) return false;
      if (LastPlayedDifficultyDeprecated != other.LastPlayedDifficultyDeprecated) return false;
      if (HighestUnlockedDifficultyDeprecated != other.HighestUnlockedDifficultyDeprecated) return false;
      if (LastPlayedQuest != other.LastPlayedQuest) return false;
      if (LastPlayedQuestStep != other.LastPlayedQuestStep) return false;
      if (TimePlayed != other.TimePlayed) return false;
      if (HighestCompletedDifficultyDeprecated != other.HighestCompletedDifficultyDeprecated) return false;
      if (LastPlayedModeDeprecated != other.LastPlayedModeDeprecated) return false;
      if (HighestSoloRiftCompleted != other.HighestSoloRiftCompleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastPlayedAct != 0) hash ^= LastPlayedAct.GetHashCode();
      if (HighestUnlockedAct != 0) hash ^= HighestUnlockedAct.GetHashCode();
      if (LastPlayedDifficultyDeprecated != 0) hash ^= LastPlayedDifficultyDeprecated.GetHashCode();
      if (HighestUnlockedDifficultyDeprecated != 0) hash ^= HighestUnlockedDifficultyDeprecated.GetHashCode();
      if (LastPlayedQuest != 0) hash ^= LastPlayedQuest.GetHashCode();
      if (LastPlayedQuestStep != 0) hash ^= LastPlayedQuestStep.GetHashCode();
      if (TimePlayed != 0) hash ^= TimePlayed.GetHashCode();
      if (HighestCompletedDifficultyDeprecated != 0) hash ^= HighestCompletedDifficultyDeprecated.GetHashCode();
      if (LastPlayedModeDeprecated != 0) hash ^= LastPlayedModeDeprecated.GetHashCode();
      if (HighestSoloRiftCompleted != 0) hash ^= HighestSoloRiftCompleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastPlayedAct != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LastPlayedAct);
      }
      if (HighestUnlockedAct != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(HighestUnlockedAct);
      }
      if (LastPlayedDifficultyDeprecated != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(LastPlayedDifficultyDeprecated);
      }
      if (HighestUnlockedDifficultyDeprecated != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(HighestUnlockedDifficultyDeprecated);
      }
      if (LastPlayedQuest != 0) {
        output.WriteRawTag(45);
        output.WriteSFixed32(LastPlayedQuest);
      }
      if (LastPlayedQuestStep != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(LastPlayedQuestStep);
      }
      if (TimePlayed != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TimePlayed);
      }
      if (HighestCompletedDifficultyDeprecated != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(HighestCompletedDifficultyDeprecated);
      }
      if (LastPlayedModeDeprecated != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LastPlayedModeDeprecated);
      }
      if (HighestSoloRiftCompleted != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(HighestSoloRiftCompleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastPlayedAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedAct);
      }
      if (HighestUnlockedAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HighestUnlockedAct);
      }
      if (LastPlayedDifficultyDeprecated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedDifficultyDeprecated);
      }
      if (HighestUnlockedDifficultyDeprecated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HighestUnlockedDifficultyDeprecated);
      }
      if (LastPlayedQuest != 0) {
        size += 1 + 4;
      }
      if (LastPlayedQuestStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedQuestStep);
      }
      if (TimePlayed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePlayed);
      }
      if (HighestCompletedDifficultyDeprecated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HighestCompletedDifficultyDeprecated);
      }
      if (LastPlayedModeDeprecated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastPlayedModeDeprecated);
      }
      if (HighestSoloRiftCompleted != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestSoloRiftCompleted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DigestUI other) {
      if (other == null) {
        return;
      }
      if (other.LastPlayedAct != 0) {
        LastPlayedAct = other.LastPlayedAct;
      }
      if (other.HighestUnlockedAct != 0) {
        HighestUnlockedAct = other.HighestUnlockedAct;
      }
      if (other.LastPlayedDifficultyDeprecated != 0) {
        LastPlayedDifficultyDeprecated = other.LastPlayedDifficultyDeprecated;
      }
      if (other.HighestUnlockedDifficultyDeprecated != 0) {
        HighestUnlockedDifficultyDeprecated = other.HighestUnlockedDifficultyDeprecated;
      }
      if (other.LastPlayedQuest != 0) {
        LastPlayedQuest = other.LastPlayedQuest;
      }
      if (other.LastPlayedQuestStep != 0) {
        LastPlayedQuestStep = other.LastPlayedQuestStep;
      }
      if (other.TimePlayed != 0) {
        TimePlayed = other.TimePlayed;
      }
      if (other.HighestCompletedDifficultyDeprecated != 0) {
        HighestCompletedDifficultyDeprecated = other.HighestCompletedDifficultyDeprecated;
      }
      if (other.LastPlayedModeDeprecated != 0) {
        LastPlayedModeDeprecated = other.LastPlayedModeDeprecated;
      }
      if (other.HighestSoloRiftCompleted != 0) {
        HighestSoloRiftCompleted = other.HighestSoloRiftCompleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastPlayedAct = input.ReadSInt32();
            break;
          }
          case 16: {
            HighestUnlockedAct = input.ReadSInt32();
            break;
          }
          case 24: {
            LastPlayedDifficultyDeprecated = input.ReadSInt32();
            break;
          }
          case 32: {
            HighestUnlockedDifficultyDeprecated = input.ReadSInt32();
            break;
          }
          case 45: {
            LastPlayedQuest = input.ReadSFixed32();
            break;
          }
          case 48: {
            LastPlayedQuestStep = input.ReadSInt32();
            break;
          }
          case 56: {
            TimePlayed = input.ReadUInt32();
            break;
          }
          case 64: {
            HighestCompletedDifficultyDeprecated = input.ReadSInt32();
            break;
          }
          case 72: {
            LastPlayedModeDeprecated = input.ReadUInt32();
            break;
          }
          case 80: {
            HighestSoloRiftCompleted = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SavedData : pb::IMessage<SavedData> {
    private static readonly pb::MessageParser<SavedData> _parser = new pb::MessageParser<SavedData>(() => new SavedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SavedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedData(SavedData other) : this() {
      timePlayed_ = other.timePlayed_;
      activatedWaypoints_ = other.activatedWaypoints_;
      hirelingSavedData_ = other.hirelingSavedData_ != null ? other.hirelingSavedData_.Clone() : null;
      lastLevelTime_ = other.lastLevelTime_;
      learnedLore_ = other.learnedLore_ != null ? other.learnedLore_.Clone() : null;
      savedConversations_ = other.savedConversations_ != null ? other.savedConversations_.Clone() : null;
      snoTraits_ = other.snoTraits_.Clone();
      savePoint_ = other.savePoint_ != null ? other.savePoint_.Clone() : null;
      gbidPotionButton_ = other.gbidPotionButton_;
      activeSkills_ = other.activeSkills_.Clone();
      skillSlotEverAssigned_ = other.skillSlotEverAssigned_;
      skillVersion_ = other.skillVersion_;
      bossKillFlags_ = other.bossKillFlags_.Clone();
      eventFlags_ = other.eventFlags_;
      skillKitVersion_ = other.skillKitVersion_;
      potionButtonItem_ = other.potionButtonItem_ != null ? other.potionButtonItem_.Clone() : null;
      mainQuestHandicapSnapshot_ = other.mainQuestHandicapSnapshot_;
      gbidLegendaryPowers_ = other.gbidLegendaryPowers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedData Clone() {
      return new SavedData(this);
    }

    /// <summary>Field number for the "time_played" field.</summary>
    public const int TimePlayedFieldNumber = 1;
    private uint timePlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimePlayed {
      get { return timePlayed_; }
      set {
        timePlayed_ = value;
      }
    }

    /// <summary>Field number for the "activated_waypoints" field.</summary>
    public const int ActivatedWaypointsFieldNumber = 2;
    private uint activatedWaypoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivatedWaypoints {
      get { return activatedWaypoints_; }
      set {
        activatedWaypoints_ = value;
      }
    }

    /// <summary>Field number for the "hireling_saved_data" field.</summary>
    public const int HirelingSavedDataFieldNumber = 3;
    private global::D3.Hireling.SavedData hirelingSavedData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hireling.SavedData HirelingSavedData {
      get { return hirelingSavedData_; }
      set {
        hirelingSavedData_ = value;
      }
    }

    /// <summary>Field number for the "last_level_time" field.</summary>
    public const int LastLevelTimeFieldNumber = 4;
    private uint lastLevelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastLevelTime {
      get { return lastLevelTime_; }
      set {
        lastLevelTime_ = value;
      }
    }

    /// <summary>Field number for the "learned_lore" field.</summary>
    public const int LearnedLoreFieldNumber = 5;
    private global::D3.GameBalance.BitPackedGbidArray learnedLore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.GameBalance.BitPackedGbidArray LearnedLore {
      get { return learnedLore_; }
      set {
        learnedLore_ = value;
      }
    }

    /// <summary>Field number for the "saved_conversations" field.</summary>
    public const int SavedConversationsFieldNumber = 6;
    private global::D3.Hero.SavedConversations savedConversations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.SavedConversations SavedConversations {
      get { return savedConversations_; }
      set {
        savedConversations_ = value;
      }
    }

    /// <summary>Field number for the "sno_traits" field.</summary>
    public const int SnoTraitsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_snoTraits_codec
        = pb::FieldCodec.ForSFixed32(58);
    private readonly pbc::RepeatedField<int> snoTraits_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SnoTraits {
      get { return snoTraits_; }
    }

    /// <summary>Field number for the "save_point" field.</summary>
    public const int SavePointFieldNumber = 8;
    private global::D3.Hero.SavePointData_Proto savePoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.SavePointData_Proto SavePoint {
      get { return savePoint_; }
      set {
        savePoint_ = value;
      }
    }

    /// <summary>Field number for the "gbid_potion_button" field.</summary>
    public const int GbidPotionButtonFieldNumber = 9;
    private int gbidPotionButton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GbidPotionButton {
      get { return gbidPotionButton_; }
      set {
        gbidPotionButton_ = value;
      }
    }

    /// <summary>Field number for the "active_skills" field.</summary>
    public const int ActiveSkillsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::D3.Hero.SkillWithRune> _repeated_activeSkills_codec
        = pb::FieldCodec.ForMessage(82, global::D3.Hero.SkillWithRune.Parser);
    private readonly pbc::RepeatedField<global::D3.Hero.SkillWithRune> activeSkills_ = new pbc::RepeatedField<global::D3.Hero.SkillWithRune>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Hero.SkillWithRune> ActiveSkills {
      get { return activeSkills_; }
    }

    /// <summary>Field number for the "skill_slot_ever_assigned" field.</summary>
    public const int SkillSlotEverAssignedFieldNumber = 11;
    private pb::ByteString skillSlotEverAssigned_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SkillSlotEverAssigned {
      get { return skillSlotEverAssigned_; }
      set {
        skillSlotEverAssigned_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skill_version" field.</summary>
    public const int SkillVersionFieldNumber = 12;
    private uint skillVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillVersion {
      get { return skillVersion_; }
      set {
        skillVersion_ = value;
      }
    }

    /// <summary>Field number for the "boss_kill_flags" field.</summary>
    public const int BossKillFlagsFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_bossKillFlags_codec
        = pb::FieldCodec.ForUInt32(106);
    private readonly pbc::RepeatedField<uint> bossKillFlags_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BossKillFlags {
      get { return bossKillFlags_; }
    }

    /// <summary>Field number for the "event_flags" field.</summary>
    public const int EventFlagsFieldNumber = 14;
    private uint eventFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EventFlags {
      get { return eventFlags_; }
      set {
        eventFlags_ = value;
      }
    }

    /// <summary>Field number for the "skill_kit_version" field.</summary>
    public const int SkillKitVersionFieldNumber = 15;
    private uint skillKitVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillKitVersion {
      get { return skillKitVersion_; }
      set {
        skillKitVersion_ = value;
      }
    }

    /// <summary>Field number for the "potion_button_item" field.</summary>
    public const int PotionButtonItemFieldNumber = 16;
    private global::D3.Hero.SavedItemLink potionButtonItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.SavedItemLink PotionButtonItem {
      get { return potionButtonItem_; }
      set {
        potionButtonItem_ = value;
      }
    }

    /// <summary>Field number for the "main_quest_handicap_snapshot" field.</summary>
    public const int MainQuestHandicapSnapshotFieldNumber = 17;
    private int mainQuestHandicapSnapshot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainQuestHandicapSnapshot {
      get { return mainQuestHandicapSnapshot_; }
      set {
        mainQuestHandicapSnapshot_ = value;
      }
    }

    /// <summary>Field number for the "gbid_legendary_powers" field.</summary>
    public const int GbidLegendaryPowersFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_gbidLegendaryPowers_codec
        = pb::FieldCodec.ForSFixed32(146);
    private readonly pbc::RepeatedField<int> gbidLegendaryPowers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GbidLegendaryPowers {
      get { return gbidLegendaryPowers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SavedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SavedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimePlayed != other.TimePlayed) return false;
      if (ActivatedWaypoints != other.ActivatedWaypoints) return false;
      if (!object.Equals(HirelingSavedData, other.HirelingSavedData)) return false;
      if (LastLevelTime != other.LastLevelTime) return false;
      if (!object.Equals(LearnedLore, other.LearnedLore)) return false;
      if (!object.Equals(SavedConversations, other.SavedConversations)) return false;
      if(!snoTraits_.Equals(other.snoTraits_)) return false;
      if (!object.Equals(SavePoint, other.SavePoint)) return false;
      if (GbidPotionButton != other.GbidPotionButton) return false;
      if(!activeSkills_.Equals(other.activeSkills_)) return false;
      if (SkillSlotEverAssigned != other.SkillSlotEverAssigned) return false;
      if (SkillVersion != other.SkillVersion) return false;
      if(!bossKillFlags_.Equals(other.bossKillFlags_)) return false;
      if (EventFlags != other.EventFlags) return false;
      if (SkillKitVersion != other.SkillKitVersion) return false;
      if (!object.Equals(PotionButtonItem, other.PotionButtonItem)) return false;
      if (MainQuestHandicapSnapshot != other.MainQuestHandicapSnapshot) return false;
      if(!gbidLegendaryPowers_.Equals(other.gbidLegendaryPowers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimePlayed != 0) hash ^= TimePlayed.GetHashCode();
      if (ActivatedWaypoints != 0) hash ^= ActivatedWaypoints.GetHashCode();
      if (hirelingSavedData_ != null) hash ^= HirelingSavedData.GetHashCode();
      if (LastLevelTime != 0) hash ^= LastLevelTime.GetHashCode();
      if (learnedLore_ != null) hash ^= LearnedLore.GetHashCode();
      if (savedConversations_ != null) hash ^= SavedConversations.GetHashCode();
      hash ^= snoTraits_.GetHashCode();
      if (savePoint_ != null) hash ^= SavePoint.GetHashCode();
      if (GbidPotionButton != 0) hash ^= GbidPotionButton.GetHashCode();
      hash ^= activeSkills_.GetHashCode();
      if (SkillSlotEverAssigned.Length != 0) hash ^= SkillSlotEverAssigned.GetHashCode();
      if (SkillVersion != 0) hash ^= SkillVersion.GetHashCode();
      hash ^= bossKillFlags_.GetHashCode();
      if (EventFlags != 0) hash ^= EventFlags.GetHashCode();
      if (SkillKitVersion != 0) hash ^= SkillKitVersion.GetHashCode();
      if (potionButtonItem_ != null) hash ^= PotionButtonItem.GetHashCode();
      if (MainQuestHandicapSnapshot != 0) hash ^= MainQuestHandicapSnapshot.GetHashCode();
      hash ^= gbidLegendaryPowers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimePlayed != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimePlayed);
      }
      if (ActivatedWaypoints != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivatedWaypoints);
      }
      if (hirelingSavedData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HirelingSavedData);
      }
      if (LastLevelTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LastLevelTime);
      }
      if (learnedLore_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LearnedLore);
      }
      if (savedConversations_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SavedConversations);
      }
      snoTraits_.WriteTo(output, _repeated_snoTraits_codec);
      if (savePoint_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(SavePoint);
      }
      if (GbidPotionButton != 0) {
        output.WriteRawTag(77);
        output.WriteSFixed32(GbidPotionButton);
      }
      activeSkills_.WriteTo(output, _repeated_activeSkills_codec);
      if (SkillSlotEverAssigned.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(SkillSlotEverAssigned);
      }
      if (SkillVersion != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(SkillVersion);
      }
      bossKillFlags_.WriteTo(output, _repeated_bossKillFlags_codec);
      if (EventFlags != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(EventFlags);
      }
      if (SkillKitVersion != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(SkillKitVersion);
      }
      if (potionButtonItem_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(PotionButtonItem);
      }
      if (MainQuestHandicapSnapshot != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MainQuestHandicapSnapshot);
      }
      gbidLegendaryPowers_.WriteTo(output, _repeated_gbidLegendaryPowers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimePlayed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimePlayed);
      }
      if (ActivatedWaypoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivatedWaypoints);
      }
      if (hirelingSavedData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HirelingSavedData);
      }
      if (LastLevelTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastLevelTime);
      }
      if (learnedLore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LearnedLore);
      }
      if (savedConversations_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SavedConversations);
      }
      size += snoTraits_.CalculateSize(_repeated_snoTraits_codec);
      if (savePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SavePoint);
      }
      if (GbidPotionButton != 0) {
        size += 1 + 4;
      }
      size += activeSkills_.CalculateSize(_repeated_activeSkills_codec);
      if (SkillSlotEverAssigned.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SkillSlotEverAssigned);
      }
      if (SkillVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillVersion);
      }
      size += bossKillFlags_.CalculateSize(_repeated_bossKillFlags_codec);
      if (EventFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EventFlags);
      }
      if (SkillKitVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillKitVersion);
      }
      if (potionButtonItem_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PotionButtonItem);
      }
      if (MainQuestHandicapSnapshot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MainQuestHandicapSnapshot);
      }
      size += gbidLegendaryPowers_.CalculateSize(_repeated_gbidLegendaryPowers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SavedData other) {
      if (other == null) {
        return;
      }
      if (other.TimePlayed != 0) {
        TimePlayed = other.TimePlayed;
      }
      if (other.ActivatedWaypoints != 0) {
        ActivatedWaypoints = other.ActivatedWaypoints;
      }
      if (other.hirelingSavedData_ != null) {
        if (hirelingSavedData_ == null) {
          hirelingSavedData_ = new global::D3.Hireling.SavedData();
        }
        HirelingSavedData.MergeFrom(other.HirelingSavedData);
      }
      if (other.LastLevelTime != 0) {
        LastLevelTime = other.LastLevelTime;
      }
      if (other.learnedLore_ != null) {
        if (learnedLore_ == null) {
          learnedLore_ = new global::D3.GameBalance.BitPackedGbidArray();
        }
        LearnedLore.MergeFrom(other.LearnedLore);
      }
      if (other.savedConversations_ != null) {
        if (savedConversations_ == null) {
          savedConversations_ = new global::D3.Hero.SavedConversations();
        }
        SavedConversations.MergeFrom(other.SavedConversations);
      }
      snoTraits_.Add(other.snoTraits_);
      if (other.savePoint_ != null) {
        if (savePoint_ == null) {
          savePoint_ = new global::D3.Hero.SavePointData_Proto();
        }
        SavePoint.MergeFrom(other.SavePoint);
      }
      if (other.GbidPotionButton != 0) {
        GbidPotionButton = other.GbidPotionButton;
      }
      activeSkills_.Add(other.activeSkills_);
      if (other.SkillSlotEverAssigned.Length != 0) {
        SkillSlotEverAssigned = other.SkillSlotEverAssigned;
      }
      if (other.SkillVersion != 0) {
        SkillVersion = other.SkillVersion;
      }
      bossKillFlags_.Add(other.bossKillFlags_);
      if (other.EventFlags != 0) {
        EventFlags = other.EventFlags;
      }
      if (other.SkillKitVersion != 0) {
        SkillKitVersion = other.SkillKitVersion;
      }
      if (other.potionButtonItem_ != null) {
        if (potionButtonItem_ == null) {
          potionButtonItem_ = new global::D3.Hero.SavedItemLink();
        }
        PotionButtonItem.MergeFrom(other.PotionButtonItem);
      }
      if (other.MainQuestHandicapSnapshot != 0) {
        MainQuestHandicapSnapshot = other.MainQuestHandicapSnapshot;
      }
      gbidLegendaryPowers_.Add(other.gbidLegendaryPowers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimePlayed = input.ReadUInt32();
            break;
          }
          case 16: {
            ActivatedWaypoints = input.ReadUInt32();
            break;
          }
          case 26: {
            if (hirelingSavedData_ == null) {
              hirelingSavedData_ = new global::D3.Hireling.SavedData();
            }
            input.ReadMessage(hirelingSavedData_);
            break;
          }
          case 32: {
            LastLevelTime = input.ReadUInt32();
            break;
          }
          case 42: {
            if (learnedLore_ == null) {
              learnedLore_ = new global::D3.GameBalance.BitPackedGbidArray();
            }
            input.ReadMessage(learnedLore_);
            break;
          }
          case 50: {
            if (savedConversations_ == null) {
              savedConversations_ = new global::D3.Hero.SavedConversations();
            }
            input.ReadMessage(savedConversations_);
            break;
          }
          case 58:
          case 61: {
            snoTraits_.AddEntriesFrom(input, _repeated_snoTraits_codec);
            break;
          }
          case 66: {
            if (savePoint_ == null) {
              savePoint_ = new global::D3.Hero.SavePointData_Proto();
            }
            input.ReadMessage(savePoint_);
            break;
          }
          case 77: {
            GbidPotionButton = input.ReadSFixed32();
            break;
          }
          case 82: {
            activeSkills_.AddEntriesFrom(input, _repeated_activeSkills_codec);
            break;
          }
          case 90: {
            SkillSlotEverAssigned = input.ReadBytes();
            break;
          }
          case 96: {
            SkillVersion = input.ReadUInt32();
            break;
          }
          case 106:
          case 104: {
            bossKillFlags_.AddEntriesFrom(input, _repeated_bossKillFlags_codec);
            break;
          }
          case 112: {
            EventFlags = input.ReadUInt32();
            break;
          }
          case 120: {
            SkillKitVersion = input.ReadUInt32();
            break;
          }
          case 130: {
            if (potionButtonItem_ == null) {
              potionButtonItem_ = new global::D3.Hero.SavedItemLink();
            }
            input.ReadMessage(potionButtonItem_);
            break;
          }
          case 136: {
            MainQuestHandicapSnapshot = input.ReadInt32();
            break;
          }
          case 146:
          case 149: {
            gbidLegendaryPowers_.AddEntriesFrom(input, _repeated_gbidLegendaryPowers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SavedDefinition : pb::IMessage<SavedDefinition> {
    private static readonly pb::MessageParser<SavedDefinition> _parser = new pb::MessageParser<SavedDefinition>(() => new SavedDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SavedDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedDefinition(SavedDefinition other) : this() {
      version_ = other.version_;
      digest_ = other.digest_ != null ? other.digest_.Clone() : null;
      savedAttributes_ = other.savedAttributes_ != null ? other.savedAttributes_.Clone() : null;
      savedData_ = other.savedData_ != null ? other.savedData_.Clone() : null;
      savedQuest_ = other.savedQuest_.Clone();
      items_ = other.items_ != null ? other.items_.Clone() : null;
      questRewardHistory_ = other.questRewardHistory_.Clone();
      acceptedLicenseBits_ = other.acceptedLicenseBits_;
      consoleData_ = other.consoleData_ != null ? other.consoleData_.Clone() : null;
      equipmentManagerData_ = other.equipmentManagerData_ != null ? other.equipmentManagerData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedDefinition Clone() {
      return new SavedDefinition(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private uint version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "digest" field.</summary>
    public const int DigestFieldNumber = 2;
    private global::D3.Hero.Digest digest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.Digest Digest {
      get { return digest_; }
      set {
        digest_ = value;
      }
    }

    /// <summary>Field number for the "saved_attributes" field.</summary>
    public const int SavedAttributesFieldNumber = 3;
    private global::D3.AttributeSerializer.SavedAttributes savedAttributes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.AttributeSerializer.SavedAttributes SavedAttributes {
      get { return savedAttributes_; }
      set {
        savedAttributes_ = value;
      }
    }

    /// <summary>Field number for the "saved_data" field.</summary>
    public const int SavedDataFieldNumber = 4;
    private global::D3.Hero.SavedData savedData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.SavedData SavedData {
      get { return savedData_; }
      set {
        savedData_ = value;
      }
    }

    /// <summary>Field number for the "saved_quest" field.</summary>
    public const int SavedQuestFieldNumber = 5;
    private static readonly pb::FieldCodec<global::D3.Hero.SavedQuest> _repeated_savedQuest_codec
        = pb::FieldCodec.ForMessage(42, global::D3.Hero.SavedQuest.Parser);
    private readonly pbc::RepeatedField<global::D3.Hero.SavedQuest> savedQuest_ = new pbc::RepeatedField<global::D3.Hero.SavedQuest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Hero.SavedQuest> SavedQuest {
      get { return savedQuest_; }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 6;
    private global::D3.Items.ItemList items_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.ItemList Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    /// <summary>Field number for the "quest_reward_history" field.</summary>
    public const int QuestRewardHistoryFieldNumber = 7;
    private static readonly pb::FieldCodec<global::D3.Hero.QuestRewardHistoryEntry> _repeated_questRewardHistory_codec
        = pb::FieldCodec.ForMessage(58, global::D3.Hero.QuestRewardHistoryEntry.Parser);
    private readonly pbc::RepeatedField<global::D3.Hero.QuestRewardHistoryEntry> questRewardHistory_ = new pbc::RepeatedField<global::D3.Hero.QuestRewardHistoryEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Hero.QuestRewardHistoryEntry> QuestRewardHistory {
      get { return questRewardHistory_; }
    }

    /// <summary>Field number for the "accepted_license_bits" field.</summary>
    public const int AcceptedLicenseBitsFieldNumber = 8;
    private ulong acceptedLicenseBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AcceptedLicenseBits {
      get { return acceptedLicenseBits_; }
      set {
        acceptedLicenseBits_ = value;
      }
    }

    /// <summary>Field number for the "console_data" field.</summary>
    public const int ConsoleDataFieldNumber = 10;
    private global::D3.Hero.ConsoleData consoleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.ConsoleData ConsoleData {
      get { return consoleData_; }
      set {
        consoleData_ = value;
      }
    }

    /// <summary>Field number for the "equipment_manager_data" field.</summary>
    public const int EquipmentManagerDataFieldNumber = 11;
    private global::D3.Hero.EquipmentManagerData equipmentManagerData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.EquipmentManagerData EquipmentManagerData {
      get { return equipmentManagerData_; }
      set {
        equipmentManagerData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SavedDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SavedDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Digest, other.Digest)) return false;
      if (!object.Equals(SavedAttributes, other.SavedAttributes)) return false;
      if (!object.Equals(SavedData, other.SavedData)) return false;
      if(!savedQuest_.Equals(other.savedQuest_)) return false;
      if (!object.Equals(Items, other.Items)) return false;
      if(!questRewardHistory_.Equals(other.questRewardHistory_)) return false;
      if (AcceptedLicenseBits != other.AcceptedLicenseBits) return false;
      if (!object.Equals(ConsoleData, other.ConsoleData)) return false;
      if (!object.Equals(EquipmentManagerData, other.EquipmentManagerData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (digest_ != null) hash ^= Digest.GetHashCode();
      if (savedAttributes_ != null) hash ^= SavedAttributes.GetHashCode();
      if (savedData_ != null) hash ^= SavedData.GetHashCode();
      hash ^= savedQuest_.GetHashCode();
      if (items_ != null) hash ^= Items.GetHashCode();
      hash ^= questRewardHistory_.GetHashCode();
      if (AcceptedLicenseBits != 0UL) hash ^= AcceptedLicenseBits.GetHashCode();
      if (consoleData_ != null) hash ^= ConsoleData.GetHashCode();
      if (equipmentManagerData_ != null) hash ^= EquipmentManagerData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version);
      }
      if (digest_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Digest);
      }
      if (savedAttributes_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SavedAttributes);
      }
      if (savedData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SavedData);
      }
      savedQuest_.WriteTo(output, _repeated_savedQuest_codec);
      if (items_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Items);
      }
      questRewardHistory_.WriteTo(output, _repeated_questRewardHistory_codec);
      if (AcceptedLicenseBits != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(AcceptedLicenseBits);
      }
      if (consoleData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ConsoleData);
      }
      if (equipmentManagerData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EquipmentManagerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version);
      }
      if (digest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Digest);
      }
      if (savedAttributes_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SavedAttributes);
      }
      if (savedData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SavedData);
      }
      size += savedQuest_.CalculateSize(_repeated_savedQuest_codec);
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      size += questRewardHistory_.CalculateSize(_repeated_questRewardHistory_codec);
      if (AcceptedLicenseBits != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AcceptedLicenseBits);
      }
      if (consoleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsoleData);
      }
      if (equipmentManagerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipmentManagerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SavedDefinition other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.digest_ != null) {
        if (digest_ == null) {
          digest_ = new global::D3.Hero.Digest();
        }
        Digest.MergeFrom(other.Digest);
      }
      if (other.savedAttributes_ != null) {
        if (savedAttributes_ == null) {
          savedAttributes_ = new global::D3.AttributeSerializer.SavedAttributes();
        }
        SavedAttributes.MergeFrom(other.SavedAttributes);
      }
      if (other.savedData_ != null) {
        if (savedData_ == null) {
          savedData_ = new global::D3.Hero.SavedData();
        }
        SavedData.MergeFrom(other.SavedData);
      }
      savedQuest_.Add(other.savedQuest_);
      if (other.items_ != null) {
        if (items_ == null) {
          items_ = new global::D3.Items.ItemList();
        }
        Items.MergeFrom(other.Items);
      }
      questRewardHistory_.Add(other.questRewardHistory_);
      if (other.AcceptedLicenseBits != 0UL) {
        AcceptedLicenseBits = other.AcceptedLicenseBits;
      }
      if (other.consoleData_ != null) {
        if (consoleData_ == null) {
          consoleData_ = new global::D3.Hero.ConsoleData();
        }
        ConsoleData.MergeFrom(other.ConsoleData);
      }
      if (other.equipmentManagerData_ != null) {
        if (equipmentManagerData_ == null) {
          equipmentManagerData_ = new global::D3.Hero.EquipmentManagerData();
        }
        EquipmentManagerData.MergeFrom(other.EquipmentManagerData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadUInt32();
            break;
          }
          case 18: {
            if (digest_ == null) {
              digest_ = new global::D3.Hero.Digest();
            }
            input.ReadMessage(digest_);
            break;
          }
          case 26: {
            if (savedAttributes_ == null) {
              savedAttributes_ = new global::D3.AttributeSerializer.SavedAttributes();
            }
            input.ReadMessage(savedAttributes_);
            break;
          }
          case 34: {
            if (savedData_ == null) {
              savedData_ = new global::D3.Hero.SavedData();
            }
            input.ReadMessage(savedData_);
            break;
          }
          case 42: {
            savedQuest_.AddEntriesFrom(input, _repeated_savedQuest_codec);
            break;
          }
          case 50: {
            if (items_ == null) {
              items_ = new global::D3.Items.ItemList();
            }
            input.ReadMessage(items_);
            break;
          }
          case 58: {
            questRewardHistory_.AddEntriesFrom(input, _repeated_questRewardHistory_codec);
            break;
          }
          case 64: {
            AcceptedLicenseBits = input.ReadUInt64();
            break;
          }
          case 82: {
            if (consoleData_ == null) {
              consoleData_ = new global::D3.Hero.ConsoleData();
            }
            input.ReadMessage(consoleData_);
            break;
          }
          case 90: {
            if (equipmentManagerData_ == null) {
              equipmentManagerData_ = new global::D3.Hero.EquipmentManagerData();
            }
            input.ReadMessage(equipmentManagerData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DigestList : pb::IMessage<DigestList> {
    private static readonly pb::MessageParser<DigestList> _parser = new pb::MessageParser<DigestList>(() => new DigestList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DigestList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigestList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigestList(DigestList other) : this() {
      digests_ = other.digests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DigestList Clone() {
      return new DigestList(this);
    }

    /// <summary>Field number for the "digests" field.</summary>
    public const int DigestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Hero.Digest> _repeated_digests_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Hero.Digest.Parser);
    private readonly pbc::RepeatedField<global::D3.Hero.Digest> digests_ = new pbc::RepeatedField<global::D3.Hero.Digest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Hero.Digest> Digests {
      get { return digests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DigestList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DigestList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!digests_.Equals(other.digests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= digests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      digests_.WriteTo(output, _repeated_digests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += digests_.CalculateSize(_repeated_digests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DigestList other) {
      if (other == null) {
        return;
      }
      digests_.Add(other.digests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            digests_.AddEntriesFrom(input, _repeated_digests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicAttributeList : pb::IMessage<BasicAttributeList> {
    private static readonly pb::MessageParser<BasicAttributeList> _parser = new pb::MessageParser<BasicAttributeList>(() => new BasicAttributeList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicAttributeList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicAttributeList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicAttributeList(BasicAttributeList other) : this() {
      attributes_ = other.attributes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicAttributeList Clone() {
      return new BasicAttributeList(this);
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.AttributeSerializer.SavedAttribute> _repeated_attributes_codec
        = pb::FieldCodec.ForMessage(10, global::D3.AttributeSerializer.SavedAttribute.Parser);
    private readonly pbc::RepeatedField<global::D3.AttributeSerializer.SavedAttribute> attributes_ = new pbc::RepeatedField<global::D3.AttributeSerializer.SavedAttribute>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.AttributeSerializer.SavedAttribute> Attributes {
      get { return attributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicAttributeList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicAttributeList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attributes_.Equals(other.attributes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attributes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attributes_.CalculateSize(_repeated_attributes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicAttributeList other) {
      if (other == null) {
        return;
      }
      attributes_.Add(other.attributes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsoleRandomVendorSeed : pb::IMessage<ConsoleRandomVendorSeed> {
    private static readonly pb::MessageParser<ConsoleRandomVendorSeed> _parser = new pb::MessageParser<ConsoleRandomVendorSeed>(() => new ConsoleRandomVendorSeed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleRandomVendorSeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomVendorSeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomVendorSeed(ConsoleRandomVendorSeed other) : this() {
      itemSlotKey_ = other.itemSlotKey_;
      randomItemSeed_ = other.randomItemSeed_;
      randomItemCarry_ = other.randomItemCarry_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomVendorSeed Clone() {
      return new ConsoleRandomVendorSeed(this);
    }

    /// <summary>Field number for the "item_slot_key" field.</summary>
    public const int ItemSlotKeyFieldNumber = 1;
    private int itemSlotKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSlotKey {
      get { return itemSlotKey_; }
      set {
        itemSlotKey_ = value;
      }
    }

    /// <summary>Field number for the "random_item_seed" field.</summary>
    public const int RandomItemSeedFieldNumber = 2;
    private int randomItemSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomItemSeed {
      get { return randomItemSeed_; }
      set {
        randomItemSeed_ = value;
      }
    }

    /// <summary>Field number for the "random_item_carry" field.</summary>
    public const int RandomItemCarryFieldNumber = 3;
    private int randomItemCarry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomItemCarry {
      get { return randomItemCarry_; }
      set {
        randomItemCarry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleRandomVendorSeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleRandomVendorSeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemSlotKey != other.ItemSlotKey) return false;
      if (RandomItemSeed != other.RandomItemSeed) return false;
      if (RandomItemCarry != other.RandomItemCarry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemSlotKey != 0) hash ^= ItemSlotKey.GetHashCode();
      if (RandomItemSeed != 0) hash ^= RandomItemSeed.GetHashCode();
      if (RandomItemCarry != 0) hash ^= RandomItemCarry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemSlotKey != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(ItemSlotKey);
      }
      if (RandomItemSeed != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(RandomItemSeed);
      }
      if (RandomItemCarry != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(RandomItemCarry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemSlotKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemSlotKey);
      }
      if (RandomItemSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RandomItemSeed);
      }
      if (RandomItemCarry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RandomItemCarry);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleRandomVendorSeed other) {
      if (other == null) {
        return;
      }
      if (other.ItemSlotKey != 0) {
        ItemSlotKey = other.ItemSlotKey;
      }
      if (other.RandomItemSeed != 0) {
        RandomItemSeed = other.RandomItemSeed;
      }
      if (other.RandomItemCarry != 0) {
        RandomItemCarry = other.RandomItemCarry;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemSlotKey = input.ReadSInt32();
            break;
          }
          case 16: {
            RandomItemSeed = input.ReadSInt32();
            break;
          }
          case 24: {
            RandomItemCarry = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsoleRandomVendorSeedList : pb::IMessage<ConsoleRandomVendorSeedList> {
    private static readonly pb::MessageParser<ConsoleRandomVendorSeedList> _parser = new pb::MessageParser<ConsoleRandomVendorSeedList>(() => new ConsoleRandomVendorSeedList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleRandomVendorSeedList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomVendorSeedList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomVendorSeedList(ConsoleRandomVendorSeedList other) : this() {
      consoleRandomVendorSeed_ = other.consoleRandomVendorSeed_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleRandomVendorSeedList Clone() {
      return new ConsoleRandomVendorSeedList(this);
    }

    /// <summary>Field number for the "console_random_vendor_seed" field.</summary>
    public const int ConsoleRandomVendorSeedFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Hero.ConsoleRandomVendorSeed> _repeated_consoleRandomVendorSeed_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Hero.ConsoleRandomVendorSeed.Parser);
    private readonly pbc::RepeatedField<global::D3.Hero.ConsoleRandomVendorSeed> consoleRandomVendorSeed_ = new pbc::RepeatedField<global::D3.Hero.ConsoleRandomVendorSeed>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Hero.ConsoleRandomVendorSeed> ConsoleRandomVendorSeed {
      get { return consoleRandomVendorSeed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleRandomVendorSeedList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleRandomVendorSeedList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!consoleRandomVendorSeed_.Equals(other.consoleRandomVendorSeed_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= consoleRandomVendorSeed_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      consoleRandomVendorSeed_.WriteTo(output, _repeated_consoleRandomVendorSeed_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += consoleRandomVendorSeed_.CalculateSize(_repeated_consoleRandomVendorSeed_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleRandomVendorSeedList other) {
      if (other == null) {
        return;
      }
      consoleRandomVendorSeed_.Add(other.consoleRandomVendorSeed_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            consoleRandomVendorSeed_.AddEntriesFrom(input, _repeated_consoleRandomVendorSeed_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConsoleData : pb::IMessage<ConsoleData> {
    private static readonly pb::MessageParser<ConsoleData> _parser = new pb::MessageParser<ConsoleData>(() => new ConsoleData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsoleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Hero.HeroReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleData(ConsoleData other) : this() {
      heroProfile_ = other.heroProfile_ != null ? other.heroProfile_.Clone() : null;
      lastPlayedHandicap_ = other.lastPlayedHandicap_;
      killerName_ = other.killerName_;
      lastPlayedAdventureModeAct_ = other.lastPlayedAdventureModeAct_;
      randomItemVendorSeedList_ = other.randomItemVendorSeedList_ != null ? other.randomItemVendorSeedList_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsoleData Clone() {
      return new ConsoleData(this);
    }

    /// <summary>Field number for the "hero_profile" field.</summary>
    public const int HeroProfileFieldNumber = 1;
    private global::D3.Profile.HeroProfile heroProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.HeroProfile HeroProfile {
      get { return heroProfile_; }
      set {
        heroProfile_ = value;
      }
    }

    /// <summary>Field number for the "last_played_handicap" field.</summary>
    public const int LastPlayedHandicapFieldNumber = 2;
    private int lastPlayedHandicap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedHandicap {
      get { return lastPlayedHandicap_; }
      set {
        lastPlayedHandicap_ = value;
      }
    }

    /// <summary>Field number for the "killer_name" field.</summary>
    public const int KillerNameFieldNumber = 3;
    private string killerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KillerName {
      get { return killerName_; }
      set {
        killerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_played_adventure_mode_act" field.</summary>
    public const int LastPlayedAdventureModeActFieldNumber = 4;
    private int lastPlayedAdventureModeAct_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastPlayedAdventureModeAct {
      get { return lastPlayedAdventureModeAct_; }
      set {
        lastPlayedAdventureModeAct_ = value;
      }
    }

    /// <summary>Field number for the "random_item_vendor_seed_list" field.</summary>
    public const int RandomItemVendorSeedListFieldNumber = 5;
    private global::D3.Hero.ConsoleRandomVendorSeedList randomItemVendorSeedList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.ConsoleRandomVendorSeedList RandomItemVendorSeedList {
      get { return randomItemVendorSeedList_; }
      set {
        randomItemVendorSeedList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsoleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsoleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HeroProfile, other.HeroProfile)) return false;
      if (LastPlayedHandicap != other.LastPlayedHandicap) return false;
      if (KillerName != other.KillerName) return false;
      if (LastPlayedAdventureModeAct != other.LastPlayedAdventureModeAct) return false;
      if (!object.Equals(RandomItemVendorSeedList, other.RandomItemVendorSeedList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (heroProfile_ != null) hash ^= HeroProfile.GetHashCode();
      if (LastPlayedHandicap != 0) hash ^= LastPlayedHandicap.GetHashCode();
      if (KillerName.Length != 0) hash ^= KillerName.GetHashCode();
      if (LastPlayedAdventureModeAct != 0) hash ^= LastPlayedAdventureModeAct.GetHashCode();
      if (randomItemVendorSeedList_ != null) hash ^= RandomItemVendorSeedList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (heroProfile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HeroProfile);
      }
      if (LastPlayedHandicap != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LastPlayedHandicap);
      }
      if (KillerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(KillerName);
      }
      if (LastPlayedAdventureModeAct != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(LastPlayedAdventureModeAct);
      }
      if (randomItemVendorSeedList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RandomItemVendorSeedList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (heroProfile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroProfile);
      }
      if (LastPlayedHandicap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedHandicap);
      }
      if (KillerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KillerName);
      }
      if (LastPlayedAdventureModeAct != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LastPlayedAdventureModeAct);
      }
      if (randomItemVendorSeedList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomItemVendorSeedList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsoleData other) {
      if (other == null) {
        return;
      }
      if (other.heroProfile_ != null) {
        if (heroProfile_ == null) {
          heroProfile_ = new global::D3.Profile.HeroProfile();
        }
        HeroProfile.MergeFrom(other.HeroProfile);
      }
      if (other.LastPlayedHandicap != 0) {
        LastPlayedHandicap = other.LastPlayedHandicap;
      }
      if (other.KillerName.Length != 0) {
        KillerName = other.KillerName;
      }
      if (other.LastPlayedAdventureModeAct != 0) {
        LastPlayedAdventureModeAct = other.LastPlayedAdventureModeAct;
      }
      if (other.randomItemVendorSeedList_ != null) {
        if (randomItemVendorSeedList_ == null) {
          randomItemVendorSeedList_ = new global::D3.Hero.ConsoleRandomVendorSeedList();
        }
        RandomItemVendorSeedList.MergeFrom(other.RandomItemVendorSeedList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (heroProfile_ == null) {
              heroProfile_ = new global::D3.Profile.HeroProfile();
            }
            input.ReadMessage(heroProfile_);
            break;
          }
          case 16: {
            LastPlayedHandicap = input.ReadSInt32();
            break;
          }
          case 26: {
            KillerName = input.ReadString();
            break;
          }
          case 32: {
            LastPlayedAdventureModeAct = input.ReadSInt32();
            break;
          }
          case 42: {
            if (randomItemVendorSeedList_ == null) {
              randomItemVendorSeedList_ = new global::D3.Hero.ConsoleRandomVendorSeedList();
            }
            input.ReadMessage(randomItemVendorSeedList_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
