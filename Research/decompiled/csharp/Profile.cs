// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Profile.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D3.Profile {

  /// <summary>Holder for reflection information generated from Profile.proto</summary>
  public static partial class ProfileReflection {

    #region Descriptor
    /// <summary>File descriptor for Profile.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProfileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Qcm9maWxlLnByb3RvEgpEMy5Qcm9maWxlGgtJdGVtcy5wcm90bxoTT25s",
            "aW5lU2VydmljZS5wcm90bxoQSGVyb0NvbW1vbi5wcm90byJuCglDbGFzc0lu",
            "Zm8SEAoIcGxheXRpbWUYASABKAQSFQoNaGlnaGVzdF9sZXZlbBgCIAEoDRIl",
            "Ch1kZXByZWNhdGVkX2hpZ2hlc3RfZGlmZmljdWx0eRgDIAEoDRIRCglwdnBf",
            "Z2FtZXMYBCABKA0iMQoNU2tpbGxXaXRoUnVuZRINCgVza2lsbBgBIAEoDxIR",
            "CglydW5lX3R5cGUYAiABKBEiOwoPU2tpbGxzV2l0aFJ1bmVzEigKBXJ1bmVz",
            "GAEgAygLMhkuRDMuUHJvZmlsZS5Ta2lsbFdpdGhSdW5lIiMKDVBhc3NpdmVT",
            "a2lsbHMSEgoKc25vX3RyYWl0cxgBIAMoDyI2ChZQYXJhZ29uUG9pbnRBbGxv",
            "Y2F0aW9uEgwKBHNsb3QYASABKAcSDgoGcG9pbnRzGAIgASgNIk8KF1BhcmFn",
            "b25Qb2ludEFsbG9jYXRpb25zEjQKCGNhdGVnb3J5GAEgAygLMiIuRDMuUHJv",
            "ZmlsZS5QYXJhZ29uUG9pbnRBbGxvY2F0aW9uIjAKD0xlZ2VuZGFyeVBvd2Vy",
            "cxIdChVnYmlkX2xlZ2VuZGFyeV9wb3dlcnMYASADKA8iSQoKS2lsbGVySW5m",
            "bxISCgpzbm9fa2lsbGVyGAEgASgFEg4KBnJhcml0eRgCIAEoDRIXCg9yYXJl",
            "X25hbWVfZ2JpZHMYAyADKAUi5AcKC0hlcm9Qcm9maWxlEhcKD21vbnN0ZXJz",
            "X2tpbGxlZBgBIAEoBBIVCg1lbGl0ZXNfa2lsbGVkGAIgASgEEhYKDmdvbGRf",
            "Y29sbGVjdGVkGAMgASgEEhUKDWhpZ2hlc3RfbGV2ZWwYBCABKA0SJQodZGVw",
            "cmVjYXRlZF9oaWdoZXN0X2RpZmZpY3VsdHkYBSABKA0SEwoLY3JlYXRlX3Rp",
            "bWUYBiABKA0SEAoIaGFyZGNvcmUYByABKAgSEAoIc3RyZW5ndGgYCCABKA0S",
            "EQoJZGV4dGVyaXR5GAkgASgNEhQKDGludGVsbGlnZW5jZRgKIAEoDRIQCgh2",
            "aXRhbGl0eRgLIAEoDRIYChBkZXByZWNhdGVkX2FybW9yGAwgASgNEgsKA2Rw",
            "cxgNIAEoAhIVCg1yZXNpc3RfYXJjYW5lGA4gASgNEhMKC3Jlc2lzdF9maXJl",
            "GA8gASgNEhgKEHJlc2lzdF9saWdodG5pbmcYECABKA0SFQoNcmVzaXN0X3Bv",
            "aXNvbhgRIAEoDRITCgtyZXNpc3RfY29sZBgSIAEoDRIlCgllcXVpcG1lbnQY",
            "EyABKAsyEi5EMy5JdGVtcy5JdGVtTGlzdBI2ChFzbm9fYWN0aXZlX3NraWxs",
            "cxgUIAEoCzIbLkQzLlByb2ZpbGUuU2tpbGxzV2l0aFJ1bmVzEi0KCnNub190",
            "cmFpdHMYFSABKAsyGS5EMy5Qcm9maWxlLlBhc3NpdmVTa2lsbHMSEgoKZGVh",
            "dGhfdGltZRgWIAEoDRIrCgtraWxsZXJfaW5mbxgXIAEoCzIWLkQzLlByb2Zp",
            "bGUuS2lsbGVySW5mbxIZChFzbm9fa2lsbF9sb2NhdGlvbhgYIAEoDRIrCgdo",
            "ZXJvX2lkGBsgASgLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZBIiChpk",
            "ZXByZWNhdGVkX2RhbWFnZV9pbmNyZWFzZRgcIAEoAhIeChZkZXByZWNhdGVk",
            "X2NyaXRfY2hhbmNlGB0gASgCEiMKG2RlcHJlY2F0ZWRfZGFtYWdlX3JlZHVj",
            "dGlvbhgeIAEoAhIXCg9kZXByZWNhdGVkX2xpZmUYHyABKA0SEQoJcHZwX2ds",
            "b3J5GCMgASgNEhAKCHB2cF93aW5zGCQgASgNEhUKDXB2cF90YWtlZG93bnMY",
            "JSABKA0SEgoKcHZwX2RhbWFnZRgmIAEoBBIRCgl0b3VnaG5lc3MYJyABKAIS",
            "DwoHaGVhbGluZxgoIAEoAhI1ChBsZWdlbmRhcnlfcG93ZXJzGCkgASgLMhsu",
            "RDMuUHJvZmlsZS5MZWdlbmRhcnlQb3dlcnMiOQoPSGVyb1Byb2ZpbGVMaXN0",
            "EiYKBWhlcm9zGAEgAygLMhcuRDMuUHJvZmlsZS5IZXJvUHJvZmlsZSKvAQoP",
            "SGVyb01pbmlQcm9maWxlEg8KB2hlcm9faWQYASABKA0SEQoJaGVyb19uYW1l",
            "GAIgASgJEhcKD2hlcm9fZ2JpZF9jbGFzcxgDIAEoDxISCgpoZXJvX2ZsYWdz",
            "GAQgASgNEhIKCmhlcm9fbGV2ZWwYBSABKA0SNwoVaGVyb192aXN1YWxfZXF1",
            "aXBtZW50GAYgASgLMhguRDMuSGVyby5WaXN1YWxFcXVpcG1lbnQi0QkKDkFj",
            "Y291bnRQcm9maWxlEiUKHWRlcHJlY2F0ZWRfaGlnaGVzdF9kaWZmaWN1bHR5",
            "GAEgASgNEiEKGWhpZ2hlc3RfYm9zc19kaWZmaWN1bHR5XzEYAiABKA0SIQoZ",
            "aGlnaGVzdF9ib3NzX2RpZmZpY3VsdHlfMhgDIAEoDRIhChloaWdoZXN0X2Jv",
            "c3NfZGlmZmljdWx0eV8zGAQgASgNEiEKGWhpZ2hlc3RfYm9zc19kaWZmaWN1",
            "bHR5XzQYBSABKA0SFwoPbW9uc3RlcnNfa2lsbGVkGAYgASgEEhUKDWVsaXRl",
            "c19raWxsZWQYByABKAQSFgoOZ29sZF9jb2xsZWN0ZWQYCCABKAQSHgoWaGln",
            "aGVzdF9oYXJkY29yZV9sZXZlbBgJIAEoBBIgChhoYXJkY29yZV9tb25zdGVy",
            "c19raWxsZWQYCiABKAQSLgoPY2xhc3NfYmFyYmFyaWFuGAsgASgLMhUuRDMu",
            "UHJvZmlsZS5DbGFzc0luZm8SMAoRY2xhc3NfZGVtb25odW50ZXIYDCABKAsy",
            "FS5EMy5Qcm9maWxlLkNsYXNzSW5mbxIpCgpjbGFzc19tb25rGA0gASgLMhUu",
            "RDMuUHJvZmlsZS5DbGFzc0luZm8SMAoRY2xhc3Nfd2l0Y2hkb2N0b3IYDiAB",
            "KAsyFS5EMy5Qcm9maWxlLkNsYXNzSW5mbxIrCgxjbGFzc193aXphcmQYDyAB",
            "KAsyFS5EMy5Qcm9maWxlLkNsYXNzSW5mbxItCg5jbGFzc19jcnVzYWRlchgQ",
            "IAEoCzIVLkQzLlByb2ZpbGUuQ2xhc3NJbmZvEjAKEWNsYXNzX25lY3JvbWFu",
            "Y2VyGBEgASgLMhUuRDMuUHJvZmlsZS5DbGFzc0luZm8SEAoIcHZwX3dpbnMY",
            "EiABKA0SFQoNcHZwX3Rha2Vkb3ducxgTIAEoDRISCgpwdnBfZGFtYWdlGBQg",
            "ASgEEhEKCXNlYXNvbl9pZBgVIAEoDRIhChloaWdoZXN0X2Jvc3NfZGlmZmlj",
            "dWx0eV81GBYgASgNEiwKJGRlcHJlY2F0ZWRfYmVzdF9sYWRkZXJfcGFyYWdv",
            "bl9sZXZlbBgXIAEoDRIVCg1wYXJhZ29uX2xldmVsGBggASgNEhcKD3BhcmFn",
            "b25feHBfbmV4dBgZIAEoBBIPCgdzZWFzb25zGBogAygNEh4KFnBhcmFnb25f",
            "bGV2ZWxfaGFyZGNvcmUYGyABKA0SIAoYcGFyYWdvbl94cF9uZXh0X2hhcmRj",
            "b3JlGBwgASgEEhoKEmJvdW50aWVzX2NvbXBsZXRlZBgdIAEoDRIbChNsb290",
            "X3J1bnNfY29tcGxldGVkGB4gASgNEhUKDWhpZ2hlc3RfbGV2ZWwYHyABKAQS",
            "HgoWYmxvb2Rfc2hhcmRzX2NvbGxlY3RlZBggIAEoBBIrCgZoZXJvZXMYIiAD",
            "KAsyGy5EMy5Qcm9maWxlLkhlcm9NaW5pUHJvZmlsZRIkChxsZWFkZXJib2Fy",
            "ZF9lcmFzX3dpdGhfc2NvcmVzGCMgAygNEhkKEW51bV9mYWxsZW5faGVyb2Vz",
            "GCQgASgNEhsKE3NlYXNvbl9qb3VybmV5X3JhbmsYJSABKAQSFgoOZGVsZXRl",
            "ZF9oZXJvZXMYJiADKA0iSwoOUHZwTWF0Y2hQbGF5ZXISEgoKYWNjb3VudF9p",
            "ZBgBIAEoBBISCgpnYmlkX2NsYXNzGAIgASgNEhEKCWlzX2ZlbWFsZRgDIAEo",
            "CCJpCg9QdnBNYXRjaFBsYXllcnMSKgoGdGVhbV8wGAEgAygLMhouRDMuUHJv",
            "ZmlsZS5QdnBNYXRjaFBsYXllchIqCgZ0ZWFtXzEYAiADKAsyGi5EMy5Qcm9m",
            "aWxlLlB2cE1hdGNoUGxheWVyIqoBCghQdnBNYXRjaBINCgVhcmVuYRgBIAEo",
            "DRIsCgdwbGF5ZXJzGAIgASgLMhsuRDMuUHJvZmlsZS5QdnBNYXRjaFBsYXll",
            "cnMSFAoMc2NvcmVfdGVhbV8wGAMgASgNEhQKDHNjb3JlX3RlYW1fMRgEIAEo",
            "DRIRCglwbGF5X3RpbWUYBSABKA0SDwoHaGVyb19pZBgGIAEoDRIRCglnYW1l",
            "X21vZGUYByABKA0iNQoMUHZwTWF0Y2hMaXN0EiUKB21hdGNoZXMYASADKAsy",
            "FC5EMy5Qcm9maWxlLlB2cE1hdGNoIqkBCgdQdnBUZWFtEg8KB3RlYW1faWQY",
            "ASABKAQSDgoGcmF0aW5nGAIgASgCEhcKD3JhdGluZ192YXJpYW5jZRgDIAEo",
            "AhIRCglib290c3RyYXAYBCABKAISFAoMZ2FtZXNfcGxheWVkGAUgASgFEhMK",
            "C2xhc3RfcGxheWVkGAYgASgNEhMKC251bV9tZW1iZXJzGAcgASgFEhEKCWdh",
            "bWVfbW9kZRgIIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D3.Items.ItemsReflection.Descriptor, global::D3.OnlineService.OnlineServiceReflection.Descriptor, global::D3.Hero.HeroCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.ClassInfo), global::D3.Profile.ClassInfo.Parser, new[]{ "Playtime", "HighestLevel", "DeprecatedHighestDifficulty", "PvpGames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.SkillWithRune), global::D3.Profile.SkillWithRune.Parser, new[]{ "Skill", "RuneType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.SkillsWithRunes), global::D3.Profile.SkillsWithRunes.Parser, new[]{ "Runes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.PassiveSkills), global::D3.Profile.PassiveSkills.Parser, new[]{ "SnoTraits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.ParagonPointAllocation), global::D3.Profile.ParagonPointAllocation.Parser, new[]{ "Slot", "Points" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.ParagonPointAllocations), global::D3.Profile.ParagonPointAllocations.Parser, new[]{ "Category" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.LegendaryPowers), global::D3.Profile.LegendaryPowers.Parser, new[]{ "GbidLegendaryPowers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.KillerInfo), global::D3.Profile.KillerInfo.Parser, new[]{ "SnoKiller", "Rarity", "RareNameGbids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.HeroProfile), global::D3.Profile.HeroProfile.Parser, new[]{ "MonstersKilled", "ElitesKilled", "GoldCollected", "HighestLevel", "DeprecatedHighestDifficulty", "CreateTime", "Hardcore", "Strength", "Dexterity", "Intelligence", "Vitality", "DeprecatedArmor", "Dps", "ResistArcane", "ResistFire", "ResistLightning", "ResistPoison", "ResistCold", "Equipment", "SnoActiveSkills", "SnoTraits", "DeathTime", "KillerInfo", "SnoKillLocation", "HeroId", "DeprecatedDamageIncrease", "DeprecatedCritChance", "DeprecatedDamageReduction", "DeprecatedLife", "PvpGlory", "PvpWins", "PvpTakedowns", "PvpDamage", "Toughness", "Healing", "LegendaryPowers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.HeroProfileList), global::D3.Profile.HeroProfileList.Parser, new[]{ "Heros" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.HeroMiniProfile), global::D3.Profile.HeroMiniProfile.Parser, new[]{ "HeroId", "HeroName", "HeroGbidClass", "HeroFlags", "HeroLevel", "HeroVisualEquipment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.AccountProfile), global::D3.Profile.AccountProfile.Parser, new[]{ "DeprecatedHighestDifficulty", "HighestBossDifficulty1", "HighestBossDifficulty2", "HighestBossDifficulty3", "HighestBossDifficulty4", "MonstersKilled", "ElitesKilled", "GoldCollected", "HighestHardcoreLevel", "HardcoreMonstersKilled", "ClassBarbarian", "ClassDemonhunter", "ClassMonk", "ClassWitchdoctor", "ClassWizard", "ClassCrusader", "ClassNecromancer", "PvpWins", "PvpTakedowns", "PvpDamage", "SeasonId", "HighestBossDifficulty5", "DeprecatedBestLadderParagonLevel", "ParagonLevel", "ParagonXpNext", "Seasons", "ParagonLevelHardcore", "ParagonXpNextHardcore", "BountiesCompleted", "LootRunsCompleted", "HighestLevel", "BloodShardsCollected", "Heroes", "LeaderboardErasWithScores", "NumFallenHeroes", "SeasonJourneyRank", "DeletedHeroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.PvpMatchPlayer), global::D3.Profile.PvpMatchPlayer.Parser, new[]{ "AccountId", "GbidClass", "IsFemale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.PvpMatchPlayers), global::D3.Profile.PvpMatchPlayers.Parser, new[]{ "Team0", "Team1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.PvpMatch), global::D3.Profile.PvpMatch.Parser, new[]{ "Arena", "Players", "ScoreTeam0", "ScoreTeam1", "PlayTime", "HeroId", "GameMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.PvpMatchList), global::D3.Profile.PvpMatchList.Parser, new[]{ "Matches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Profile.PvpTeam), global::D3.Profile.PvpTeam.Parser, new[]{ "TeamId", "Rating", "RatingVariance", "Bootstrap", "GamesPlayed", "LastPlayed", "NumMembers", "GameMode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClassInfo : pb::IMessage<ClassInfo> {
    private static readonly pb::MessageParser<ClassInfo> _parser = new pb::MessageParser<ClassInfo>(() => new ClassInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClassInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassInfo(ClassInfo other) : this() {
      playtime_ = other.playtime_;
      highestLevel_ = other.highestLevel_;
      deprecatedHighestDifficulty_ = other.deprecatedHighestDifficulty_;
      pvpGames_ = other.pvpGames_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClassInfo Clone() {
      return new ClassInfo(this);
    }

    /// <summary>Field number for the "playtime" field.</summary>
    public const int PlaytimeFieldNumber = 1;
    private ulong playtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Playtime {
      get { return playtime_; }
      set {
        playtime_ = value;
      }
    }

    /// <summary>Field number for the "highest_level" field.</summary>
    public const int HighestLevelFieldNumber = 2;
    private uint highestLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestLevel {
      get { return highestLevel_; }
      set {
        highestLevel_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_highest_difficulty" field.</summary>
    public const int DeprecatedHighestDifficultyFieldNumber = 3;
    private uint deprecatedHighestDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedHighestDifficulty {
      get { return deprecatedHighestDifficulty_; }
      set {
        deprecatedHighestDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "pvp_games" field.</summary>
    public const int PvpGamesFieldNumber = 4;
    private uint pvpGames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PvpGames {
      get { return pvpGames_; }
      set {
        pvpGames_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClassInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClassInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Playtime != other.Playtime) return false;
      if (HighestLevel != other.HighestLevel) return false;
      if (DeprecatedHighestDifficulty != other.DeprecatedHighestDifficulty) return false;
      if (PvpGames != other.PvpGames) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Playtime != 0UL) hash ^= Playtime.GetHashCode();
      if (HighestLevel != 0) hash ^= HighestLevel.GetHashCode();
      if (DeprecatedHighestDifficulty != 0) hash ^= DeprecatedHighestDifficulty.GetHashCode();
      if (PvpGames != 0) hash ^= PvpGames.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Playtime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Playtime);
      }
      if (HighestLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HighestLevel);
      }
      if (DeprecatedHighestDifficulty != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DeprecatedHighestDifficulty);
      }
      if (PvpGames != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PvpGames);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Playtime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Playtime);
      }
      if (HighestLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestLevel);
      }
      if (DeprecatedHighestDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedHighestDifficulty);
      }
      if (PvpGames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PvpGames);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClassInfo other) {
      if (other == null) {
        return;
      }
      if (other.Playtime != 0UL) {
        Playtime = other.Playtime;
      }
      if (other.HighestLevel != 0) {
        HighestLevel = other.HighestLevel;
      }
      if (other.DeprecatedHighestDifficulty != 0) {
        DeprecatedHighestDifficulty = other.DeprecatedHighestDifficulty;
      }
      if (other.PvpGames != 0) {
        PvpGames = other.PvpGames;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Playtime = input.ReadUInt64();
            break;
          }
          case 16: {
            HighestLevel = input.ReadUInt32();
            break;
          }
          case 24: {
            DeprecatedHighestDifficulty = input.ReadUInt32();
            break;
          }
          case 32: {
            PvpGames = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillWithRune : pb::IMessage<SkillWithRune> {
    private static readonly pb::MessageParser<SkillWithRune> _parser = new pb::MessageParser<SkillWithRune>(() => new SkillWithRune());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillWithRune> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillWithRune() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillWithRune(SkillWithRune other) : this() {
      skill_ = other.skill_;
      runeType_ = other.runeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillWithRune Clone() {
      return new SkillWithRune(this);
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 1;
    private int skill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skill {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    /// <summary>Field number for the "rune_type" field.</summary>
    public const int RuneTypeFieldNumber = 2;
    private int runeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RuneType {
      get { return runeType_; }
      set {
        runeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillWithRune);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillWithRune other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Skill != other.Skill) return false;
      if (RuneType != other.RuneType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Skill != 0) hash ^= Skill.GetHashCode();
      if (RuneType != 0) hash ^= RuneType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skill != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(Skill);
      }
      if (RuneType != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(RuneType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skill != 0) {
        size += 1 + 4;
      }
      if (RuneType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(RuneType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillWithRune other) {
      if (other == null) {
        return;
      }
      if (other.Skill != 0) {
        Skill = other.Skill;
      }
      if (other.RuneType != 0) {
        RuneType = other.RuneType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Skill = input.ReadSFixed32();
            break;
          }
          case 16: {
            RuneType = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SkillsWithRunes : pb::IMessage<SkillsWithRunes> {
    private static readonly pb::MessageParser<SkillsWithRunes> _parser = new pb::MessageParser<SkillsWithRunes>(() => new SkillsWithRunes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillsWithRunes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillsWithRunes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillsWithRunes(SkillsWithRunes other) : this() {
      runes_ = other.runes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillsWithRunes Clone() {
      return new SkillsWithRunes(this);
    }

    /// <summary>Field number for the "runes" field.</summary>
    public const int RunesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Profile.SkillWithRune> _repeated_runes_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Profile.SkillWithRune.Parser);
    private readonly pbc::RepeatedField<global::D3.Profile.SkillWithRune> runes_ = new pbc::RepeatedField<global::D3.Profile.SkillWithRune>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Profile.SkillWithRune> Runes {
      get { return runes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillsWithRunes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillsWithRunes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!runes_.Equals(other.runes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= runes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      runes_.WriteTo(output, _repeated_runes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += runes_.CalculateSize(_repeated_runes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillsWithRunes other) {
      if (other == null) {
        return;
      }
      runes_.Add(other.runes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            runes_.AddEntriesFrom(input, _repeated_runes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveSkills : pb::IMessage<PassiveSkills> {
    private static readonly pb::MessageParser<PassiveSkills> _parser = new pb::MessageParser<PassiveSkills>(() => new PassiveSkills());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSkills> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkills() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkills(PassiveSkills other) : this() {
      snoTraits_ = other.snoTraits_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkills Clone() {
      return new PassiveSkills(this);
    }

    /// <summary>Field number for the "sno_traits" field.</summary>
    public const int SnoTraitsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_snoTraits_codec
        = pb::FieldCodec.ForSFixed32(10);
    private readonly pbc::RepeatedField<int> snoTraits_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SnoTraits {
      get { return snoTraits_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveSkills);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveSkills other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!snoTraits_.Equals(other.snoTraits_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= snoTraits_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      snoTraits_.WriteTo(output, _repeated_snoTraits_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += snoTraits_.CalculateSize(_repeated_snoTraits_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveSkills other) {
      if (other == null) {
        return;
      }
      snoTraits_.Add(other.snoTraits_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            snoTraits_.AddEntriesFrom(input, _repeated_snoTraits_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParagonPointAllocation : pb::IMessage<ParagonPointAllocation> {
    private static readonly pb::MessageParser<ParagonPointAllocation> _parser = new pb::MessageParser<ParagonPointAllocation>(() => new ParagonPointAllocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParagonPointAllocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParagonPointAllocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParagonPointAllocation(ParagonPointAllocation other) : this() {
      slot_ = other.slot_;
      points_ = other.points_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParagonPointAllocation Clone() {
      return new ParagonPointAllocation(this);
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 1;
    private uint slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private uint points_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Points {
      get { return points_; }
      set {
        points_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParagonPointAllocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParagonPointAllocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Slot != other.Slot) return false;
      if (Points != other.Points) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Slot != 0) hash ^= Slot.GetHashCode();
      if (Points != 0) hash ^= Points.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Slot != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(Slot);
      }
      if (Points != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Points);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Slot != 0) {
        size += 1 + 4;
      }
      if (Points != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Points);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParagonPointAllocation other) {
      if (other == null) {
        return;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      if (other.Points != 0) {
        Points = other.Points;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Slot = input.ReadFixed32();
            break;
          }
          case 16: {
            Points = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParagonPointAllocations : pb::IMessage<ParagonPointAllocations> {
    private static readonly pb::MessageParser<ParagonPointAllocations> _parser = new pb::MessageParser<ParagonPointAllocations>(() => new ParagonPointAllocations());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParagonPointAllocations> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParagonPointAllocations() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParagonPointAllocations(ParagonPointAllocations other) : this() {
      category_ = other.category_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParagonPointAllocations Clone() {
      return new ParagonPointAllocations(this);
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Profile.ParagonPointAllocation> _repeated_category_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Profile.ParagonPointAllocation.Parser);
    private readonly pbc::RepeatedField<global::D3.Profile.ParagonPointAllocation> category_ = new pbc::RepeatedField<global::D3.Profile.ParagonPointAllocation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Profile.ParagonPointAllocation> Category {
      get { return category_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParagonPointAllocations);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParagonPointAllocations other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!category_.Equals(other.category_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= category_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      category_.WriteTo(output, _repeated_category_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += category_.CalculateSize(_repeated_category_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParagonPointAllocations other) {
      if (other == null) {
        return;
      }
      category_.Add(other.category_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            category_.AddEntriesFrom(input, _repeated_category_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LegendaryPowers : pb::IMessage<LegendaryPowers> {
    private static readonly pb::MessageParser<LegendaryPowers> _parser = new pb::MessageParser<LegendaryPowers>(() => new LegendaryPowers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LegendaryPowers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendaryPowers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendaryPowers(LegendaryPowers other) : this() {
      gbidLegendaryPowers_ = other.gbidLegendaryPowers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LegendaryPowers Clone() {
      return new LegendaryPowers(this);
    }

    /// <summary>Field number for the "gbid_legendary_powers" field.</summary>
    public const int GbidLegendaryPowersFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_gbidLegendaryPowers_codec
        = pb::FieldCodec.ForSFixed32(10);
    private readonly pbc::RepeatedField<int> gbidLegendaryPowers_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GbidLegendaryPowers {
      get { return gbidLegendaryPowers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LegendaryPowers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LegendaryPowers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gbidLegendaryPowers_.Equals(other.gbidLegendaryPowers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gbidLegendaryPowers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gbidLegendaryPowers_.WriteTo(output, _repeated_gbidLegendaryPowers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gbidLegendaryPowers_.CalculateSize(_repeated_gbidLegendaryPowers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LegendaryPowers other) {
      if (other == null) {
        return;
      }
      gbidLegendaryPowers_.Add(other.gbidLegendaryPowers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            gbidLegendaryPowers_.AddEntriesFrom(input, _repeated_gbidLegendaryPowers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KillerInfo : pb::IMessage<KillerInfo> {
    private static readonly pb::MessageParser<KillerInfo> _parser = new pb::MessageParser<KillerInfo>(() => new KillerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KillerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillerInfo(KillerInfo other) : this() {
      snoKiller_ = other.snoKiller_;
      rarity_ = other.rarity_;
      rareNameGbids_ = other.rareNameGbids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KillerInfo Clone() {
      return new KillerInfo(this);
    }

    /// <summary>Field number for the "sno_killer" field.</summary>
    public const int SnoKillerFieldNumber = 1;
    private int snoKiller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SnoKiller {
      get { return snoKiller_; }
      set {
        snoKiller_ = value;
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 2;
    private uint rarity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    /// <summary>Field number for the "rare_name_gbids" field.</summary>
    public const int RareNameGbidsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_rareNameGbids_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> rareNameGbids_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RareNameGbids {
      get { return rareNameGbids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KillerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KillerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SnoKiller != other.SnoKiller) return false;
      if (Rarity != other.Rarity) return false;
      if(!rareNameGbids_.Equals(other.rareNameGbids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SnoKiller != 0) hash ^= SnoKiller.GetHashCode();
      if (Rarity != 0) hash ^= Rarity.GetHashCode();
      hash ^= rareNameGbids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SnoKiller != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SnoKiller);
      }
      if (Rarity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Rarity);
      }
      rareNameGbids_.WriteTo(output, _repeated_rareNameGbids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SnoKiller != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SnoKiller);
      }
      if (Rarity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rarity);
      }
      size += rareNameGbids_.CalculateSize(_repeated_rareNameGbids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KillerInfo other) {
      if (other == null) {
        return;
      }
      if (other.SnoKiller != 0) {
        SnoKiller = other.SnoKiller;
      }
      if (other.Rarity != 0) {
        Rarity = other.Rarity;
      }
      rareNameGbids_.Add(other.rareNameGbids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SnoKiller = input.ReadInt32();
            break;
          }
          case 16: {
            Rarity = input.ReadUInt32();
            break;
          }
          case 26:
          case 24: {
            rareNameGbids_.AddEntriesFrom(input, _repeated_rareNameGbids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroProfile : pb::IMessage<HeroProfile> {
    private static readonly pb::MessageParser<HeroProfile> _parser = new pb::MessageParser<HeroProfile>(() => new HeroProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProfile(HeroProfile other) : this() {
      monstersKilled_ = other.monstersKilled_;
      elitesKilled_ = other.elitesKilled_;
      goldCollected_ = other.goldCollected_;
      highestLevel_ = other.highestLevel_;
      deprecatedHighestDifficulty_ = other.deprecatedHighestDifficulty_;
      createTime_ = other.createTime_;
      hardcore_ = other.hardcore_;
      strength_ = other.strength_;
      dexterity_ = other.dexterity_;
      intelligence_ = other.intelligence_;
      vitality_ = other.vitality_;
      deprecatedArmor_ = other.deprecatedArmor_;
      dps_ = other.dps_;
      resistArcane_ = other.resistArcane_;
      resistFire_ = other.resistFire_;
      resistLightning_ = other.resistLightning_;
      resistPoison_ = other.resistPoison_;
      resistCold_ = other.resistCold_;
      equipment_ = other.equipment_ != null ? other.equipment_.Clone() : null;
      snoActiveSkills_ = other.snoActiveSkills_ != null ? other.snoActiveSkills_.Clone() : null;
      snoTraits_ = other.snoTraits_ != null ? other.snoTraits_.Clone() : null;
      deathTime_ = other.deathTime_;
      killerInfo_ = other.killerInfo_ != null ? other.killerInfo_.Clone() : null;
      snoKillLocation_ = other.snoKillLocation_;
      heroId_ = other.heroId_ != null ? other.heroId_.Clone() : null;
      deprecatedDamageIncrease_ = other.deprecatedDamageIncrease_;
      deprecatedCritChance_ = other.deprecatedCritChance_;
      deprecatedDamageReduction_ = other.deprecatedDamageReduction_;
      deprecatedLife_ = other.deprecatedLife_;
      pvpGlory_ = other.pvpGlory_;
      pvpWins_ = other.pvpWins_;
      pvpTakedowns_ = other.pvpTakedowns_;
      pvpDamage_ = other.pvpDamage_;
      toughness_ = other.toughness_;
      healing_ = other.healing_;
      legendaryPowers_ = other.legendaryPowers_ != null ? other.legendaryPowers_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProfile Clone() {
      return new HeroProfile(this);
    }

    /// <summary>Field number for the "monsters_killed" field.</summary>
    public const int MonstersKilledFieldNumber = 1;
    private ulong monstersKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MonstersKilled {
      get { return monstersKilled_; }
      set {
        monstersKilled_ = value;
      }
    }

    /// <summary>Field number for the "elites_killed" field.</summary>
    public const int ElitesKilledFieldNumber = 2;
    private ulong elitesKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ElitesKilled {
      get { return elitesKilled_; }
      set {
        elitesKilled_ = value;
      }
    }

    /// <summary>Field number for the "gold_collected" field.</summary>
    public const int GoldCollectedFieldNumber = 3;
    private ulong goldCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoldCollected {
      get { return goldCollected_; }
      set {
        goldCollected_ = value;
      }
    }

    /// <summary>Field number for the "highest_level" field.</summary>
    public const int HighestLevelFieldNumber = 4;
    private uint highestLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestLevel {
      get { return highestLevel_; }
      set {
        highestLevel_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_highest_difficulty" field.</summary>
    public const int DeprecatedHighestDifficultyFieldNumber = 5;
    private uint deprecatedHighestDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedHighestDifficulty {
      get { return deprecatedHighestDifficulty_; }
      set {
        deprecatedHighestDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private uint createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "hardcore" field.</summary>
    public const int HardcoreFieldNumber = 7;
    private bool hardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hardcore {
      get { return hardcore_; }
      set {
        hardcore_ = value;
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 8;
    private uint strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    /// <summary>Field number for the "dexterity" field.</summary>
    public const int DexterityFieldNumber = 9;
    private uint dexterity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dexterity {
      get { return dexterity_; }
      set {
        dexterity_ = value;
      }
    }

    /// <summary>Field number for the "intelligence" field.</summary>
    public const int IntelligenceFieldNumber = 10;
    private uint intelligence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Intelligence {
      get { return intelligence_; }
      set {
        intelligence_ = value;
      }
    }

    /// <summary>Field number for the "vitality" field.</summary>
    public const int VitalityFieldNumber = 11;
    private uint vitality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vitality {
      get { return vitality_; }
      set {
        vitality_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_armor" field.</summary>
    public const int DeprecatedArmorFieldNumber = 12;
    private uint deprecatedArmor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedArmor {
      get { return deprecatedArmor_; }
      set {
        deprecatedArmor_ = value;
      }
    }

    /// <summary>Field number for the "dps" field.</summary>
    public const int DpsFieldNumber = 13;
    private float dps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dps {
      get { return dps_; }
      set {
        dps_ = value;
      }
    }

    /// <summary>Field number for the "resist_arcane" field.</summary>
    public const int ResistArcaneFieldNumber = 14;
    private uint resistArcane_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResistArcane {
      get { return resistArcane_; }
      set {
        resistArcane_ = value;
      }
    }

    /// <summary>Field number for the "resist_fire" field.</summary>
    public const int ResistFireFieldNumber = 15;
    private uint resistFire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResistFire {
      get { return resistFire_; }
      set {
        resistFire_ = value;
      }
    }

    /// <summary>Field number for the "resist_lightning" field.</summary>
    public const int ResistLightningFieldNumber = 16;
    private uint resistLightning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResistLightning {
      get { return resistLightning_; }
      set {
        resistLightning_ = value;
      }
    }

    /// <summary>Field number for the "resist_poison" field.</summary>
    public const int ResistPoisonFieldNumber = 17;
    private uint resistPoison_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResistPoison {
      get { return resistPoison_; }
      set {
        resistPoison_ = value;
      }
    }

    /// <summary>Field number for the "resist_cold" field.</summary>
    public const int ResistColdFieldNumber = 18;
    private uint resistCold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResistCold {
      get { return resistCold_; }
      set {
        resistCold_ = value;
      }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 19;
    private global::D3.Items.ItemList equipment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.ItemList Equipment {
      get { return equipment_; }
      set {
        equipment_ = value;
      }
    }

    /// <summary>Field number for the "sno_active_skills" field.</summary>
    public const int SnoActiveSkillsFieldNumber = 20;
    private global::D3.Profile.SkillsWithRunes snoActiveSkills_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.SkillsWithRunes SnoActiveSkills {
      get { return snoActiveSkills_; }
      set {
        snoActiveSkills_ = value;
      }
    }

    /// <summary>Field number for the "sno_traits" field.</summary>
    public const int SnoTraitsFieldNumber = 21;
    private global::D3.Profile.PassiveSkills snoTraits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.PassiveSkills SnoTraits {
      get { return snoTraits_; }
      set {
        snoTraits_ = value;
      }
    }

    /// <summary>Field number for the "death_time" field.</summary>
    public const int DeathTimeFieldNumber = 22;
    private uint deathTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeathTime {
      get { return deathTime_; }
      set {
        deathTime_ = value;
      }
    }

    /// <summary>Field number for the "killer_info" field.</summary>
    public const int KillerInfoFieldNumber = 23;
    private global::D3.Profile.KillerInfo killerInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.KillerInfo KillerInfo {
      get { return killerInfo_; }
      set {
        killerInfo_ = value;
      }
    }

    /// <summary>Field number for the "sno_kill_location" field.</summary>
    public const int SnoKillLocationFieldNumber = 24;
    private uint snoKillLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SnoKillLocation {
      get { return snoKillLocation_; }
      set {
        snoKillLocation_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 27;
    private global::D3.OnlineService.EntityId heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_damage_increase" field.</summary>
    public const int DeprecatedDamageIncreaseFieldNumber = 28;
    private float deprecatedDamageIncrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeprecatedDamageIncrease {
      get { return deprecatedDamageIncrease_; }
      set {
        deprecatedDamageIncrease_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_crit_chance" field.</summary>
    public const int DeprecatedCritChanceFieldNumber = 29;
    private float deprecatedCritChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeprecatedCritChance {
      get { return deprecatedCritChance_; }
      set {
        deprecatedCritChance_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_damage_reduction" field.</summary>
    public const int DeprecatedDamageReductionFieldNumber = 30;
    private float deprecatedDamageReduction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeprecatedDamageReduction {
      get { return deprecatedDamageReduction_; }
      set {
        deprecatedDamageReduction_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_life" field.</summary>
    public const int DeprecatedLifeFieldNumber = 31;
    private uint deprecatedLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedLife {
      get { return deprecatedLife_; }
      set {
        deprecatedLife_ = value;
      }
    }

    /// <summary>Field number for the "pvp_glory" field.</summary>
    public const int PvpGloryFieldNumber = 35;
    private uint pvpGlory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PvpGlory {
      get { return pvpGlory_; }
      set {
        pvpGlory_ = value;
      }
    }

    /// <summary>Field number for the "pvp_wins" field.</summary>
    public const int PvpWinsFieldNumber = 36;
    private uint pvpWins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PvpWins {
      get { return pvpWins_; }
      set {
        pvpWins_ = value;
      }
    }

    /// <summary>Field number for the "pvp_takedowns" field.</summary>
    public const int PvpTakedownsFieldNumber = 37;
    private uint pvpTakedowns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PvpTakedowns {
      get { return pvpTakedowns_; }
      set {
        pvpTakedowns_ = value;
      }
    }

    /// <summary>Field number for the "pvp_damage" field.</summary>
    public const int PvpDamageFieldNumber = 38;
    private ulong pvpDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PvpDamage {
      get { return pvpDamage_; }
      set {
        pvpDamage_ = value;
      }
    }

    /// <summary>Field number for the "toughness" field.</summary>
    public const int ToughnessFieldNumber = 39;
    private float toughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Toughness {
      get { return toughness_; }
      set {
        toughness_ = value;
      }
    }

    /// <summary>Field number for the "healing" field.</summary>
    public const int HealingFieldNumber = 40;
    private float healing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Healing {
      get { return healing_; }
      set {
        healing_ = value;
      }
    }

    /// <summary>Field number for the "legendary_powers" field.</summary>
    public const int LegendaryPowersFieldNumber = 41;
    private global::D3.Profile.LegendaryPowers legendaryPowers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.LegendaryPowers LegendaryPowers {
      get { return legendaryPowers_; }
      set {
        legendaryPowers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonstersKilled != other.MonstersKilled) return false;
      if (ElitesKilled != other.ElitesKilled) return false;
      if (GoldCollected != other.GoldCollected) return false;
      if (HighestLevel != other.HighestLevel) return false;
      if (DeprecatedHighestDifficulty != other.DeprecatedHighestDifficulty) return false;
      if (CreateTime != other.CreateTime) return false;
      if (Hardcore != other.Hardcore) return false;
      if (Strength != other.Strength) return false;
      if (Dexterity != other.Dexterity) return false;
      if (Intelligence != other.Intelligence) return false;
      if (Vitality != other.Vitality) return false;
      if (DeprecatedArmor != other.DeprecatedArmor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dps, other.Dps)) return false;
      if (ResistArcane != other.ResistArcane) return false;
      if (ResistFire != other.ResistFire) return false;
      if (ResistLightning != other.ResistLightning) return false;
      if (ResistPoison != other.ResistPoison) return false;
      if (ResistCold != other.ResistCold) return false;
      if (!object.Equals(Equipment, other.Equipment)) return false;
      if (!object.Equals(SnoActiveSkills, other.SnoActiveSkills)) return false;
      if (!object.Equals(SnoTraits, other.SnoTraits)) return false;
      if (DeathTime != other.DeathTime) return false;
      if (!object.Equals(KillerInfo, other.KillerInfo)) return false;
      if (SnoKillLocation != other.SnoKillLocation) return false;
      if (!object.Equals(HeroId, other.HeroId)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeprecatedDamageIncrease, other.DeprecatedDamageIncrease)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeprecatedCritChance, other.DeprecatedCritChance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeprecatedDamageReduction, other.DeprecatedDamageReduction)) return false;
      if (DeprecatedLife != other.DeprecatedLife) return false;
      if (PvpGlory != other.PvpGlory) return false;
      if (PvpWins != other.PvpWins) return false;
      if (PvpTakedowns != other.PvpTakedowns) return false;
      if (PvpDamage != other.PvpDamage) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Toughness, other.Toughness)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Healing, other.Healing)) return false;
      if (!object.Equals(LegendaryPowers, other.LegendaryPowers)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonstersKilled != 0UL) hash ^= MonstersKilled.GetHashCode();
      if (ElitesKilled != 0UL) hash ^= ElitesKilled.GetHashCode();
      if (GoldCollected != 0UL) hash ^= GoldCollected.GetHashCode();
      if (HighestLevel != 0) hash ^= HighestLevel.GetHashCode();
      if (DeprecatedHighestDifficulty != 0) hash ^= DeprecatedHighestDifficulty.GetHashCode();
      if (CreateTime != 0) hash ^= CreateTime.GetHashCode();
      if (Hardcore != false) hash ^= Hardcore.GetHashCode();
      if (Strength != 0) hash ^= Strength.GetHashCode();
      if (Dexterity != 0) hash ^= Dexterity.GetHashCode();
      if (Intelligence != 0) hash ^= Intelligence.GetHashCode();
      if (Vitality != 0) hash ^= Vitality.GetHashCode();
      if (DeprecatedArmor != 0) hash ^= DeprecatedArmor.GetHashCode();
      if (Dps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dps);
      if (ResistArcane != 0) hash ^= ResistArcane.GetHashCode();
      if (ResistFire != 0) hash ^= ResistFire.GetHashCode();
      if (ResistLightning != 0) hash ^= ResistLightning.GetHashCode();
      if (ResistPoison != 0) hash ^= ResistPoison.GetHashCode();
      if (ResistCold != 0) hash ^= ResistCold.GetHashCode();
      if (equipment_ != null) hash ^= Equipment.GetHashCode();
      if (snoActiveSkills_ != null) hash ^= SnoActiveSkills.GetHashCode();
      if (snoTraits_ != null) hash ^= SnoTraits.GetHashCode();
      if (DeathTime != 0) hash ^= DeathTime.GetHashCode();
      if (killerInfo_ != null) hash ^= KillerInfo.GetHashCode();
      if (SnoKillLocation != 0) hash ^= SnoKillLocation.GetHashCode();
      if (heroId_ != null) hash ^= HeroId.GetHashCode();
      if (DeprecatedDamageIncrease != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeprecatedDamageIncrease);
      if (DeprecatedCritChance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeprecatedCritChance);
      if (DeprecatedDamageReduction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeprecatedDamageReduction);
      if (DeprecatedLife != 0) hash ^= DeprecatedLife.GetHashCode();
      if (PvpGlory != 0) hash ^= PvpGlory.GetHashCode();
      if (PvpWins != 0) hash ^= PvpWins.GetHashCode();
      if (PvpTakedowns != 0) hash ^= PvpTakedowns.GetHashCode();
      if (PvpDamage != 0UL) hash ^= PvpDamage.GetHashCode();
      if (Toughness != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Toughness);
      if (Healing != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Healing);
      if (legendaryPowers_ != null) hash ^= LegendaryPowers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonstersKilled != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(MonstersKilled);
      }
      if (ElitesKilled != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ElitesKilled);
      }
      if (GoldCollected != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GoldCollected);
      }
      if (HighestLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HighestLevel);
      }
      if (DeprecatedHighestDifficulty != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DeprecatedHighestDifficulty);
      }
      if (CreateTime != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CreateTime);
      }
      if (Hardcore != false) {
        output.WriteRawTag(56);
        output.WriteBool(Hardcore);
      }
      if (Strength != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Strength);
      }
      if (Dexterity != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Dexterity);
      }
      if (Intelligence != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Intelligence);
      }
      if (Vitality != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Vitality);
      }
      if (DeprecatedArmor != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DeprecatedArmor);
      }
      if (Dps != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Dps);
      }
      if (ResistArcane != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(ResistArcane);
      }
      if (ResistFire != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ResistFire);
      }
      if (ResistLightning != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(ResistLightning);
      }
      if (ResistPoison != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(ResistPoison);
      }
      if (ResistCold != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(ResistCold);
      }
      if (equipment_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Equipment);
      }
      if (snoActiveSkills_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(SnoActiveSkills);
      }
      if (snoTraits_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(SnoTraits);
      }
      if (DeathTime != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(DeathTime);
      }
      if (killerInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(KillerInfo);
      }
      if (SnoKillLocation != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(SnoKillLocation);
      }
      if (heroId_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(HeroId);
      }
      if (DeprecatedDamageIncrease != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(DeprecatedDamageIncrease);
      }
      if (DeprecatedCritChance != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(DeprecatedCritChance);
      }
      if (DeprecatedDamageReduction != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(DeprecatedDamageReduction);
      }
      if (DeprecatedLife != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(DeprecatedLife);
      }
      if (PvpGlory != 0) {
        output.WriteRawTag(152, 2);
        output.WriteUInt32(PvpGlory);
      }
      if (PvpWins != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(PvpWins);
      }
      if (PvpTakedowns != 0) {
        output.WriteRawTag(168, 2);
        output.WriteUInt32(PvpTakedowns);
      }
      if (PvpDamage != 0UL) {
        output.WriteRawTag(176, 2);
        output.WriteUInt64(PvpDamage);
      }
      if (Toughness != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(Toughness);
      }
      if (Healing != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(Healing);
      }
      if (legendaryPowers_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(LegendaryPowers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonstersKilled != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MonstersKilled);
      }
      if (ElitesKilled != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ElitesKilled);
      }
      if (GoldCollected != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoldCollected);
      }
      if (HighestLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestLevel);
      }
      if (DeprecatedHighestDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedHighestDifficulty);
      }
      if (CreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreateTime);
      }
      if (Hardcore != false) {
        size += 1 + 1;
      }
      if (Strength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Strength);
      }
      if (Dexterity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dexterity);
      }
      if (Intelligence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Intelligence);
      }
      if (Vitality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vitality);
      }
      if (DeprecatedArmor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedArmor);
      }
      if (Dps != 0F) {
        size += 1 + 4;
      }
      if (ResistArcane != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResistArcane);
      }
      if (ResistFire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResistFire);
      }
      if (ResistLightning != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistLightning);
      }
      if (ResistPoison != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistPoison);
      }
      if (ResistCold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ResistCold);
      }
      if (equipment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      if (snoActiveSkills_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SnoActiveSkills);
      }
      if (snoTraits_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SnoTraits);
      }
      if (DeathTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeathTime);
      }
      if (killerInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(KillerInfo);
      }
      if (SnoKillLocation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SnoKillLocation);
      }
      if (heroId_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroId);
      }
      if (DeprecatedDamageIncrease != 0F) {
        size += 2 + 4;
      }
      if (DeprecatedCritChance != 0F) {
        size += 2 + 4;
      }
      if (DeprecatedDamageReduction != 0F) {
        size += 2 + 4;
      }
      if (DeprecatedLife != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedLife);
      }
      if (PvpGlory != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PvpGlory);
      }
      if (PvpWins != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PvpWins);
      }
      if (PvpTakedowns != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PvpTakedowns);
      }
      if (PvpDamage != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PvpDamage);
      }
      if (Toughness != 0F) {
        size += 2 + 4;
      }
      if (Healing != 0F) {
        size += 2 + 4;
      }
      if (legendaryPowers_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LegendaryPowers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroProfile other) {
      if (other == null) {
        return;
      }
      if (other.MonstersKilled != 0UL) {
        MonstersKilled = other.MonstersKilled;
      }
      if (other.ElitesKilled != 0UL) {
        ElitesKilled = other.ElitesKilled;
      }
      if (other.GoldCollected != 0UL) {
        GoldCollected = other.GoldCollected;
      }
      if (other.HighestLevel != 0) {
        HighestLevel = other.HighestLevel;
      }
      if (other.DeprecatedHighestDifficulty != 0) {
        DeprecatedHighestDifficulty = other.DeprecatedHighestDifficulty;
      }
      if (other.CreateTime != 0) {
        CreateTime = other.CreateTime;
      }
      if (other.Hardcore != false) {
        Hardcore = other.Hardcore;
      }
      if (other.Strength != 0) {
        Strength = other.Strength;
      }
      if (other.Dexterity != 0) {
        Dexterity = other.Dexterity;
      }
      if (other.Intelligence != 0) {
        Intelligence = other.Intelligence;
      }
      if (other.Vitality != 0) {
        Vitality = other.Vitality;
      }
      if (other.DeprecatedArmor != 0) {
        DeprecatedArmor = other.DeprecatedArmor;
      }
      if (other.Dps != 0F) {
        Dps = other.Dps;
      }
      if (other.ResistArcane != 0) {
        ResistArcane = other.ResistArcane;
      }
      if (other.ResistFire != 0) {
        ResistFire = other.ResistFire;
      }
      if (other.ResistLightning != 0) {
        ResistLightning = other.ResistLightning;
      }
      if (other.ResistPoison != 0) {
        ResistPoison = other.ResistPoison;
      }
      if (other.ResistCold != 0) {
        ResistCold = other.ResistCold;
      }
      if (other.equipment_ != null) {
        if (equipment_ == null) {
          equipment_ = new global::D3.Items.ItemList();
        }
        Equipment.MergeFrom(other.Equipment);
      }
      if (other.snoActiveSkills_ != null) {
        if (snoActiveSkills_ == null) {
          snoActiveSkills_ = new global::D3.Profile.SkillsWithRunes();
        }
        SnoActiveSkills.MergeFrom(other.SnoActiveSkills);
      }
      if (other.snoTraits_ != null) {
        if (snoTraits_ == null) {
          snoTraits_ = new global::D3.Profile.PassiveSkills();
        }
        SnoTraits.MergeFrom(other.SnoTraits);
      }
      if (other.DeathTime != 0) {
        DeathTime = other.DeathTime;
      }
      if (other.killerInfo_ != null) {
        if (killerInfo_ == null) {
          killerInfo_ = new global::D3.Profile.KillerInfo();
        }
        KillerInfo.MergeFrom(other.KillerInfo);
      }
      if (other.SnoKillLocation != 0) {
        SnoKillLocation = other.SnoKillLocation;
      }
      if (other.heroId_ != null) {
        if (heroId_ == null) {
          heroId_ = new global::D3.OnlineService.EntityId();
        }
        HeroId.MergeFrom(other.HeroId);
      }
      if (other.DeprecatedDamageIncrease != 0F) {
        DeprecatedDamageIncrease = other.DeprecatedDamageIncrease;
      }
      if (other.DeprecatedCritChance != 0F) {
        DeprecatedCritChance = other.DeprecatedCritChance;
      }
      if (other.DeprecatedDamageReduction != 0F) {
        DeprecatedDamageReduction = other.DeprecatedDamageReduction;
      }
      if (other.DeprecatedLife != 0) {
        DeprecatedLife = other.DeprecatedLife;
      }
      if (other.PvpGlory != 0) {
        PvpGlory = other.PvpGlory;
      }
      if (other.PvpWins != 0) {
        PvpWins = other.PvpWins;
      }
      if (other.PvpTakedowns != 0) {
        PvpTakedowns = other.PvpTakedowns;
      }
      if (other.PvpDamage != 0UL) {
        PvpDamage = other.PvpDamage;
      }
      if (other.Toughness != 0F) {
        Toughness = other.Toughness;
      }
      if (other.Healing != 0F) {
        Healing = other.Healing;
      }
      if (other.legendaryPowers_ != null) {
        if (legendaryPowers_ == null) {
          legendaryPowers_ = new global::D3.Profile.LegendaryPowers();
        }
        LegendaryPowers.MergeFrom(other.LegendaryPowers);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonstersKilled = input.ReadUInt64();
            break;
          }
          case 16: {
            ElitesKilled = input.ReadUInt64();
            break;
          }
          case 24: {
            GoldCollected = input.ReadUInt64();
            break;
          }
          case 32: {
            HighestLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            DeprecatedHighestDifficulty = input.ReadUInt32();
            break;
          }
          case 48: {
            CreateTime = input.ReadUInt32();
            break;
          }
          case 56: {
            Hardcore = input.ReadBool();
            break;
          }
          case 64: {
            Strength = input.ReadUInt32();
            break;
          }
          case 72: {
            Dexterity = input.ReadUInt32();
            break;
          }
          case 80: {
            Intelligence = input.ReadUInt32();
            break;
          }
          case 88: {
            Vitality = input.ReadUInt32();
            break;
          }
          case 96: {
            DeprecatedArmor = input.ReadUInt32();
            break;
          }
          case 109: {
            Dps = input.ReadFloat();
            break;
          }
          case 112: {
            ResistArcane = input.ReadUInt32();
            break;
          }
          case 120: {
            ResistFire = input.ReadUInt32();
            break;
          }
          case 128: {
            ResistLightning = input.ReadUInt32();
            break;
          }
          case 136: {
            ResistPoison = input.ReadUInt32();
            break;
          }
          case 144: {
            ResistCold = input.ReadUInt32();
            break;
          }
          case 154: {
            if (equipment_ == null) {
              equipment_ = new global::D3.Items.ItemList();
            }
            input.ReadMessage(equipment_);
            break;
          }
          case 162: {
            if (snoActiveSkills_ == null) {
              snoActiveSkills_ = new global::D3.Profile.SkillsWithRunes();
            }
            input.ReadMessage(snoActiveSkills_);
            break;
          }
          case 170: {
            if (snoTraits_ == null) {
              snoTraits_ = new global::D3.Profile.PassiveSkills();
            }
            input.ReadMessage(snoTraits_);
            break;
          }
          case 176: {
            DeathTime = input.ReadUInt32();
            break;
          }
          case 186: {
            if (killerInfo_ == null) {
              killerInfo_ = new global::D3.Profile.KillerInfo();
            }
            input.ReadMessage(killerInfo_);
            break;
          }
          case 192: {
            SnoKillLocation = input.ReadUInt32();
            break;
          }
          case 218: {
            if (heroId_ == null) {
              heroId_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(heroId_);
            break;
          }
          case 229: {
            DeprecatedDamageIncrease = input.ReadFloat();
            break;
          }
          case 237: {
            DeprecatedCritChance = input.ReadFloat();
            break;
          }
          case 245: {
            DeprecatedDamageReduction = input.ReadFloat();
            break;
          }
          case 248: {
            DeprecatedLife = input.ReadUInt32();
            break;
          }
          case 280: {
            PvpGlory = input.ReadUInt32();
            break;
          }
          case 288: {
            PvpWins = input.ReadUInt32();
            break;
          }
          case 296: {
            PvpTakedowns = input.ReadUInt32();
            break;
          }
          case 304: {
            PvpDamage = input.ReadUInt64();
            break;
          }
          case 317: {
            Toughness = input.ReadFloat();
            break;
          }
          case 325: {
            Healing = input.ReadFloat();
            break;
          }
          case 330: {
            if (legendaryPowers_ == null) {
              legendaryPowers_ = new global::D3.Profile.LegendaryPowers();
            }
            input.ReadMessage(legendaryPowers_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroProfileList : pb::IMessage<HeroProfileList> {
    private static readonly pb::MessageParser<HeroProfileList> _parser = new pb::MessageParser<HeroProfileList>(() => new HeroProfileList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroProfileList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProfileList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProfileList(HeroProfileList other) : this() {
      heros_ = other.heros_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProfileList Clone() {
      return new HeroProfileList(this);
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Profile.HeroProfile> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Profile.HeroProfile.Parser);
    private readonly pbc::RepeatedField<global::D3.Profile.HeroProfile> heros_ = new pbc::RepeatedField<global::D3.Profile.HeroProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Profile.HeroProfile> Heros {
      get { return heros_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroProfileList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroProfileList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heros_.Equals(other.heros_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heros_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heros_.WriteTo(output, _repeated_heros_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heros_.CalculateSize(_repeated_heros_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroProfileList other) {
      if (other == null) {
        return;
      }
      heros_.Add(other.heros_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroMiniProfile : pb::IMessage<HeroMiniProfile> {
    private static readonly pb::MessageParser<HeroMiniProfile> _parser = new pb::MessageParser<HeroMiniProfile>(() => new HeroMiniProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroMiniProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMiniProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMiniProfile(HeroMiniProfile other) : this() {
      heroId_ = other.heroId_;
      heroName_ = other.heroName_;
      heroGbidClass_ = other.heroGbidClass_;
      heroFlags_ = other.heroFlags_;
      heroLevel_ = other.heroLevel_;
      heroVisualEquipment_ = other.heroVisualEquipment_ != null ? other.heroVisualEquipment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMiniProfile Clone() {
      return new HeroMiniProfile(this);
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 1;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "hero_name" field.</summary>
    public const int HeroNameFieldNumber = 2;
    private string heroName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroName {
      get { return heroName_; }
      set {
        heroName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_gbid_class" field.</summary>
    public const int HeroGbidClassFieldNumber = 3;
    private int heroGbidClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroGbidClass {
      get { return heroGbidClass_; }
      set {
        heroGbidClass_ = value;
      }
    }

    /// <summary>Field number for the "hero_flags" field.</summary>
    public const int HeroFlagsFieldNumber = 4;
    private uint heroFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroFlags {
      get { return heroFlags_; }
      set {
        heroFlags_ = value;
      }
    }

    /// <summary>Field number for the "hero_level" field.</summary>
    public const int HeroLevelFieldNumber = 5;
    private uint heroLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroLevel {
      get { return heroLevel_; }
      set {
        heroLevel_ = value;
      }
    }

    /// <summary>Field number for the "hero_visual_equipment" field.</summary>
    public const int HeroVisualEquipmentFieldNumber = 6;
    private global::D3.Hero.VisualEquipment heroVisualEquipment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Hero.VisualEquipment HeroVisualEquipment {
      get { return heroVisualEquipment_; }
      set {
        heroVisualEquipment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroMiniProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroMiniProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroId != other.HeroId) return false;
      if (HeroName != other.HeroName) return false;
      if (HeroGbidClass != other.HeroGbidClass) return false;
      if (HeroFlags != other.HeroFlags) return false;
      if (HeroLevel != other.HeroLevel) return false;
      if (!object.Equals(HeroVisualEquipment, other.HeroVisualEquipment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (HeroName.Length != 0) hash ^= HeroName.GetHashCode();
      if (HeroGbidClass != 0) hash ^= HeroGbidClass.GetHashCode();
      if (HeroFlags != 0) hash ^= HeroFlags.GetHashCode();
      if (HeroLevel != 0) hash ^= HeroLevel.GetHashCode();
      if (heroVisualEquipment_ != null) hash ^= HeroVisualEquipment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HeroId);
      }
      if (HeroName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HeroName);
      }
      if (HeroGbidClass != 0) {
        output.WriteRawTag(29);
        output.WriteSFixed32(HeroGbidClass);
      }
      if (HeroFlags != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeroFlags);
      }
      if (HeroLevel != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeroLevel);
      }
      if (heroVisualEquipment_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(HeroVisualEquipment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (HeroName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroName);
      }
      if (HeroGbidClass != 0) {
        size += 1 + 4;
      }
      if (HeroFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroFlags);
      }
      if (HeroLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroLevel);
      }
      if (heroVisualEquipment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroVisualEquipment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroMiniProfile other) {
      if (other == null) {
        return;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.HeroName.Length != 0) {
        HeroName = other.HeroName;
      }
      if (other.HeroGbidClass != 0) {
        HeroGbidClass = other.HeroGbidClass;
      }
      if (other.HeroFlags != 0) {
        HeroFlags = other.HeroFlags;
      }
      if (other.HeroLevel != 0) {
        HeroLevel = other.HeroLevel;
      }
      if (other.heroVisualEquipment_ != null) {
        if (heroVisualEquipment_ == null) {
          heroVisualEquipment_ = new global::D3.Hero.VisualEquipment();
        }
        HeroVisualEquipment.MergeFrom(other.HeroVisualEquipment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 18: {
            HeroName = input.ReadString();
            break;
          }
          case 29: {
            HeroGbidClass = input.ReadSFixed32();
            break;
          }
          case 32: {
            HeroFlags = input.ReadUInt32();
            break;
          }
          case 40: {
            HeroLevel = input.ReadUInt32();
            break;
          }
          case 50: {
            if (heroVisualEquipment_ == null) {
              heroVisualEquipment_ = new global::D3.Hero.VisualEquipment();
            }
            input.ReadMessage(heroVisualEquipment_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccountProfile : pb::IMessage<AccountProfile> {
    private static readonly pb::MessageParser<AccountProfile> _parser = new pb::MessageParser<AccountProfile>(() => new AccountProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountProfile(AccountProfile other) : this() {
      deprecatedHighestDifficulty_ = other.deprecatedHighestDifficulty_;
      highestBossDifficulty1_ = other.highestBossDifficulty1_;
      highestBossDifficulty2_ = other.highestBossDifficulty2_;
      highestBossDifficulty3_ = other.highestBossDifficulty3_;
      highestBossDifficulty4_ = other.highestBossDifficulty4_;
      monstersKilled_ = other.monstersKilled_;
      elitesKilled_ = other.elitesKilled_;
      goldCollected_ = other.goldCollected_;
      highestHardcoreLevel_ = other.highestHardcoreLevel_;
      hardcoreMonstersKilled_ = other.hardcoreMonstersKilled_;
      classBarbarian_ = other.classBarbarian_ != null ? other.classBarbarian_.Clone() : null;
      classDemonhunter_ = other.classDemonhunter_ != null ? other.classDemonhunter_.Clone() : null;
      classMonk_ = other.classMonk_ != null ? other.classMonk_.Clone() : null;
      classWitchdoctor_ = other.classWitchdoctor_ != null ? other.classWitchdoctor_.Clone() : null;
      classWizard_ = other.classWizard_ != null ? other.classWizard_.Clone() : null;
      classCrusader_ = other.classCrusader_ != null ? other.classCrusader_.Clone() : null;
      classNecromancer_ = other.classNecromancer_ != null ? other.classNecromancer_.Clone() : null;
      pvpWins_ = other.pvpWins_;
      pvpTakedowns_ = other.pvpTakedowns_;
      pvpDamage_ = other.pvpDamage_;
      seasonId_ = other.seasonId_;
      highestBossDifficulty5_ = other.highestBossDifficulty5_;
      deprecatedBestLadderParagonLevel_ = other.deprecatedBestLadderParagonLevel_;
      paragonLevel_ = other.paragonLevel_;
      paragonXpNext_ = other.paragonXpNext_;
      seasons_ = other.seasons_.Clone();
      paragonLevelHardcore_ = other.paragonLevelHardcore_;
      paragonXpNextHardcore_ = other.paragonXpNextHardcore_;
      bountiesCompleted_ = other.bountiesCompleted_;
      lootRunsCompleted_ = other.lootRunsCompleted_;
      highestLevel_ = other.highestLevel_;
      bloodShardsCollected_ = other.bloodShardsCollected_;
      heroes_ = other.heroes_.Clone();
      leaderboardErasWithScores_ = other.leaderboardErasWithScores_.Clone();
      numFallenHeroes_ = other.numFallenHeroes_;
      seasonJourneyRank_ = other.seasonJourneyRank_;
      deletedHeroes_ = other.deletedHeroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountProfile Clone() {
      return new AccountProfile(this);
    }

    /// <summary>Field number for the "deprecated_highest_difficulty" field.</summary>
    public const int DeprecatedHighestDifficultyFieldNumber = 1;
    private uint deprecatedHighestDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedHighestDifficulty {
      get { return deprecatedHighestDifficulty_; }
      set {
        deprecatedHighestDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "highest_boss_difficulty_1" field.</summary>
    public const int HighestBossDifficulty1FieldNumber = 2;
    private uint highestBossDifficulty1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestBossDifficulty1 {
      get { return highestBossDifficulty1_; }
      set {
        highestBossDifficulty1_ = value;
      }
    }

    /// <summary>Field number for the "highest_boss_difficulty_2" field.</summary>
    public const int HighestBossDifficulty2FieldNumber = 3;
    private uint highestBossDifficulty2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestBossDifficulty2 {
      get { return highestBossDifficulty2_; }
      set {
        highestBossDifficulty2_ = value;
      }
    }

    /// <summary>Field number for the "highest_boss_difficulty_3" field.</summary>
    public const int HighestBossDifficulty3FieldNumber = 4;
    private uint highestBossDifficulty3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestBossDifficulty3 {
      get { return highestBossDifficulty3_; }
      set {
        highestBossDifficulty3_ = value;
      }
    }

    /// <summary>Field number for the "highest_boss_difficulty_4" field.</summary>
    public const int HighestBossDifficulty4FieldNumber = 5;
    private uint highestBossDifficulty4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestBossDifficulty4 {
      get { return highestBossDifficulty4_; }
      set {
        highestBossDifficulty4_ = value;
      }
    }

    /// <summary>Field number for the "monsters_killed" field.</summary>
    public const int MonstersKilledFieldNumber = 6;
    private ulong monstersKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MonstersKilled {
      get { return monstersKilled_; }
      set {
        monstersKilled_ = value;
      }
    }

    /// <summary>Field number for the "elites_killed" field.</summary>
    public const int ElitesKilledFieldNumber = 7;
    private ulong elitesKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ElitesKilled {
      get { return elitesKilled_; }
      set {
        elitesKilled_ = value;
      }
    }

    /// <summary>Field number for the "gold_collected" field.</summary>
    public const int GoldCollectedFieldNumber = 8;
    private ulong goldCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GoldCollected {
      get { return goldCollected_; }
      set {
        goldCollected_ = value;
      }
    }

    /// <summary>Field number for the "highest_hardcore_level" field.</summary>
    public const int HighestHardcoreLevelFieldNumber = 9;
    private ulong highestHardcoreLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HighestHardcoreLevel {
      get { return highestHardcoreLevel_; }
      set {
        highestHardcoreLevel_ = value;
      }
    }

    /// <summary>Field number for the "hardcore_monsters_killed" field.</summary>
    public const int HardcoreMonstersKilledFieldNumber = 10;
    private ulong hardcoreMonstersKilled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HardcoreMonstersKilled {
      get { return hardcoreMonstersKilled_; }
      set {
        hardcoreMonstersKilled_ = value;
      }
    }

    /// <summary>Field number for the "class_barbarian" field.</summary>
    public const int ClassBarbarianFieldNumber = 11;
    private global::D3.Profile.ClassInfo classBarbarian_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.ClassInfo ClassBarbarian {
      get { return classBarbarian_; }
      set {
        classBarbarian_ = value;
      }
    }

    /// <summary>Field number for the "class_demonhunter" field.</summary>
    public const int ClassDemonhunterFieldNumber = 12;
    private global::D3.Profile.ClassInfo classDemonhunter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.ClassInfo ClassDemonhunter {
      get { return classDemonhunter_; }
      set {
        classDemonhunter_ = value;
      }
    }

    /// <summary>Field number for the "class_monk" field.</summary>
    public const int ClassMonkFieldNumber = 13;
    private global::D3.Profile.ClassInfo classMonk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.ClassInfo ClassMonk {
      get { return classMonk_; }
      set {
        classMonk_ = value;
      }
    }

    /// <summary>Field number for the "class_witchdoctor" field.</summary>
    public const int ClassWitchdoctorFieldNumber = 14;
    private global::D3.Profile.ClassInfo classWitchdoctor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.ClassInfo ClassWitchdoctor {
      get { return classWitchdoctor_; }
      set {
        classWitchdoctor_ = value;
      }
    }

    /// <summary>Field number for the "class_wizard" field.</summary>
    public const int ClassWizardFieldNumber = 15;
    private global::D3.Profile.ClassInfo classWizard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.ClassInfo ClassWizard {
      get { return classWizard_; }
      set {
        classWizard_ = value;
      }
    }

    /// <summary>Field number for the "class_crusader" field.</summary>
    public const int ClassCrusaderFieldNumber = 16;
    private global::D3.Profile.ClassInfo classCrusader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.ClassInfo ClassCrusader {
      get { return classCrusader_; }
      set {
        classCrusader_ = value;
      }
    }

    /// <summary>Field number for the "class_necromancer" field.</summary>
    public const int ClassNecromancerFieldNumber = 17;
    private global::D3.Profile.ClassInfo classNecromancer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.ClassInfo ClassNecromancer {
      get { return classNecromancer_; }
      set {
        classNecromancer_ = value;
      }
    }

    /// <summary>Field number for the "pvp_wins" field.</summary>
    public const int PvpWinsFieldNumber = 18;
    private uint pvpWins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PvpWins {
      get { return pvpWins_; }
      set {
        pvpWins_ = value;
      }
    }

    /// <summary>Field number for the "pvp_takedowns" field.</summary>
    public const int PvpTakedownsFieldNumber = 19;
    private uint pvpTakedowns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PvpTakedowns {
      get { return pvpTakedowns_; }
      set {
        pvpTakedowns_ = value;
      }
    }

    /// <summary>Field number for the "pvp_damage" field.</summary>
    public const int PvpDamageFieldNumber = 20;
    private ulong pvpDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PvpDamage {
      get { return pvpDamage_; }
      set {
        pvpDamage_ = value;
      }
    }

    /// <summary>Field number for the "season_id" field.</summary>
    public const int SeasonIdFieldNumber = 21;
    private uint seasonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonId {
      get { return seasonId_; }
      set {
        seasonId_ = value;
      }
    }

    /// <summary>Field number for the "highest_boss_difficulty_5" field.</summary>
    public const int HighestBossDifficulty5FieldNumber = 22;
    private uint highestBossDifficulty5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestBossDifficulty5 {
      get { return highestBossDifficulty5_; }
      set {
        highestBossDifficulty5_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_best_ladder_paragon_level" field.</summary>
    public const int DeprecatedBestLadderParagonLevelFieldNumber = 23;
    private uint deprecatedBestLadderParagonLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedBestLadderParagonLevel {
      get { return deprecatedBestLadderParagonLevel_; }
      set {
        deprecatedBestLadderParagonLevel_ = value;
      }
    }

    /// <summary>Field number for the "paragon_level" field.</summary>
    public const int ParagonLevelFieldNumber = 24;
    private uint paragonLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParagonLevel {
      get { return paragonLevel_; }
      set {
        paragonLevel_ = value;
      }
    }

    /// <summary>Field number for the "paragon_xp_next" field.</summary>
    public const int ParagonXpNextFieldNumber = 25;
    private ulong paragonXpNext_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParagonXpNext {
      get { return paragonXpNext_; }
      set {
        paragonXpNext_ = value;
      }
    }

    /// <summary>Field number for the "seasons" field.</summary>
    public const int SeasonsFieldNumber = 26;
    private static readonly pb::FieldCodec<uint> _repeated_seasons_codec
        = pb::FieldCodec.ForUInt32(210);
    private readonly pbc::RepeatedField<uint> seasons_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Seasons {
      get { return seasons_; }
    }

    /// <summary>Field number for the "paragon_level_hardcore" field.</summary>
    public const int ParagonLevelHardcoreFieldNumber = 27;
    private uint paragonLevelHardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParagonLevelHardcore {
      get { return paragonLevelHardcore_; }
      set {
        paragonLevelHardcore_ = value;
      }
    }

    /// <summary>Field number for the "paragon_xp_next_hardcore" field.</summary>
    public const int ParagonXpNextHardcoreFieldNumber = 28;
    private ulong paragonXpNextHardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParagonXpNextHardcore {
      get { return paragonXpNextHardcore_; }
      set {
        paragonXpNextHardcore_ = value;
      }
    }

    /// <summary>Field number for the "bounties_completed" field.</summary>
    public const int BountiesCompletedFieldNumber = 29;
    private uint bountiesCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BountiesCompleted {
      get { return bountiesCompleted_; }
      set {
        bountiesCompleted_ = value;
      }
    }

    /// <summary>Field number for the "loot_runs_completed" field.</summary>
    public const int LootRunsCompletedFieldNumber = 30;
    private uint lootRunsCompleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LootRunsCompleted {
      get { return lootRunsCompleted_; }
      set {
        lootRunsCompleted_ = value;
      }
    }

    /// <summary>Field number for the "highest_level" field.</summary>
    public const int HighestLevelFieldNumber = 31;
    private ulong highestLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HighestLevel {
      get { return highestLevel_; }
      set {
        highestLevel_ = value;
      }
    }

    /// <summary>Field number for the "blood_shards_collected" field.</summary>
    public const int BloodShardsCollectedFieldNumber = 32;
    private ulong bloodShardsCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BloodShardsCollected {
      get { return bloodShardsCollected_; }
      set {
        bloodShardsCollected_ = value;
      }
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 34;
    private static readonly pb::FieldCodec<global::D3.Profile.HeroMiniProfile> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(274, global::D3.Profile.HeroMiniProfile.Parser);
    private readonly pbc::RepeatedField<global::D3.Profile.HeroMiniProfile> heroes_ = new pbc::RepeatedField<global::D3.Profile.HeroMiniProfile>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Profile.HeroMiniProfile> Heroes {
      get { return heroes_; }
    }

    /// <summary>Field number for the "leaderboard_eras_with_scores" field.</summary>
    public const int LeaderboardErasWithScoresFieldNumber = 35;
    private static readonly pb::FieldCodec<uint> _repeated_leaderboardErasWithScores_codec
        = pb::FieldCodec.ForUInt32(282);
    private readonly pbc::RepeatedField<uint> leaderboardErasWithScores_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> LeaderboardErasWithScores {
      get { return leaderboardErasWithScores_; }
    }

    /// <summary>Field number for the "num_fallen_heroes" field.</summary>
    public const int NumFallenHeroesFieldNumber = 36;
    private uint numFallenHeroes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumFallenHeroes {
      get { return numFallenHeroes_; }
      set {
        numFallenHeroes_ = value;
      }
    }

    /// <summary>Field number for the "season_journey_rank" field.</summary>
    public const int SeasonJourneyRankFieldNumber = 37;
    private ulong seasonJourneyRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SeasonJourneyRank {
      get { return seasonJourneyRank_; }
      set {
        seasonJourneyRank_ = value;
      }
    }

    /// <summary>Field number for the "deleted_heroes" field.</summary>
    public const int DeletedHeroesFieldNumber = 38;
    private static readonly pb::FieldCodec<uint> _repeated_deletedHeroes_codec
        = pb::FieldCodec.ForUInt32(306);
    private readonly pbc::RepeatedField<uint> deletedHeroes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DeletedHeroes {
      get { return deletedHeroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeprecatedHighestDifficulty != other.DeprecatedHighestDifficulty) return false;
      if (HighestBossDifficulty1 != other.HighestBossDifficulty1) return false;
      if (HighestBossDifficulty2 != other.HighestBossDifficulty2) return false;
      if (HighestBossDifficulty3 != other.HighestBossDifficulty3) return false;
      if (HighestBossDifficulty4 != other.HighestBossDifficulty4) return false;
      if (MonstersKilled != other.MonstersKilled) return false;
      if (ElitesKilled != other.ElitesKilled) return false;
      if (GoldCollected != other.GoldCollected) return false;
      if (HighestHardcoreLevel != other.HighestHardcoreLevel) return false;
      if (HardcoreMonstersKilled != other.HardcoreMonstersKilled) return false;
      if (!object.Equals(ClassBarbarian, other.ClassBarbarian)) return false;
      if (!object.Equals(ClassDemonhunter, other.ClassDemonhunter)) return false;
      if (!object.Equals(ClassMonk, other.ClassMonk)) return false;
      if (!object.Equals(ClassWitchdoctor, other.ClassWitchdoctor)) return false;
      if (!object.Equals(ClassWizard, other.ClassWizard)) return false;
      if (!object.Equals(ClassCrusader, other.ClassCrusader)) return false;
      if (!object.Equals(ClassNecromancer, other.ClassNecromancer)) return false;
      if (PvpWins != other.PvpWins) return false;
      if (PvpTakedowns != other.PvpTakedowns) return false;
      if (PvpDamage != other.PvpDamage) return false;
      if (SeasonId != other.SeasonId) return false;
      if (HighestBossDifficulty5 != other.HighestBossDifficulty5) return false;
      if (DeprecatedBestLadderParagonLevel != other.DeprecatedBestLadderParagonLevel) return false;
      if (ParagonLevel != other.ParagonLevel) return false;
      if (ParagonXpNext != other.ParagonXpNext) return false;
      if(!seasons_.Equals(other.seasons_)) return false;
      if (ParagonLevelHardcore != other.ParagonLevelHardcore) return false;
      if (ParagonXpNextHardcore != other.ParagonXpNextHardcore) return false;
      if (BountiesCompleted != other.BountiesCompleted) return false;
      if (LootRunsCompleted != other.LootRunsCompleted) return false;
      if (HighestLevel != other.HighestLevel) return false;
      if (BloodShardsCollected != other.BloodShardsCollected) return false;
      if(!heroes_.Equals(other.heroes_)) return false;
      if(!leaderboardErasWithScores_.Equals(other.leaderboardErasWithScores_)) return false;
      if (NumFallenHeroes != other.NumFallenHeroes) return false;
      if (SeasonJourneyRank != other.SeasonJourneyRank) return false;
      if(!deletedHeroes_.Equals(other.deletedHeroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeprecatedHighestDifficulty != 0) hash ^= DeprecatedHighestDifficulty.GetHashCode();
      if (HighestBossDifficulty1 != 0) hash ^= HighestBossDifficulty1.GetHashCode();
      if (HighestBossDifficulty2 != 0) hash ^= HighestBossDifficulty2.GetHashCode();
      if (HighestBossDifficulty3 != 0) hash ^= HighestBossDifficulty3.GetHashCode();
      if (HighestBossDifficulty4 != 0) hash ^= HighestBossDifficulty4.GetHashCode();
      if (MonstersKilled != 0UL) hash ^= MonstersKilled.GetHashCode();
      if (ElitesKilled != 0UL) hash ^= ElitesKilled.GetHashCode();
      if (GoldCollected != 0UL) hash ^= GoldCollected.GetHashCode();
      if (HighestHardcoreLevel != 0UL) hash ^= HighestHardcoreLevel.GetHashCode();
      if (HardcoreMonstersKilled != 0UL) hash ^= HardcoreMonstersKilled.GetHashCode();
      if (classBarbarian_ != null) hash ^= ClassBarbarian.GetHashCode();
      if (classDemonhunter_ != null) hash ^= ClassDemonhunter.GetHashCode();
      if (classMonk_ != null) hash ^= ClassMonk.GetHashCode();
      if (classWitchdoctor_ != null) hash ^= ClassWitchdoctor.GetHashCode();
      if (classWizard_ != null) hash ^= ClassWizard.GetHashCode();
      if (classCrusader_ != null) hash ^= ClassCrusader.GetHashCode();
      if (classNecromancer_ != null) hash ^= ClassNecromancer.GetHashCode();
      if (PvpWins != 0) hash ^= PvpWins.GetHashCode();
      if (PvpTakedowns != 0) hash ^= PvpTakedowns.GetHashCode();
      if (PvpDamage != 0UL) hash ^= PvpDamage.GetHashCode();
      if (SeasonId != 0) hash ^= SeasonId.GetHashCode();
      if (HighestBossDifficulty5 != 0) hash ^= HighestBossDifficulty5.GetHashCode();
      if (DeprecatedBestLadderParagonLevel != 0) hash ^= DeprecatedBestLadderParagonLevel.GetHashCode();
      if (ParagonLevel != 0) hash ^= ParagonLevel.GetHashCode();
      if (ParagonXpNext != 0UL) hash ^= ParagonXpNext.GetHashCode();
      hash ^= seasons_.GetHashCode();
      if (ParagonLevelHardcore != 0) hash ^= ParagonLevelHardcore.GetHashCode();
      if (ParagonXpNextHardcore != 0UL) hash ^= ParagonXpNextHardcore.GetHashCode();
      if (BountiesCompleted != 0) hash ^= BountiesCompleted.GetHashCode();
      if (LootRunsCompleted != 0) hash ^= LootRunsCompleted.GetHashCode();
      if (HighestLevel != 0UL) hash ^= HighestLevel.GetHashCode();
      if (BloodShardsCollected != 0UL) hash ^= BloodShardsCollected.GetHashCode();
      hash ^= heroes_.GetHashCode();
      hash ^= leaderboardErasWithScores_.GetHashCode();
      if (NumFallenHeroes != 0) hash ^= NumFallenHeroes.GetHashCode();
      if (SeasonJourneyRank != 0UL) hash ^= SeasonJourneyRank.GetHashCode();
      hash ^= deletedHeroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeprecatedHighestDifficulty != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DeprecatedHighestDifficulty);
      }
      if (HighestBossDifficulty1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HighestBossDifficulty1);
      }
      if (HighestBossDifficulty2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HighestBossDifficulty2);
      }
      if (HighestBossDifficulty3 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HighestBossDifficulty3);
      }
      if (HighestBossDifficulty4 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HighestBossDifficulty4);
      }
      if (MonstersKilled != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MonstersKilled);
      }
      if (ElitesKilled != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ElitesKilled);
      }
      if (GoldCollected != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(GoldCollected);
      }
      if (HighestHardcoreLevel != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(HighestHardcoreLevel);
      }
      if (HardcoreMonstersKilled != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(HardcoreMonstersKilled);
      }
      if (classBarbarian_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ClassBarbarian);
      }
      if (classDemonhunter_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ClassDemonhunter);
      }
      if (classMonk_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ClassMonk);
      }
      if (classWitchdoctor_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ClassWitchdoctor);
      }
      if (classWizard_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ClassWizard);
      }
      if (classCrusader_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ClassCrusader);
      }
      if (classNecromancer_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ClassNecromancer);
      }
      if (PvpWins != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(PvpWins);
      }
      if (PvpTakedowns != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(PvpTakedowns);
      }
      if (PvpDamage != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(PvpDamage);
      }
      if (SeasonId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(SeasonId);
      }
      if (HighestBossDifficulty5 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(HighestBossDifficulty5);
      }
      if (DeprecatedBestLadderParagonLevel != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(DeprecatedBestLadderParagonLevel);
      }
      if (ParagonLevel != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(ParagonLevel);
      }
      if (ParagonXpNext != 0UL) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(ParagonXpNext);
      }
      seasons_.WriteTo(output, _repeated_seasons_codec);
      if (ParagonLevelHardcore != 0) {
        output.WriteRawTag(216, 1);
        output.WriteUInt32(ParagonLevelHardcore);
      }
      if (ParagonXpNextHardcore != 0UL) {
        output.WriteRawTag(224, 1);
        output.WriteUInt64(ParagonXpNextHardcore);
      }
      if (BountiesCompleted != 0) {
        output.WriteRawTag(232, 1);
        output.WriteUInt32(BountiesCompleted);
      }
      if (LootRunsCompleted != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(LootRunsCompleted);
      }
      if (HighestLevel != 0UL) {
        output.WriteRawTag(248, 1);
        output.WriteUInt64(HighestLevel);
      }
      if (BloodShardsCollected != 0UL) {
        output.WriteRawTag(128, 2);
        output.WriteUInt64(BloodShardsCollected);
      }
      heroes_.WriteTo(output, _repeated_heroes_codec);
      leaderboardErasWithScores_.WriteTo(output, _repeated_leaderboardErasWithScores_codec);
      if (NumFallenHeroes != 0) {
        output.WriteRawTag(160, 2);
        output.WriteUInt32(NumFallenHeroes);
      }
      if (SeasonJourneyRank != 0UL) {
        output.WriteRawTag(168, 2);
        output.WriteUInt64(SeasonJourneyRank);
      }
      deletedHeroes_.WriteTo(output, _repeated_deletedHeroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeprecatedHighestDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedHighestDifficulty);
      }
      if (HighestBossDifficulty1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestBossDifficulty1);
      }
      if (HighestBossDifficulty2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestBossDifficulty2);
      }
      if (HighestBossDifficulty3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestBossDifficulty3);
      }
      if (HighestBossDifficulty4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestBossDifficulty4);
      }
      if (MonstersKilled != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MonstersKilled);
      }
      if (ElitesKilled != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ElitesKilled);
      }
      if (GoldCollected != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GoldCollected);
      }
      if (HighestHardcoreLevel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HighestHardcoreLevel);
      }
      if (HardcoreMonstersKilled != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HardcoreMonstersKilled);
      }
      if (classBarbarian_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassBarbarian);
      }
      if (classDemonhunter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassDemonhunter);
      }
      if (classMonk_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassMonk);
      }
      if (classWitchdoctor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassWitchdoctor);
      }
      if (classWizard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClassWizard);
      }
      if (classCrusader_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClassCrusader);
      }
      if (classNecromancer_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClassNecromancer);
      }
      if (PvpWins != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PvpWins);
      }
      if (PvpTakedowns != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PvpTakedowns);
      }
      if (PvpDamage != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PvpDamage);
      }
      if (SeasonId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeasonId);
      }
      if (HighestBossDifficulty5 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HighestBossDifficulty5);
      }
      if (DeprecatedBestLadderParagonLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedBestLadderParagonLevel);
      }
      if (ParagonLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ParagonLevel);
      }
      if (ParagonXpNext != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ParagonXpNext);
      }
      size += seasons_.CalculateSize(_repeated_seasons_codec);
      if (ParagonLevelHardcore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ParagonLevelHardcore);
      }
      if (ParagonXpNextHardcore != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ParagonXpNextHardcore);
      }
      if (BountiesCompleted != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BountiesCompleted);
      }
      if (LootRunsCompleted != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LootRunsCompleted);
      }
      if (HighestLevel != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(HighestLevel);
      }
      if (BloodShardsCollected != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BloodShardsCollected);
      }
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      size += leaderboardErasWithScores_.CalculateSize(_repeated_leaderboardErasWithScores_codec);
      if (NumFallenHeroes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumFallenHeroes);
      }
      if (SeasonJourneyRank != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SeasonJourneyRank);
      }
      size += deletedHeroes_.CalculateSize(_repeated_deletedHeroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountProfile other) {
      if (other == null) {
        return;
      }
      if (other.DeprecatedHighestDifficulty != 0) {
        DeprecatedHighestDifficulty = other.DeprecatedHighestDifficulty;
      }
      if (other.HighestBossDifficulty1 != 0) {
        HighestBossDifficulty1 = other.HighestBossDifficulty1;
      }
      if (other.HighestBossDifficulty2 != 0) {
        HighestBossDifficulty2 = other.HighestBossDifficulty2;
      }
      if (other.HighestBossDifficulty3 != 0) {
        HighestBossDifficulty3 = other.HighestBossDifficulty3;
      }
      if (other.HighestBossDifficulty4 != 0) {
        HighestBossDifficulty4 = other.HighestBossDifficulty4;
      }
      if (other.MonstersKilled != 0UL) {
        MonstersKilled = other.MonstersKilled;
      }
      if (other.ElitesKilled != 0UL) {
        ElitesKilled = other.ElitesKilled;
      }
      if (other.GoldCollected != 0UL) {
        GoldCollected = other.GoldCollected;
      }
      if (other.HighestHardcoreLevel != 0UL) {
        HighestHardcoreLevel = other.HighestHardcoreLevel;
      }
      if (other.HardcoreMonstersKilled != 0UL) {
        HardcoreMonstersKilled = other.HardcoreMonstersKilled;
      }
      if (other.classBarbarian_ != null) {
        if (classBarbarian_ == null) {
          classBarbarian_ = new global::D3.Profile.ClassInfo();
        }
        ClassBarbarian.MergeFrom(other.ClassBarbarian);
      }
      if (other.classDemonhunter_ != null) {
        if (classDemonhunter_ == null) {
          classDemonhunter_ = new global::D3.Profile.ClassInfo();
        }
        ClassDemonhunter.MergeFrom(other.ClassDemonhunter);
      }
      if (other.classMonk_ != null) {
        if (classMonk_ == null) {
          classMonk_ = new global::D3.Profile.ClassInfo();
        }
        ClassMonk.MergeFrom(other.ClassMonk);
      }
      if (other.classWitchdoctor_ != null) {
        if (classWitchdoctor_ == null) {
          classWitchdoctor_ = new global::D3.Profile.ClassInfo();
        }
        ClassWitchdoctor.MergeFrom(other.ClassWitchdoctor);
      }
      if (other.classWizard_ != null) {
        if (classWizard_ == null) {
          classWizard_ = new global::D3.Profile.ClassInfo();
        }
        ClassWizard.MergeFrom(other.ClassWizard);
      }
      if (other.classCrusader_ != null) {
        if (classCrusader_ == null) {
          classCrusader_ = new global::D3.Profile.ClassInfo();
        }
        ClassCrusader.MergeFrom(other.ClassCrusader);
      }
      if (other.classNecromancer_ != null) {
        if (classNecromancer_ == null) {
          classNecromancer_ = new global::D3.Profile.ClassInfo();
        }
        ClassNecromancer.MergeFrom(other.ClassNecromancer);
      }
      if (other.PvpWins != 0) {
        PvpWins = other.PvpWins;
      }
      if (other.PvpTakedowns != 0) {
        PvpTakedowns = other.PvpTakedowns;
      }
      if (other.PvpDamage != 0UL) {
        PvpDamage = other.PvpDamage;
      }
      if (other.SeasonId != 0) {
        SeasonId = other.SeasonId;
      }
      if (other.HighestBossDifficulty5 != 0) {
        HighestBossDifficulty5 = other.HighestBossDifficulty5;
      }
      if (other.DeprecatedBestLadderParagonLevel != 0) {
        DeprecatedBestLadderParagonLevel = other.DeprecatedBestLadderParagonLevel;
      }
      if (other.ParagonLevel != 0) {
        ParagonLevel = other.ParagonLevel;
      }
      if (other.ParagonXpNext != 0UL) {
        ParagonXpNext = other.ParagonXpNext;
      }
      seasons_.Add(other.seasons_);
      if (other.ParagonLevelHardcore != 0) {
        ParagonLevelHardcore = other.ParagonLevelHardcore;
      }
      if (other.ParagonXpNextHardcore != 0UL) {
        ParagonXpNextHardcore = other.ParagonXpNextHardcore;
      }
      if (other.BountiesCompleted != 0) {
        BountiesCompleted = other.BountiesCompleted;
      }
      if (other.LootRunsCompleted != 0) {
        LootRunsCompleted = other.LootRunsCompleted;
      }
      if (other.HighestLevel != 0UL) {
        HighestLevel = other.HighestLevel;
      }
      if (other.BloodShardsCollected != 0UL) {
        BloodShardsCollected = other.BloodShardsCollected;
      }
      heroes_.Add(other.heroes_);
      leaderboardErasWithScores_.Add(other.leaderboardErasWithScores_);
      if (other.NumFallenHeroes != 0) {
        NumFallenHeroes = other.NumFallenHeroes;
      }
      if (other.SeasonJourneyRank != 0UL) {
        SeasonJourneyRank = other.SeasonJourneyRank;
      }
      deletedHeroes_.Add(other.deletedHeroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeprecatedHighestDifficulty = input.ReadUInt32();
            break;
          }
          case 16: {
            HighestBossDifficulty1 = input.ReadUInt32();
            break;
          }
          case 24: {
            HighestBossDifficulty2 = input.ReadUInt32();
            break;
          }
          case 32: {
            HighestBossDifficulty3 = input.ReadUInt32();
            break;
          }
          case 40: {
            HighestBossDifficulty4 = input.ReadUInt32();
            break;
          }
          case 48: {
            MonstersKilled = input.ReadUInt64();
            break;
          }
          case 56: {
            ElitesKilled = input.ReadUInt64();
            break;
          }
          case 64: {
            GoldCollected = input.ReadUInt64();
            break;
          }
          case 72: {
            HighestHardcoreLevel = input.ReadUInt64();
            break;
          }
          case 80: {
            HardcoreMonstersKilled = input.ReadUInt64();
            break;
          }
          case 90: {
            if (classBarbarian_ == null) {
              classBarbarian_ = new global::D3.Profile.ClassInfo();
            }
            input.ReadMessage(classBarbarian_);
            break;
          }
          case 98: {
            if (classDemonhunter_ == null) {
              classDemonhunter_ = new global::D3.Profile.ClassInfo();
            }
            input.ReadMessage(classDemonhunter_);
            break;
          }
          case 106: {
            if (classMonk_ == null) {
              classMonk_ = new global::D3.Profile.ClassInfo();
            }
            input.ReadMessage(classMonk_);
            break;
          }
          case 114: {
            if (classWitchdoctor_ == null) {
              classWitchdoctor_ = new global::D3.Profile.ClassInfo();
            }
            input.ReadMessage(classWitchdoctor_);
            break;
          }
          case 122: {
            if (classWizard_ == null) {
              classWizard_ = new global::D3.Profile.ClassInfo();
            }
            input.ReadMessage(classWizard_);
            break;
          }
          case 130: {
            if (classCrusader_ == null) {
              classCrusader_ = new global::D3.Profile.ClassInfo();
            }
            input.ReadMessage(classCrusader_);
            break;
          }
          case 138: {
            if (classNecromancer_ == null) {
              classNecromancer_ = new global::D3.Profile.ClassInfo();
            }
            input.ReadMessage(classNecromancer_);
            break;
          }
          case 144: {
            PvpWins = input.ReadUInt32();
            break;
          }
          case 152: {
            PvpTakedowns = input.ReadUInt32();
            break;
          }
          case 160: {
            PvpDamage = input.ReadUInt64();
            break;
          }
          case 168: {
            SeasonId = input.ReadUInt32();
            break;
          }
          case 176: {
            HighestBossDifficulty5 = input.ReadUInt32();
            break;
          }
          case 184: {
            DeprecatedBestLadderParagonLevel = input.ReadUInt32();
            break;
          }
          case 192: {
            ParagonLevel = input.ReadUInt32();
            break;
          }
          case 200: {
            ParagonXpNext = input.ReadUInt64();
            break;
          }
          case 210:
          case 208: {
            seasons_.AddEntriesFrom(input, _repeated_seasons_codec);
            break;
          }
          case 216: {
            ParagonLevelHardcore = input.ReadUInt32();
            break;
          }
          case 224: {
            ParagonXpNextHardcore = input.ReadUInt64();
            break;
          }
          case 232: {
            BountiesCompleted = input.ReadUInt32();
            break;
          }
          case 240: {
            LootRunsCompleted = input.ReadUInt32();
            break;
          }
          case 248: {
            HighestLevel = input.ReadUInt64();
            break;
          }
          case 256: {
            BloodShardsCollected = input.ReadUInt64();
            break;
          }
          case 274: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
          case 282:
          case 280: {
            leaderboardErasWithScores_.AddEntriesFrom(input, _repeated_leaderboardErasWithScores_codec);
            break;
          }
          case 288: {
            NumFallenHeroes = input.ReadUInt32();
            break;
          }
          case 296: {
            SeasonJourneyRank = input.ReadUInt64();
            break;
          }
          case 306:
          case 304: {
            deletedHeroes_.AddEntriesFrom(input, _repeated_deletedHeroes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PvpMatchPlayer : pb::IMessage<PvpMatchPlayer> {
    private static readonly pb::MessageParser<PvpMatchPlayer> _parser = new pb::MessageParser<PvpMatchPlayer>(() => new PvpMatchPlayer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvpMatchPlayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchPlayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchPlayer(PvpMatchPlayer other) : this() {
      accountId_ = other.accountId_;
      gbidClass_ = other.gbidClass_;
      isFemale_ = other.isFemale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchPlayer Clone() {
      return new PvpMatchPlayer(this);
    }

    /// <summary>Field number for the "account_id" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private ulong accountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "gbid_class" field.</summary>
    public const int GbidClassFieldNumber = 2;
    private uint gbidClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GbidClass {
      get { return gbidClass_; }
      set {
        gbidClass_ = value;
      }
    }

    /// <summary>Field number for the "is_female" field.</summary>
    public const int IsFemaleFieldNumber = 3;
    private bool isFemale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFemale {
      get { return isFemale_; }
      set {
        isFemale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvpMatchPlayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvpMatchPlayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (GbidClass != other.GbidClass) return false;
      if (IsFemale != other.IsFemale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0UL) hash ^= AccountId.GetHashCode();
      if (GbidClass != 0) hash ^= GbidClass.GetHashCode();
      if (IsFemale != false) hash ^= IsFemale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AccountId);
      }
      if (GbidClass != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GbidClass);
      }
      if (IsFemale != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFemale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AccountId);
      }
      if (GbidClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GbidClass);
      }
      if (IsFemale != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvpMatchPlayer other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0UL) {
        AccountId = other.AccountId;
      }
      if (other.GbidClass != 0) {
        GbidClass = other.GbidClass;
      }
      if (other.IsFemale != false) {
        IsFemale = other.IsFemale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AccountId = input.ReadUInt64();
            break;
          }
          case 16: {
            GbidClass = input.ReadUInt32();
            break;
          }
          case 24: {
            IsFemale = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PvpMatchPlayers : pb::IMessage<PvpMatchPlayers> {
    private static readonly pb::MessageParser<PvpMatchPlayers> _parser = new pb::MessageParser<PvpMatchPlayers>(() => new PvpMatchPlayers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvpMatchPlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchPlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchPlayers(PvpMatchPlayers other) : this() {
      team0_ = other.team0_.Clone();
      team1_ = other.team1_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchPlayers Clone() {
      return new PvpMatchPlayers(this);
    }

    /// <summary>Field number for the "team_0" field.</summary>
    public const int Team0FieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Profile.PvpMatchPlayer> _repeated_team0_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Profile.PvpMatchPlayer.Parser);
    private readonly pbc::RepeatedField<global::D3.Profile.PvpMatchPlayer> team0_ = new pbc::RepeatedField<global::D3.Profile.PvpMatchPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Profile.PvpMatchPlayer> Team0 {
      get { return team0_; }
    }

    /// <summary>Field number for the "team_1" field.</summary>
    public const int Team1FieldNumber = 2;
    private static readonly pb::FieldCodec<global::D3.Profile.PvpMatchPlayer> _repeated_team1_codec
        = pb::FieldCodec.ForMessage(18, global::D3.Profile.PvpMatchPlayer.Parser);
    private readonly pbc::RepeatedField<global::D3.Profile.PvpMatchPlayer> team1_ = new pbc::RepeatedField<global::D3.Profile.PvpMatchPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Profile.PvpMatchPlayer> Team1 {
      get { return team1_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvpMatchPlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvpMatchPlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!team0_.Equals(other.team0_)) return false;
      if(!team1_.Equals(other.team1_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= team0_.GetHashCode();
      hash ^= team1_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      team0_.WriteTo(output, _repeated_team0_codec);
      team1_.WriteTo(output, _repeated_team1_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += team0_.CalculateSize(_repeated_team0_codec);
      size += team1_.CalculateSize(_repeated_team1_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvpMatchPlayers other) {
      if (other == null) {
        return;
      }
      team0_.Add(other.team0_);
      team1_.Add(other.team1_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            team0_.AddEntriesFrom(input, _repeated_team0_codec);
            break;
          }
          case 18: {
            team1_.AddEntriesFrom(input, _repeated_team1_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PvpMatch : pb::IMessage<PvpMatch> {
    private static readonly pb::MessageParser<PvpMatch> _parser = new pb::MessageParser<PvpMatch>(() => new PvpMatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvpMatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatch(PvpMatch other) : this() {
      arena_ = other.arena_;
      players_ = other.players_ != null ? other.players_.Clone() : null;
      scoreTeam0_ = other.scoreTeam0_;
      scoreTeam1_ = other.scoreTeam1_;
      playTime_ = other.playTime_;
      heroId_ = other.heroId_;
      gameMode_ = other.gameMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatch Clone() {
      return new PvpMatch(this);
    }

    /// <summary>Field number for the "arena" field.</summary>
    public const int ArenaFieldNumber = 1;
    private uint arena_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Arena {
      get { return arena_; }
      set {
        arena_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private global::D3.Profile.PvpMatchPlayers players_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Profile.PvpMatchPlayers Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    /// <summary>Field number for the "score_team_0" field.</summary>
    public const int ScoreTeam0FieldNumber = 3;
    private uint scoreTeam0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScoreTeam0 {
      get { return scoreTeam0_; }
      set {
        scoreTeam0_ = value;
      }
    }

    /// <summary>Field number for the "score_team_1" field.</summary>
    public const int ScoreTeam1FieldNumber = 4;
    private uint scoreTeam1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScoreTeam1 {
      get { return scoreTeam1_; }
      set {
        scoreTeam1_ = value;
      }
    }

    /// <summary>Field number for the "play_time" field.</summary>
    public const int PlayTimeFieldNumber = 5;
    private uint playTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayTime {
      get { return playTime_; }
      set {
        playTime_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 6;
    private uint heroId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 7;
    private uint gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvpMatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvpMatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Arena != other.Arena) return false;
      if (!object.Equals(Players, other.Players)) return false;
      if (ScoreTeam0 != other.ScoreTeam0) return false;
      if (ScoreTeam1 != other.ScoreTeam1) return false;
      if (PlayTime != other.PlayTime) return false;
      if (HeroId != other.HeroId) return false;
      if (GameMode != other.GameMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Arena != 0) hash ^= Arena.GetHashCode();
      if (players_ != null) hash ^= Players.GetHashCode();
      if (ScoreTeam0 != 0) hash ^= ScoreTeam0.GetHashCode();
      if (ScoreTeam1 != 0) hash ^= ScoreTeam1.GetHashCode();
      if (PlayTime != 0) hash ^= PlayTime.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (GameMode != 0) hash ^= GameMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Arena != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Arena);
      }
      if (players_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Players);
      }
      if (ScoreTeam0 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ScoreTeam0);
      }
      if (ScoreTeam1 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ScoreTeam1);
      }
      if (PlayTime != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PlayTime);
      }
      if (HeroId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeroId);
      }
      if (GameMode != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(GameMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Arena != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Arena);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      if (ScoreTeam0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScoreTeam0);
      }
      if (ScoreTeam1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScoreTeam1);
      }
      if (PlayTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayTime);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvpMatch other) {
      if (other == null) {
        return;
      }
      if (other.Arena != 0) {
        Arena = other.Arena;
      }
      if (other.players_ != null) {
        if (players_ == null) {
          players_ = new global::D3.Profile.PvpMatchPlayers();
        }
        Players.MergeFrom(other.Players);
      }
      if (other.ScoreTeam0 != 0) {
        ScoreTeam0 = other.ScoreTeam0;
      }
      if (other.ScoreTeam1 != 0) {
        ScoreTeam1 = other.ScoreTeam1;
      }
      if (other.PlayTime != 0) {
        PlayTime = other.PlayTime;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.GameMode != 0) {
        GameMode = other.GameMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Arena = input.ReadUInt32();
            break;
          }
          case 18: {
            if (players_ == null) {
              players_ = new global::D3.Profile.PvpMatchPlayers();
            }
            input.ReadMessage(players_);
            break;
          }
          case 24: {
            ScoreTeam0 = input.ReadUInt32();
            break;
          }
          case 32: {
            ScoreTeam1 = input.ReadUInt32();
            break;
          }
          case 40: {
            PlayTime = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 56: {
            GameMode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PvpMatchList : pb::IMessage<PvpMatchList> {
    private static readonly pb::MessageParser<PvpMatchList> _parser = new pb::MessageParser<PvpMatchList>(() => new PvpMatchList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvpMatchList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchList(PvpMatchList other) : this() {
      matches_ = other.matches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpMatchList Clone() {
      return new PvpMatchList(this);
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Profile.PvpMatch> _repeated_matches_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Profile.PvpMatch.Parser);
    private readonly pbc::RepeatedField<global::D3.Profile.PvpMatch> matches_ = new pbc::RepeatedField<global::D3.Profile.PvpMatch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Profile.PvpMatch> Matches {
      get { return matches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvpMatchList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvpMatchList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matches_.Equals(other.matches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matches_.WriteTo(output, _repeated_matches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matches_.CalculateSize(_repeated_matches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvpMatchList other) {
      if (other == null) {
        return;
      }
      matches_.Add(other.matches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matches_.AddEntriesFrom(input, _repeated_matches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PvpTeam : pb::IMessage<PvpTeam> {
    private static readonly pb::MessageParser<PvpTeam> _parser = new pb::MessageParser<PvpTeam>(() => new PvpTeam());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PvpTeam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Profile.ProfileReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpTeam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpTeam(PvpTeam other) : this() {
      teamId_ = other.teamId_;
      rating_ = other.rating_;
      ratingVariance_ = other.ratingVariance_;
      bootstrap_ = other.bootstrap_;
      gamesPlayed_ = other.gamesPlayed_;
      lastPlayed_ = other.lastPlayed_;
      numMembers_ = other.numMembers_;
      gameMode_ = other.gameMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PvpTeam Clone() {
      return new PvpTeam(this);
    }

    /// <summary>Field number for the "team_id" field.</summary>
    public const int TeamIdFieldNumber = 1;
    private ulong teamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TeamId {
      get { return teamId_; }
      set {
        teamId_ = value;
      }
    }

    /// <summary>Field number for the "rating" field.</summary>
    public const int RatingFieldNumber = 2;
    private float rating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rating {
      get { return rating_; }
      set {
        rating_ = value;
      }
    }

    /// <summary>Field number for the "rating_variance" field.</summary>
    public const int RatingVarianceFieldNumber = 3;
    private float ratingVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RatingVariance {
      get { return ratingVariance_; }
      set {
        ratingVariance_ = value;
      }
    }

    /// <summary>Field number for the "bootstrap" field.</summary>
    public const int BootstrapFieldNumber = 4;
    private float bootstrap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bootstrap {
      get { return bootstrap_; }
      set {
        bootstrap_ = value;
      }
    }

    /// <summary>Field number for the "games_played" field.</summary>
    public const int GamesPlayedFieldNumber = 5;
    private int gamesPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GamesPlayed {
      get { return gamesPlayed_; }
      set {
        gamesPlayed_ = value;
      }
    }

    /// <summary>Field number for the "last_played" field.</summary>
    public const int LastPlayedFieldNumber = 6;
    private uint lastPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastPlayed {
      get { return lastPlayed_; }
      set {
        lastPlayed_ = value;
      }
    }

    /// <summary>Field number for the "num_members" field.</summary>
    public const int NumMembersFieldNumber = 7;
    private int numMembers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumMembers {
      get { return numMembers_; }
      set {
        numMembers_ = value;
      }
    }

    /// <summary>Field number for the "game_mode" field.</summary>
    public const int GameModeFieldNumber = 8;
    private int gameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameMode {
      get { return gameMode_; }
      set {
        gameMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PvpTeam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PvpTeam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TeamId != other.TeamId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rating, other.Rating)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RatingVariance, other.RatingVariance)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bootstrap, other.Bootstrap)) return false;
      if (GamesPlayed != other.GamesPlayed) return false;
      if (LastPlayed != other.LastPlayed) return false;
      if (NumMembers != other.NumMembers) return false;
      if (GameMode != other.GameMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TeamId != 0UL) hash ^= TeamId.GetHashCode();
      if (Rating != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rating);
      if (RatingVariance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RatingVariance);
      if (Bootstrap != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bootstrap);
      if (GamesPlayed != 0) hash ^= GamesPlayed.GetHashCode();
      if (LastPlayed != 0) hash ^= LastPlayed.GetHashCode();
      if (NumMembers != 0) hash ^= NumMembers.GetHashCode();
      if (GameMode != 0) hash ^= GameMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TeamId);
      }
      if (Rating != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Rating);
      }
      if (RatingVariance != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RatingVariance);
      }
      if (Bootstrap != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Bootstrap);
      }
      if (GamesPlayed != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GamesPlayed);
      }
      if (LastPlayed != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LastPlayed);
      }
      if (NumMembers != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NumMembers);
      }
      if (GameMode != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(GameMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TeamId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TeamId);
      }
      if (Rating != 0F) {
        size += 1 + 4;
      }
      if (RatingVariance != 0F) {
        size += 1 + 4;
      }
      if (Bootstrap != 0F) {
        size += 1 + 4;
      }
      if (GamesPlayed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GamesPlayed);
      }
      if (LastPlayed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastPlayed);
      }
      if (NumMembers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumMembers);
      }
      if (GameMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PvpTeam other) {
      if (other == null) {
        return;
      }
      if (other.TeamId != 0UL) {
        TeamId = other.TeamId;
      }
      if (other.Rating != 0F) {
        Rating = other.Rating;
      }
      if (other.RatingVariance != 0F) {
        RatingVariance = other.RatingVariance;
      }
      if (other.Bootstrap != 0F) {
        Bootstrap = other.Bootstrap;
      }
      if (other.GamesPlayed != 0) {
        GamesPlayed = other.GamesPlayed;
      }
      if (other.LastPlayed != 0) {
        LastPlayed = other.LastPlayed;
      }
      if (other.NumMembers != 0) {
        NumMembers = other.NumMembers;
      }
      if (other.GameMode != 0) {
        GameMode = other.GameMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TeamId = input.ReadUInt64();
            break;
          }
          case 21: {
            Rating = input.ReadFloat();
            break;
          }
          case 29: {
            RatingVariance = input.ReadFloat();
            break;
          }
          case 37: {
            Bootstrap = input.ReadFloat();
            break;
          }
          case 40: {
            GamesPlayed = input.ReadInt32();
            break;
          }
          case 48: {
            LastPlayed = input.ReadUInt32();
            break;
          }
          case 56: {
            NumMembers = input.ReadInt32();
            break;
          }
          case 64: {
            GameMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
