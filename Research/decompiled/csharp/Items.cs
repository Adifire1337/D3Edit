// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Items.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D3.Items {

  /// <summary>Holder for reflection information generated from Items.proto</summary>
  public static partial class ItemsReflection {

    #region Descriptor
    /// <summary>File descriptor for Items.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ItemsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtJdGVtcy5wcm90bxIIRDMuSXRlbXMaEUdhbWVCYWxhbmNlLnByb3RvGhNP",
            "bmxpbmVTZXJ2aWNlLnByb3RvIosBCgxSYXJlSXRlbU5hbWUSGwoTaXRlbV9u",
            "YW1lX2lzX3ByZWZpeBgBIAEoCBIdChVzbm9fYWZmaXhfc3RyaW5nX2xpc3QY",
            "AiABKA8SHwoXYWZmaXhfc3RyaW5nX2xpc3RfaW5kZXgYAyABKBESHgoWaXRl",
            "bV9zdHJpbmdfbGlzdF9pbmRleBgEIAEoESK6BwoJR2VuZXJhdG9yEgwKBHNl",
            "ZWQYASABKA0SKQoJZ2JfaGFuZGxlGAIgASgLMhYuRDMuR2FtZUJhbGFuY2Uu",
            "SGFuZGxlEhQKDGJhc2VfYWZmaXhlcxgDIAMoDxIuCg5yYXJlX2l0ZW1fbmFt",
            "ZRgEIAEoCzIWLkQzLkl0ZW1zLlJhcmVJdGVtTmFtZRIgChhkZXByZWNhdGVk",
            "X2VuY2hhbnRfYWZmaXgYBSABKA8SDQoFZmxhZ3MYBiABKA0SEgoKZHVyYWJp",
            "bGl0eRgHIAEoDRISCgpzdGFja19zaXplGAggASgEEhAKCGR5ZV90eXBlGAkg",
            "ASgNEhoKEml0ZW1fcXVhbGl0eV9sZXZlbBgKIAEoERIaChJpdGVtX2JpbmRp",
            "bmdfbGV2ZWwYCyABKBESFgoObWF4X2R1cmFiaWxpdHkYDCABKA0SLQoIY29u",
            "dGVudHMYDSADKAsyGy5EMy5JdGVtcy5FbWJlZGRlZEdlbmVyYXRvchIdChVp",
            "dGVtX3VubG9ja190aW1lc3RhbXAYDiABKAQSJAocZGVwcmVjYXRlZF9lbmNo",
            "YW50X3JhbmdlX3ZhbBgPIAEoDRIcChRsZWdlbmRhcnlfaXRlbV9sZXZlbBgQ",
            "IAEoDRIVCg10cmFuc21vZ19nYmlkGBEgASgPEhYKDnNlYXNvbl9jcmVhdGVk",
            "GBIgASgNEh8KF21heF9kdXJhYmlsaXR5X29yaWdpbmFsGBMgASgNEhsKE2Vu",
            "Y2hhbnRlZF9hZmZpeF9vbGQYFCABKA8SGwoTZW5jaGFudGVkX2FmZml4X25l",
            "dxgVIAEoDxIgChhsZWdlbmRhcnlfYmFzZV9pdGVtX2diaWQYFiABKA8SHAoU",
            "ZW5jaGFudGVkX2FmZml4X3NlZWQYFyABKA0SHQoVZW5jaGFudGVkX2FmZml4",
            "X2NvdW50GBggASgNEhgKEHRyYWRlX2FjY291bnRfaWQYGSADKAQSGAoQdHJh",
            "ZGVfdGlja3NfbGVmdBgaIAEoDRISCgpqZXdlbF9yYW5rGBsgASgREhkKEWNv",
            "bnNvbGVfbWF4X2xldmVsGBwgASgNEhoKEmNvbnNvbGVfcHJvbW9faXRlbRgd",
            "IAEoCBIQCghoYXJkY29yZRgeIAEoCBIlCh1kZXByZWNhdGVkX2NyYWZ0ZWRf",
            "aXRlbV9sZXZlbBgfIAEoDRIfChdjdWJlX2VuY2hhbnRlZF9nZW1fdHlwZRgg",
            "IAEoDRIfChdjdWJlX2VuY2hhbnRlZF9nZW1fcmFuaxghIAEoESI4Cg1HZW5l",
            "cmF0b3JMaXN0EicKCmdlbmVyYXRvcnMYASADKAsyEy5EMy5JdGVtcy5HZW5l",
            "cmF0b3IiYQoRRW1iZWRkZWRHZW5lcmF0b3ISJAoCaWQYASABKAsyGC5EMy5P",
            "bmxpbmVTZXJ2aWNlLkl0ZW1JZBImCglnZW5lcmF0b3IYAiABKAsyEy5EMy5J",
            "dGVtcy5HZW5lcmF0b3IiRQoORnJpZW5kR2lmdEluZm8SGwoTaWRfZnJpZW5k",
            "X3JlY2lwaWVudBgBIAEoBBIWCg5yZWNpcGllbnRfbmFtZRgCIAEoCSLLAgoJ",
            "U2F2ZWRJdGVtEiQKAmlkGAEgASgLMhguRDMuT25saW5lU2VydmljZS5JdGVt",
            "SWQSMwoPb3duZXJfZW50aXR5X2lkGAIgASgLMhouRDMuT25saW5lU2Vydmlj",
            "ZS5FbnRpdHlJZBIrCglzb2NrZXRfaWQYAyABKAsyGC5EMy5PbmxpbmVTZXJ2",
            "aWNlLkl0ZW1JZBIWCg5oaXJlbGluZ19jbGFzcxgEIAEoERIRCglpdGVtX3Ns",
            "b3QYBSABKBESFAoMc3F1YXJlX2luZGV4GAYgASgREhkKEXVzZWRfc29ja2V0",
            "X2NvdW50GAcgASgNEiYKCWdlbmVyYXRvchgIIAEoCzITLkQzLkl0ZW1zLkdl",
            "bmVyYXRvchIyChBmcmllbmRfZ2lmdF9pbmZvGAkgASgLMhguRDMuSXRlbXMu",
            "RnJpZW5kR2lmdEluZm8iLgoISXRlbUxpc3QSIgoFaXRlbXMYASADKAsyEy5E",
            "My5JdGVtcy5TYXZlZEl0ZW0iNAoPTWFpbEF0dGFjaG1lbnRzEiEKBWl0ZW1z",
            "GAEgASgLMhIuRDMuSXRlbXMuSXRlbUxpc3QiuQIKBE1haWwSLgoKYWNjb3Vu",
            "dF90bxgBIAEoCzIaLkQzLk9ubGluZVNlcnZpY2UuRW50aXR5SWQSMAoMYWNj",
            "b3VudF9mcm9tGAIgASgLMhouRDMuT25saW5lU2VydmljZS5FbnRpdHlJZBIP",
            "CgdtYWlsX2lkGAMgASgEEg0KBXRpdGxlGAQgASgJEgwKBGJvZHkYBSABKAkS",
            "DgoGc3RhdHVzGAYgASgNEhEKCXNlbmRfdGltZRgHIAEoDRIuCgthdHRhY2ht",
            "ZW50cxgIIAEoCzIZLkQzLkl0ZW1zLk1haWxBdHRhY2htZW50cxIUCgxwYXJ0",
            "aXRpb25faWQYCSABKA0SFgoOc2Vhc29uX2NyZWF0ZWQYCiABKA0SEQoJZXhw",
            "aXJlX2F0GAsgASgEEg0KBWZsYWdzGAwgASgNIiYKBU1haWxzEh0KBW1haWxz",
            "GAEgAygLMg4uRDMuSXRlbXMuTWFpbCJeCgxDdXJyZW5jeURhdGESFwoPZ2Jp",
            "ZF9kZXByZWNhdGVkGAEgASgPEg0KBWNvdW50GAIgASgDEgoKAmlkGAMgASgN",
            "EhoKEmRhdGFfcGVyc2lzdF9mbGFncxgEIAEoDSI9ChFDdXJyZW5jeVNhdmVk",
            "RGF0YRIoCghjdXJyZW5jeRgBIAMoCzIWLkQzLkl0ZW1zLkN1cnJlbmN5RGF0",
            "YWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D3.GameBalance.GameBalanceReflection.Descriptor, global::D3.OnlineService.OnlineServiceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.RareItemName), global::D3.Items.RareItemName.Parser, new[]{ "ItemNameIsPrefix", "SnoAffixStringList", "AffixStringListIndex", "ItemStringListIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.Generator), global::D3.Items.Generator.Parser, new[]{ "Seed", "GbHandle", "BaseAffixes", "RareItemName", "DeprecatedEnchantAffix", "Flags", "Durability", "StackSize", "DyeType", "ItemQualityLevel", "ItemBindingLevel", "MaxDurability", "Contents", "ItemUnlockTimestamp", "DeprecatedEnchantRangeVal", "LegendaryItemLevel", "TransmogGbid", "SeasonCreated", "MaxDurabilityOriginal", "EnchantedAffixOld", "EnchantedAffixNew", "LegendaryBaseItemGbid", "EnchantedAffixSeed", "EnchantedAffixCount", "TradeAccountId", "TradeTicksLeft", "JewelRank", "ConsoleMaxLevel", "ConsolePromoItem", "Hardcore", "DeprecatedCraftedItemLevel", "CubeEnchantedGemType", "CubeEnchantedGemRank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.GeneratorList), global::D3.Items.GeneratorList.Parser, new[]{ "Generators" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.EmbeddedGenerator), global::D3.Items.EmbeddedGenerator.Parser, new[]{ "Id", "Generator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.FriendGiftInfo), global::D3.Items.FriendGiftInfo.Parser, new[]{ "IdFriendRecipient", "RecipientName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.SavedItem), global::D3.Items.SavedItem.Parser, new[]{ "Id", "OwnerEntityId", "SocketId", "HirelingClass", "ItemSlot", "SquareIndex", "UsedSocketCount", "Generator", "FriendGiftInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.ItemList), global::D3.Items.ItemList.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.MailAttachments), global::D3.Items.MailAttachments.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.Mail), global::D3.Items.Mail.Parser, new[]{ "AccountTo", "AccountFrom", "MailId", "Title", "Body", "Status", "SendTime", "Attachments", "PartitionId", "SeasonCreated", "ExpireAt", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.Mails), global::D3.Items.Mails.Parser, new[]{ "Mails_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.CurrencyData), global::D3.Items.CurrencyData.Parser, new[]{ "GbidDeprecated", "Count", "Id", "DataPersistFlags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Items.CurrencySavedData), global::D3.Items.CurrencySavedData.Parser, new[]{ "Currency" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RareItemName : pb::IMessage<RareItemName> {
    private static readonly pb::MessageParser<RareItemName> _parser = new pb::MessageParser<RareItemName>(() => new RareItemName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RareItemName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RareItemName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RareItemName(RareItemName other) : this() {
      itemNameIsPrefix_ = other.itemNameIsPrefix_;
      snoAffixStringList_ = other.snoAffixStringList_;
      affixStringListIndex_ = other.affixStringListIndex_;
      itemStringListIndex_ = other.itemStringListIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RareItemName Clone() {
      return new RareItemName(this);
    }

    /// <summary>Field number for the "item_name_is_prefix" field.</summary>
    public const int ItemNameIsPrefixFieldNumber = 1;
    private bool itemNameIsPrefix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ItemNameIsPrefix {
      get { return itemNameIsPrefix_; }
      set {
        itemNameIsPrefix_ = value;
      }
    }

    /// <summary>Field number for the "sno_affix_string_list" field.</summary>
    public const int SnoAffixStringListFieldNumber = 2;
    private int snoAffixStringList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SnoAffixStringList {
      get { return snoAffixStringList_; }
      set {
        snoAffixStringList_ = value;
      }
    }

    /// <summary>Field number for the "affix_string_list_index" field.</summary>
    public const int AffixStringListIndexFieldNumber = 3;
    private int affixStringListIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AffixStringListIndex {
      get { return affixStringListIndex_; }
      set {
        affixStringListIndex_ = value;
      }
    }

    /// <summary>Field number for the "item_string_list_index" field.</summary>
    public const int ItemStringListIndexFieldNumber = 4;
    private int itemStringListIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemStringListIndex {
      get { return itemStringListIndex_; }
      set {
        itemStringListIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RareItemName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RareItemName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemNameIsPrefix != other.ItemNameIsPrefix) return false;
      if (SnoAffixStringList != other.SnoAffixStringList) return false;
      if (AffixStringListIndex != other.AffixStringListIndex) return false;
      if (ItemStringListIndex != other.ItemStringListIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemNameIsPrefix != false) hash ^= ItemNameIsPrefix.GetHashCode();
      if (SnoAffixStringList != 0) hash ^= SnoAffixStringList.GetHashCode();
      if (AffixStringListIndex != 0) hash ^= AffixStringListIndex.GetHashCode();
      if (ItemStringListIndex != 0) hash ^= ItemStringListIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemNameIsPrefix != false) {
        output.WriteRawTag(8);
        output.WriteBool(ItemNameIsPrefix);
      }
      if (SnoAffixStringList != 0) {
        output.WriteRawTag(21);
        output.WriteSFixed32(SnoAffixStringList);
      }
      if (AffixStringListIndex != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(AffixStringListIndex);
      }
      if (ItemStringListIndex != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(ItemStringListIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemNameIsPrefix != false) {
        size += 1 + 1;
      }
      if (SnoAffixStringList != 0) {
        size += 1 + 4;
      }
      if (AffixStringListIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AffixStringListIndex);
      }
      if (ItemStringListIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemStringListIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RareItemName other) {
      if (other == null) {
        return;
      }
      if (other.ItemNameIsPrefix != false) {
        ItemNameIsPrefix = other.ItemNameIsPrefix;
      }
      if (other.SnoAffixStringList != 0) {
        SnoAffixStringList = other.SnoAffixStringList;
      }
      if (other.AffixStringListIndex != 0) {
        AffixStringListIndex = other.AffixStringListIndex;
      }
      if (other.ItemStringListIndex != 0) {
        ItemStringListIndex = other.ItemStringListIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemNameIsPrefix = input.ReadBool();
            break;
          }
          case 21: {
            SnoAffixStringList = input.ReadSFixed32();
            break;
          }
          case 24: {
            AffixStringListIndex = input.ReadSInt32();
            break;
          }
          case 32: {
            ItemStringListIndex = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Generator : pb::IMessage<Generator> {
    private static readonly pb::MessageParser<Generator> _parser = new pb::MessageParser<Generator>(() => new Generator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Generator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Generator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Generator(Generator other) : this() {
      seed_ = other.seed_;
      gbHandle_ = other.gbHandle_ != null ? other.gbHandle_.Clone() : null;
      baseAffixes_ = other.baseAffixes_.Clone();
      rareItemName_ = other.rareItemName_ != null ? other.rareItemName_.Clone() : null;
      deprecatedEnchantAffix_ = other.deprecatedEnchantAffix_;
      flags_ = other.flags_;
      durability_ = other.durability_;
      stackSize_ = other.stackSize_;
      dyeType_ = other.dyeType_;
      itemQualityLevel_ = other.itemQualityLevel_;
      itemBindingLevel_ = other.itemBindingLevel_;
      maxDurability_ = other.maxDurability_;
      contents_ = other.contents_.Clone();
      itemUnlockTimestamp_ = other.itemUnlockTimestamp_;
      deprecatedEnchantRangeVal_ = other.deprecatedEnchantRangeVal_;
      legendaryItemLevel_ = other.legendaryItemLevel_;
      transmogGbid_ = other.transmogGbid_;
      seasonCreated_ = other.seasonCreated_;
      maxDurabilityOriginal_ = other.maxDurabilityOriginal_;
      enchantedAffixOld_ = other.enchantedAffixOld_;
      enchantedAffixNew_ = other.enchantedAffixNew_;
      legendaryBaseItemGbid_ = other.legendaryBaseItemGbid_;
      enchantedAffixSeed_ = other.enchantedAffixSeed_;
      enchantedAffixCount_ = other.enchantedAffixCount_;
      tradeAccountId_ = other.tradeAccountId_.Clone();
      tradeTicksLeft_ = other.tradeTicksLeft_;
      jewelRank_ = other.jewelRank_;
      consoleMaxLevel_ = other.consoleMaxLevel_;
      consolePromoItem_ = other.consolePromoItem_;
      hardcore_ = other.hardcore_;
      deprecatedCraftedItemLevel_ = other.deprecatedCraftedItemLevel_;
      cubeEnchantedGemType_ = other.cubeEnchantedGemType_;
      cubeEnchantedGemRank_ = other.cubeEnchantedGemRank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Generator Clone() {
      return new Generator(this);
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 1;
    private uint seed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Seed {
      get { return seed_; }
      set {
        seed_ = value;
      }
    }

    /// <summary>Field number for the "gb_handle" field.</summary>
    public const int GbHandleFieldNumber = 2;
    private global::D3.GameBalance.Handle gbHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.GameBalance.Handle GbHandle {
      get { return gbHandle_; }
      set {
        gbHandle_ = value;
      }
    }

    /// <summary>Field number for the "base_affixes" field.</summary>
    public const int BaseAffixesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_baseAffixes_codec
        = pb::FieldCodec.ForSFixed32(26);
    private readonly pbc::RepeatedField<int> baseAffixes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BaseAffixes {
      get { return baseAffixes_; }
    }

    /// <summary>Field number for the "rare_item_name" field.</summary>
    public const int RareItemNameFieldNumber = 4;
    private global::D3.Items.RareItemName rareItemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.RareItemName RareItemName {
      get { return rareItemName_; }
      set {
        rareItemName_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_enchant_affix" field.</summary>
    public const int DeprecatedEnchantAffixFieldNumber = 5;
    private int deprecatedEnchantAffix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeprecatedEnchantAffix {
      get { return deprecatedEnchantAffix_; }
      set {
        deprecatedEnchantAffix_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 6;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "durability" field.</summary>
    public const int DurabilityFieldNumber = 7;
    private uint durability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    /// <summary>Field number for the "stack_size" field.</summary>
    public const int StackSizeFieldNumber = 8;
    private ulong stackSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StackSize {
      get { return stackSize_; }
      set {
        stackSize_ = value;
      }
    }

    /// <summary>Field number for the "dye_type" field.</summary>
    public const int DyeTypeFieldNumber = 9;
    private uint dyeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DyeType {
      get { return dyeType_; }
      set {
        dyeType_ = value;
      }
    }

    /// <summary>Field number for the "item_quality_level" field.</summary>
    public const int ItemQualityLevelFieldNumber = 10;
    private int itemQualityLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemQualityLevel {
      get { return itemQualityLevel_; }
      set {
        itemQualityLevel_ = value;
      }
    }

    /// <summary>Field number for the "item_binding_level" field.</summary>
    public const int ItemBindingLevelFieldNumber = 11;
    private int itemBindingLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemBindingLevel {
      get { return itemBindingLevel_; }
      set {
        itemBindingLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_durability" field.</summary>
    public const int MaxDurabilityFieldNumber = 12;
    private uint maxDurability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxDurability {
      get { return maxDurability_; }
      set {
        maxDurability_ = value;
      }
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::D3.Items.EmbeddedGenerator> _repeated_contents_codec
        = pb::FieldCodec.ForMessage(106, global::D3.Items.EmbeddedGenerator.Parser);
    private readonly pbc::RepeatedField<global::D3.Items.EmbeddedGenerator> contents_ = new pbc::RepeatedField<global::D3.Items.EmbeddedGenerator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Items.EmbeddedGenerator> Contents {
      get { return contents_; }
    }

    /// <summary>Field number for the "item_unlock_timestamp" field.</summary>
    public const int ItemUnlockTimestampFieldNumber = 14;
    private ulong itemUnlockTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemUnlockTimestamp {
      get { return itemUnlockTimestamp_; }
      set {
        itemUnlockTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_enchant_range_val" field.</summary>
    public const int DeprecatedEnchantRangeValFieldNumber = 15;
    private uint deprecatedEnchantRangeVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedEnchantRangeVal {
      get { return deprecatedEnchantRangeVal_; }
      set {
        deprecatedEnchantRangeVal_ = value;
      }
    }

    /// <summary>Field number for the "legendary_item_level" field.</summary>
    public const int LegendaryItemLevelFieldNumber = 16;
    private uint legendaryItemLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LegendaryItemLevel {
      get { return legendaryItemLevel_; }
      set {
        legendaryItemLevel_ = value;
      }
    }

    /// <summary>Field number for the "transmog_gbid" field.</summary>
    public const int TransmogGbidFieldNumber = 17;
    private int transmogGbid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TransmogGbid {
      get { return transmogGbid_; }
      set {
        transmogGbid_ = value;
      }
    }

    /// <summary>Field number for the "season_created" field.</summary>
    public const int SeasonCreatedFieldNumber = 18;
    private uint seasonCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonCreated {
      get { return seasonCreated_; }
      set {
        seasonCreated_ = value;
      }
    }

    /// <summary>Field number for the "max_durability_original" field.</summary>
    public const int MaxDurabilityOriginalFieldNumber = 19;
    private uint maxDurabilityOriginal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxDurabilityOriginal {
      get { return maxDurabilityOriginal_; }
      set {
        maxDurabilityOriginal_ = value;
      }
    }

    /// <summary>Field number for the "enchanted_affix_old" field.</summary>
    public const int EnchantedAffixOldFieldNumber = 20;
    private int enchantedAffixOld_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnchantedAffixOld {
      get { return enchantedAffixOld_; }
      set {
        enchantedAffixOld_ = value;
      }
    }

    /// <summary>Field number for the "enchanted_affix_new" field.</summary>
    public const int EnchantedAffixNewFieldNumber = 21;
    private int enchantedAffixNew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnchantedAffixNew {
      get { return enchantedAffixNew_; }
      set {
        enchantedAffixNew_ = value;
      }
    }

    /// <summary>Field number for the "legendary_base_item_gbid" field.</summary>
    public const int LegendaryBaseItemGbidFieldNumber = 22;
    private int legendaryBaseItemGbid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LegendaryBaseItemGbid {
      get { return legendaryBaseItemGbid_; }
      set {
        legendaryBaseItemGbid_ = value;
      }
    }

    /// <summary>Field number for the "enchanted_affix_seed" field.</summary>
    public const int EnchantedAffixSeedFieldNumber = 23;
    private uint enchantedAffixSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnchantedAffixSeed {
      get { return enchantedAffixSeed_; }
      set {
        enchantedAffixSeed_ = value;
      }
    }

    /// <summary>Field number for the "enchanted_affix_count" field.</summary>
    public const int EnchantedAffixCountFieldNumber = 24;
    private uint enchantedAffixCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnchantedAffixCount {
      get { return enchantedAffixCount_; }
      set {
        enchantedAffixCount_ = value;
      }
    }

    /// <summary>Field number for the "trade_account_id" field.</summary>
    public const int TradeAccountIdFieldNumber = 25;
    private static readonly pb::FieldCodec<ulong> _repeated_tradeAccountId_codec
        = pb::FieldCodec.ForUInt64(202);
    private readonly pbc::RepeatedField<ulong> tradeAccountId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> TradeAccountId {
      get { return tradeAccountId_; }
    }

    /// <summary>Field number for the "trade_ticks_left" field.</summary>
    public const int TradeTicksLeftFieldNumber = 26;
    private uint tradeTicksLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TradeTicksLeft {
      get { return tradeTicksLeft_; }
      set {
        tradeTicksLeft_ = value;
      }
    }

    /// <summary>Field number for the "jewel_rank" field.</summary>
    public const int JewelRankFieldNumber = 27;
    private int jewelRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JewelRank {
      get { return jewelRank_; }
      set {
        jewelRank_ = value;
      }
    }

    /// <summary>Field number for the "console_max_level" field.</summary>
    public const int ConsoleMaxLevelFieldNumber = 28;
    private uint consoleMaxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConsoleMaxLevel {
      get { return consoleMaxLevel_; }
      set {
        consoleMaxLevel_ = value;
      }
    }

    /// <summary>Field number for the "console_promo_item" field.</summary>
    public const int ConsolePromoItemFieldNumber = 29;
    private bool consolePromoItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ConsolePromoItem {
      get { return consolePromoItem_; }
      set {
        consolePromoItem_ = value;
      }
    }

    /// <summary>Field number for the "hardcore" field.</summary>
    public const int HardcoreFieldNumber = 30;
    private bool hardcore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hardcore {
      get { return hardcore_; }
      set {
        hardcore_ = value;
      }
    }

    /// <summary>Field number for the "deprecated_crafted_item_level" field.</summary>
    public const int DeprecatedCraftedItemLevelFieldNumber = 31;
    private uint deprecatedCraftedItemLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeprecatedCraftedItemLevel {
      get { return deprecatedCraftedItemLevel_; }
      set {
        deprecatedCraftedItemLevel_ = value;
      }
    }

    /// <summary>Field number for the "cube_enchanted_gem_type" field.</summary>
    public const int CubeEnchantedGemTypeFieldNumber = 32;
    private uint cubeEnchantedGemType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CubeEnchantedGemType {
      get { return cubeEnchantedGemType_; }
      set {
        cubeEnchantedGemType_ = value;
      }
    }

    /// <summary>Field number for the "cube_enchanted_gem_rank" field.</summary>
    public const int CubeEnchantedGemRankFieldNumber = 33;
    private int cubeEnchantedGemRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CubeEnchantedGemRank {
      get { return cubeEnchantedGemRank_; }
      set {
        cubeEnchantedGemRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Generator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Generator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Seed != other.Seed) return false;
      if (!object.Equals(GbHandle, other.GbHandle)) return false;
      if(!baseAffixes_.Equals(other.baseAffixes_)) return false;
      if (!object.Equals(RareItemName, other.RareItemName)) return false;
      if (DeprecatedEnchantAffix != other.DeprecatedEnchantAffix) return false;
      if (Flags != other.Flags) return false;
      if (Durability != other.Durability) return false;
      if (StackSize != other.StackSize) return false;
      if (DyeType != other.DyeType) return false;
      if (ItemQualityLevel != other.ItemQualityLevel) return false;
      if (ItemBindingLevel != other.ItemBindingLevel) return false;
      if (MaxDurability != other.MaxDurability) return false;
      if(!contents_.Equals(other.contents_)) return false;
      if (ItemUnlockTimestamp != other.ItemUnlockTimestamp) return false;
      if (DeprecatedEnchantRangeVal != other.DeprecatedEnchantRangeVal) return false;
      if (LegendaryItemLevel != other.LegendaryItemLevel) return false;
      if (TransmogGbid != other.TransmogGbid) return false;
      if (SeasonCreated != other.SeasonCreated) return false;
      if (MaxDurabilityOriginal != other.MaxDurabilityOriginal) return false;
      if (EnchantedAffixOld != other.EnchantedAffixOld) return false;
      if (EnchantedAffixNew != other.EnchantedAffixNew) return false;
      if (LegendaryBaseItemGbid != other.LegendaryBaseItemGbid) return false;
      if (EnchantedAffixSeed != other.EnchantedAffixSeed) return false;
      if (EnchantedAffixCount != other.EnchantedAffixCount) return false;
      if(!tradeAccountId_.Equals(other.tradeAccountId_)) return false;
      if (TradeTicksLeft != other.TradeTicksLeft) return false;
      if (JewelRank != other.JewelRank) return false;
      if (ConsoleMaxLevel != other.ConsoleMaxLevel) return false;
      if (ConsolePromoItem != other.ConsolePromoItem) return false;
      if (Hardcore != other.Hardcore) return false;
      if (DeprecatedCraftedItemLevel != other.DeprecatedCraftedItemLevel) return false;
      if (CubeEnchantedGemType != other.CubeEnchantedGemType) return false;
      if (CubeEnchantedGemRank != other.CubeEnchantedGemRank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Seed != 0) hash ^= Seed.GetHashCode();
      if (gbHandle_ != null) hash ^= GbHandle.GetHashCode();
      hash ^= baseAffixes_.GetHashCode();
      if (rareItemName_ != null) hash ^= RareItemName.GetHashCode();
      if (DeprecatedEnchantAffix != 0) hash ^= DeprecatedEnchantAffix.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (StackSize != 0UL) hash ^= StackSize.GetHashCode();
      if (DyeType != 0) hash ^= DyeType.GetHashCode();
      if (ItemQualityLevel != 0) hash ^= ItemQualityLevel.GetHashCode();
      if (ItemBindingLevel != 0) hash ^= ItemBindingLevel.GetHashCode();
      if (MaxDurability != 0) hash ^= MaxDurability.GetHashCode();
      hash ^= contents_.GetHashCode();
      if (ItemUnlockTimestamp != 0UL) hash ^= ItemUnlockTimestamp.GetHashCode();
      if (DeprecatedEnchantRangeVal != 0) hash ^= DeprecatedEnchantRangeVal.GetHashCode();
      if (LegendaryItemLevel != 0) hash ^= LegendaryItemLevel.GetHashCode();
      if (TransmogGbid != 0) hash ^= TransmogGbid.GetHashCode();
      if (SeasonCreated != 0) hash ^= SeasonCreated.GetHashCode();
      if (MaxDurabilityOriginal != 0) hash ^= MaxDurabilityOriginal.GetHashCode();
      if (EnchantedAffixOld != 0) hash ^= EnchantedAffixOld.GetHashCode();
      if (EnchantedAffixNew != 0) hash ^= EnchantedAffixNew.GetHashCode();
      if (LegendaryBaseItemGbid != 0) hash ^= LegendaryBaseItemGbid.GetHashCode();
      if (EnchantedAffixSeed != 0) hash ^= EnchantedAffixSeed.GetHashCode();
      if (EnchantedAffixCount != 0) hash ^= EnchantedAffixCount.GetHashCode();
      hash ^= tradeAccountId_.GetHashCode();
      if (TradeTicksLeft != 0) hash ^= TradeTicksLeft.GetHashCode();
      if (JewelRank != 0) hash ^= JewelRank.GetHashCode();
      if (ConsoleMaxLevel != 0) hash ^= ConsoleMaxLevel.GetHashCode();
      if (ConsolePromoItem != false) hash ^= ConsolePromoItem.GetHashCode();
      if (Hardcore != false) hash ^= Hardcore.GetHashCode();
      if (DeprecatedCraftedItemLevel != 0) hash ^= DeprecatedCraftedItemLevel.GetHashCode();
      if (CubeEnchantedGemType != 0) hash ^= CubeEnchantedGemType.GetHashCode();
      if (CubeEnchantedGemRank != 0) hash ^= CubeEnchantedGemRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seed != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Seed);
      }
      if (gbHandle_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GbHandle);
      }
      baseAffixes_.WriteTo(output, _repeated_baseAffixes_codec);
      if (rareItemName_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RareItemName);
      }
      if (DeprecatedEnchantAffix != 0) {
        output.WriteRawTag(45);
        output.WriteSFixed32(DeprecatedEnchantAffix);
      }
      if (Flags != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Flags);
      }
      if (Durability != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Durability);
      }
      if (StackSize != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(StackSize);
      }
      if (DyeType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DyeType);
      }
      if (ItemQualityLevel != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(ItemQualityLevel);
      }
      if (ItemBindingLevel != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(ItemBindingLevel);
      }
      if (MaxDurability != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxDurability);
      }
      contents_.WriteTo(output, _repeated_contents_codec);
      if (ItemUnlockTimestamp != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ItemUnlockTimestamp);
      }
      if (DeprecatedEnchantRangeVal != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(DeprecatedEnchantRangeVal);
      }
      if (LegendaryItemLevel != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(LegendaryItemLevel);
      }
      if (TransmogGbid != 0) {
        output.WriteRawTag(141, 1);
        output.WriteSFixed32(TransmogGbid);
      }
      if (SeasonCreated != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(SeasonCreated);
      }
      if (MaxDurabilityOriginal != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(MaxDurabilityOriginal);
      }
      if (EnchantedAffixOld != 0) {
        output.WriteRawTag(165, 1);
        output.WriteSFixed32(EnchantedAffixOld);
      }
      if (EnchantedAffixNew != 0) {
        output.WriteRawTag(173, 1);
        output.WriteSFixed32(EnchantedAffixNew);
      }
      if (LegendaryBaseItemGbid != 0) {
        output.WriteRawTag(181, 1);
        output.WriteSFixed32(LegendaryBaseItemGbid);
      }
      if (EnchantedAffixSeed != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(EnchantedAffixSeed);
      }
      if (EnchantedAffixCount != 0) {
        output.WriteRawTag(192, 1);
        output.WriteUInt32(EnchantedAffixCount);
      }
      tradeAccountId_.WriteTo(output, _repeated_tradeAccountId_codec);
      if (TradeTicksLeft != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(TradeTicksLeft);
      }
      if (JewelRank != 0) {
        output.WriteRawTag(216, 1);
        output.WriteSInt32(JewelRank);
      }
      if (ConsoleMaxLevel != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ConsoleMaxLevel);
      }
      if (ConsolePromoItem != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(ConsolePromoItem);
      }
      if (Hardcore != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(Hardcore);
      }
      if (DeprecatedCraftedItemLevel != 0) {
        output.WriteRawTag(248, 1);
        output.WriteUInt32(DeprecatedCraftedItemLevel);
      }
      if (CubeEnchantedGemType != 0) {
        output.WriteRawTag(128, 2);
        output.WriteUInt32(CubeEnchantedGemType);
      }
      if (CubeEnchantedGemRank != 0) {
        output.WriteRawTag(136, 2);
        output.WriteSInt32(CubeEnchantedGemRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Seed);
      }
      if (gbHandle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GbHandle);
      }
      size += baseAffixes_.CalculateSize(_repeated_baseAffixes_codec);
      if (rareItemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RareItemName);
      }
      if (DeprecatedEnchantAffix != 0) {
        size += 1 + 4;
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (Durability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Durability);
      }
      if (StackSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StackSize);
      }
      if (DyeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DyeType);
      }
      if (ItemQualityLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemQualityLevel);
      }
      if (ItemBindingLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemBindingLevel);
      }
      if (MaxDurability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxDurability);
      }
      size += contents_.CalculateSize(_repeated_contents_codec);
      if (ItemUnlockTimestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUnlockTimestamp);
      }
      if (DeprecatedEnchantRangeVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedEnchantRangeVal);
      }
      if (LegendaryItemLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegendaryItemLevel);
      }
      if (TransmogGbid != 0) {
        size += 2 + 4;
      }
      if (SeasonCreated != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SeasonCreated);
      }
      if (MaxDurabilityOriginal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxDurabilityOriginal);
      }
      if (EnchantedAffixOld != 0) {
        size += 2 + 4;
      }
      if (EnchantedAffixNew != 0) {
        size += 2 + 4;
      }
      if (LegendaryBaseItemGbid != 0) {
        size += 2 + 4;
      }
      if (EnchantedAffixSeed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EnchantedAffixSeed);
      }
      if (EnchantedAffixCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EnchantedAffixCount);
      }
      size += tradeAccountId_.CalculateSize(_repeated_tradeAccountId_codec);
      if (TradeTicksLeft != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TradeTicksLeft);
      }
      if (JewelRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(JewelRank);
      }
      if (ConsoleMaxLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ConsoleMaxLevel);
      }
      if (ConsolePromoItem != false) {
        size += 2 + 1;
      }
      if (Hardcore != false) {
        size += 2 + 1;
      }
      if (DeprecatedCraftedItemLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeprecatedCraftedItemLevel);
      }
      if (CubeEnchantedGemType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CubeEnchantedGemType);
      }
      if (CubeEnchantedGemRank != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(CubeEnchantedGemRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Generator other) {
      if (other == null) {
        return;
      }
      if (other.Seed != 0) {
        Seed = other.Seed;
      }
      if (other.gbHandle_ != null) {
        if (gbHandle_ == null) {
          gbHandle_ = new global::D3.GameBalance.Handle();
        }
        GbHandle.MergeFrom(other.GbHandle);
      }
      baseAffixes_.Add(other.baseAffixes_);
      if (other.rareItemName_ != null) {
        if (rareItemName_ == null) {
          rareItemName_ = new global::D3.Items.RareItemName();
        }
        RareItemName.MergeFrom(other.RareItemName);
      }
      if (other.DeprecatedEnchantAffix != 0) {
        DeprecatedEnchantAffix = other.DeprecatedEnchantAffix;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      if (other.StackSize != 0UL) {
        StackSize = other.StackSize;
      }
      if (other.DyeType != 0) {
        DyeType = other.DyeType;
      }
      if (other.ItemQualityLevel != 0) {
        ItemQualityLevel = other.ItemQualityLevel;
      }
      if (other.ItemBindingLevel != 0) {
        ItemBindingLevel = other.ItemBindingLevel;
      }
      if (other.MaxDurability != 0) {
        MaxDurability = other.MaxDurability;
      }
      contents_.Add(other.contents_);
      if (other.ItemUnlockTimestamp != 0UL) {
        ItemUnlockTimestamp = other.ItemUnlockTimestamp;
      }
      if (other.DeprecatedEnchantRangeVal != 0) {
        DeprecatedEnchantRangeVal = other.DeprecatedEnchantRangeVal;
      }
      if (other.LegendaryItemLevel != 0) {
        LegendaryItemLevel = other.LegendaryItemLevel;
      }
      if (other.TransmogGbid != 0) {
        TransmogGbid = other.TransmogGbid;
      }
      if (other.SeasonCreated != 0) {
        SeasonCreated = other.SeasonCreated;
      }
      if (other.MaxDurabilityOriginal != 0) {
        MaxDurabilityOriginal = other.MaxDurabilityOriginal;
      }
      if (other.EnchantedAffixOld != 0) {
        EnchantedAffixOld = other.EnchantedAffixOld;
      }
      if (other.EnchantedAffixNew != 0) {
        EnchantedAffixNew = other.EnchantedAffixNew;
      }
      if (other.LegendaryBaseItemGbid != 0) {
        LegendaryBaseItemGbid = other.LegendaryBaseItemGbid;
      }
      if (other.EnchantedAffixSeed != 0) {
        EnchantedAffixSeed = other.EnchantedAffixSeed;
      }
      if (other.EnchantedAffixCount != 0) {
        EnchantedAffixCount = other.EnchantedAffixCount;
      }
      tradeAccountId_.Add(other.tradeAccountId_);
      if (other.TradeTicksLeft != 0) {
        TradeTicksLeft = other.TradeTicksLeft;
      }
      if (other.JewelRank != 0) {
        JewelRank = other.JewelRank;
      }
      if (other.ConsoleMaxLevel != 0) {
        ConsoleMaxLevel = other.ConsoleMaxLevel;
      }
      if (other.ConsolePromoItem != false) {
        ConsolePromoItem = other.ConsolePromoItem;
      }
      if (other.Hardcore != false) {
        Hardcore = other.Hardcore;
      }
      if (other.DeprecatedCraftedItemLevel != 0) {
        DeprecatedCraftedItemLevel = other.DeprecatedCraftedItemLevel;
      }
      if (other.CubeEnchantedGemType != 0) {
        CubeEnchantedGemType = other.CubeEnchantedGemType;
      }
      if (other.CubeEnchantedGemRank != 0) {
        CubeEnchantedGemRank = other.CubeEnchantedGemRank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Seed = input.ReadUInt32();
            break;
          }
          case 18: {
            if (gbHandle_ == null) {
              gbHandle_ = new global::D3.GameBalance.Handle();
            }
            input.ReadMessage(gbHandle_);
            break;
          }
          case 26:
          case 29: {
            baseAffixes_.AddEntriesFrom(input, _repeated_baseAffixes_codec);
            break;
          }
          case 34: {
            if (rareItemName_ == null) {
              rareItemName_ = new global::D3.Items.RareItemName();
            }
            input.ReadMessage(rareItemName_);
            break;
          }
          case 45: {
            DeprecatedEnchantAffix = input.ReadSFixed32();
            break;
          }
          case 48: {
            Flags = input.ReadUInt32();
            break;
          }
          case 56: {
            Durability = input.ReadUInt32();
            break;
          }
          case 64: {
            StackSize = input.ReadUInt64();
            break;
          }
          case 72: {
            DyeType = input.ReadUInt32();
            break;
          }
          case 80: {
            ItemQualityLevel = input.ReadSInt32();
            break;
          }
          case 88: {
            ItemBindingLevel = input.ReadSInt32();
            break;
          }
          case 96: {
            MaxDurability = input.ReadUInt32();
            break;
          }
          case 106: {
            contents_.AddEntriesFrom(input, _repeated_contents_codec);
            break;
          }
          case 112: {
            ItemUnlockTimestamp = input.ReadUInt64();
            break;
          }
          case 120: {
            DeprecatedEnchantRangeVal = input.ReadUInt32();
            break;
          }
          case 128: {
            LegendaryItemLevel = input.ReadUInt32();
            break;
          }
          case 141: {
            TransmogGbid = input.ReadSFixed32();
            break;
          }
          case 144: {
            SeasonCreated = input.ReadUInt32();
            break;
          }
          case 152: {
            MaxDurabilityOriginal = input.ReadUInt32();
            break;
          }
          case 165: {
            EnchantedAffixOld = input.ReadSFixed32();
            break;
          }
          case 173: {
            EnchantedAffixNew = input.ReadSFixed32();
            break;
          }
          case 181: {
            LegendaryBaseItemGbid = input.ReadSFixed32();
            break;
          }
          case 184: {
            EnchantedAffixSeed = input.ReadUInt32();
            break;
          }
          case 192: {
            EnchantedAffixCount = input.ReadUInt32();
            break;
          }
          case 202:
          case 200: {
            tradeAccountId_.AddEntriesFrom(input, _repeated_tradeAccountId_codec);
            break;
          }
          case 208: {
            TradeTicksLeft = input.ReadUInt32();
            break;
          }
          case 216: {
            JewelRank = input.ReadSInt32();
            break;
          }
          case 224: {
            ConsoleMaxLevel = input.ReadUInt32();
            break;
          }
          case 232: {
            ConsolePromoItem = input.ReadBool();
            break;
          }
          case 240: {
            Hardcore = input.ReadBool();
            break;
          }
          case 248: {
            DeprecatedCraftedItemLevel = input.ReadUInt32();
            break;
          }
          case 256: {
            CubeEnchantedGemType = input.ReadUInt32();
            break;
          }
          case 264: {
            CubeEnchantedGemRank = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeneratorList : pb::IMessage<GeneratorList> {
    private static readonly pb::MessageParser<GeneratorList> _parser = new pb::MessageParser<GeneratorList>(() => new GeneratorList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneratorList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneratorList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneratorList(GeneratorList other) : this() {
      generators_ = other.generators_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneratorList Clone() {
      return new GeneratorList(this);
    }

    /// <summary>Field number for the "generators" field.</summary>
    public const int GeneratorsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Items.Generator> _repeated_generators_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Items.Generator.Parser);
    private readonly pbc::RepeatedField<global::D3.Items.Generator> generators_ = new pbc::RepeatedField<global::D3.Items.Generator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Items.Generator> Generators {
      get { return generators_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneratorList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneratorList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!generators_.Equals(other.generators_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= generators_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      generators_.WriteTo(output, _repeated_generators_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += generators_.CalculateSize(_repeated_generators_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneratorList other) {
      if (other == null) {
        return;
      }
      generators_.Add(other.generators_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            generators_.AddEntriesFrom(input, _repeated_generators_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmbeddedGenerator : pb::IMessage<EmbeddedGenerator> {
    private static readonly pb::MessageParser<EmbeddedGenerator> _parser = new pb::MessageParser<EmbeddedGenerator>(() => new EmbeddedGenerator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmbeddedGenerator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbeddedGenerator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbeddedGenerator(EmbeddedGenerator other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      generator_ = other.generator_ != null ? other.generator_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbeddedGenerator Clone() {
      return new EmbeddedGenerator(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::D3.OnlineService.ItemId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.ItemId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "generator" field.</summary>
    public const int GeneratorFieldNumber = 2;
    private global::D3.Items.Generator generator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.Generator Generator {
      get { return generator_; }
      set {
        generator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmbeddedGenerator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmbeddedGenerator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Generator, other.Generator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (generator_ != null) hash ^= Generator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (generator_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Generator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (generator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Generator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmbeddedGenerator other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::D3.OnlineService.ItemId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.generator_ != null) {
        if (generator_ == null) {
          generator_ = new global::D3.Items.Generator();
        }
        Generator.MergeFrom(other.Generator);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::D3.OnlineService.ItemId();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (generator_ == null) {
              generator_ = new global::D3.Items.Generator();
            }
            input.ReadMessage(generator_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendGiftInfo : pb::IMessage<FriendGiftInfo> {
    private static readonly pb::MessageParser<FriendGiftInfo> _parser = new pb::MessageParser<FriendGiftInfo>(() => new FriendGiftInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendGiftInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendGiftInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendGiftInfo(FriendGiftInfo other) : this() {
      idFriendRecipient_ = other.idFriendRecipient_;
      recipientName_ = other.recipientName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendGiftInfo Clone() {
      return new FriendGiftInfo(this);
    }

    /// <summary>Field number for the "id_friend_recipient" field.</summary>
    public const int IdFriendRecipientFieldNumber = 1;
    private ulong idFriendRecipient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdFriendRecipient {
      get { return idFriendRecipient_; }
      set {
        idFriendRecipient_ = value;
      }
    }

    /// <summary>Field number for the "recipient_name" field.</summary>
    public const int RecipientNameFieldNumber = 2;
    private string recipientName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecipientName {
      get { return recipientName_; }
      set {
        recipientName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendGiftInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendGiftInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IdFriendRecipient != other.IdFriendRecipient) return false;
      if (RecipientName != other.RecipientName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IdFriendRecipient != 0UL) hash ^= IdFriendRecipient.GetHashCode();
      if (RecipientName.Length != 0) hash ^= RecipientName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdFriendRecipient != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(IdFriendRecipient);
      }
      if (RecipientName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RecipientName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IdFriendRecipient != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdFriendRecipient);
      }
      if (RecipientName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipientName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendGiftInfo other) {
      if (other == null) {
        return;
      }
      if (other.IdFriendRecipient != 0UL) {
        IdFriendRecipient = other.IdFriendRecipient;
      }
      if (other.RecipientName.Length != 0) {
        RecipientName = other.RecipientName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IdFriendRecipient = input.ReadUInt64();
            break;
          }
          case 18: {
            RecipientName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SavedItem : pb::IMessage<SavedItem> {
    private static readonly pb::MessageParser<SavedItem> _parser = new pb::MessageParser<SavedItem>(() => new SavedItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SavedItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedItem(SavedItem other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      ownerEntityId_ = other.ownerEntityId_ != null ? other.ownerEntityId_.Clone() : null;
      socketId_ = other.socketId_ != null ? other.socketId_.Clone() : null;
      hirelingClass_ = other.hirelingClass_;
      itemSlot_ = other.itemSlot_;
      squareIndex_ = other.squareIndex_;
      usedSocketCount_ = other.usedSocketCount_;
      generator_ = other.generator_ != null ? other.generator_.Clone() : null;
      friendGiftInfo_ = other.friendGiftInfo_ != null ? other.friendGiftInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SavedItem Clone() {
      return new SavedItem(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::D3.OnlineService.ItemId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.ItemId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "owner_entity_id" field.</summary>
    public const int OwnerEntityIdFieldNumber = 2;
    private global::D3.OnlineService.EntityId ownerEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId OwnerEntityId {
      get { return ownerEntityId_; }
      set {
        ownerEntityId_ = value;
      }
    }

    /// <summary>Field number for the "socket_id" field.</summary>
    public const int SocketIdFieldNumber = 3;
    private global::D3.OnlineService.ItemId socketId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.ItemId SocketId {
      get { return socketId_; }
      set {
        socketId_ = value;
      }
    }

    /// <summary>Field number for the "hireling_class" field.</summary>
    public const int HirelingClassFieldNumber = 4;
    private int hirelingClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HirelingClass {
      get { return hirelingClass_; }
      set {
        hirelingClass_ = value;
      }
    }

    /// <summary>Field number for the "item_slot" field.</summary>
    public const int ItemSlotFieldNumber = 5;
    private int itemSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemSlot {
      get { return itemSlot_; }
      set {
        itemSlot_ = value;
      }
    }

    /// <summary>Field number for the "square_index" field.</summary>
    public const int SquareIndexFieldNumber = 6;
    private int squareIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SquareIndex {
      get { return squareIndex_; }
      set {
        squareIndex_ = value;
      }
    }

    /// <summary>Field number for the "used_socket_count" field.</summary>
    public const int UsedSocketCountFieldNumber = 7;
    private uint usedSocketCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UsedSocketCount {
      get { return usedSocketCount_; }
      set {
        usedSocketCount_ = value;
      }
    }

    /// <summary>Field number for the "generator" field.</summary>
    public const int GeneratorFieldNumber = 8;
    private global::D3.Items.Generator generator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.Generator Generator {
      get { return generator_; }
      set {
        generator_ = value;
      }
    }

    /// <summary>Field number for the "friend_gift_info" field.</summary>
    public const int FriendGiftInfoFieldNumber = 9;
    private global::D3.Items.FriendGiftInfo friendGiftInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.FriendGiftInfo FriendGiftInfo {
      get { return friendGiftInfo_; }
      set {
        friendGiftInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SavedItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SavedItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(OwnerEntityId, other.OwnerEntityId)) return false;
      if (!object.Equals(SocketId, other.SocketId)) return false;
      if (HirelingClass != other.HirelingClass) return false;
      if (ItemSlot != other.ItemSlot) return false;
      if (SquareIndex != other.SquareIndex) return false;
      if (UsedSocketCount != other.UsedSocketCount) return false;
      if (!object.Equals(Generator, other.Generator)) return false;
      if (!object.Equals(FriendGiftInfo, other.FriendGiftInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (ownerEntityId_ != null) hash ^= OwnerEntityId.GetHashCode();
      if (socketId_ != null) hash ^= SocketId.GetHashCode();
      if (HirelingClass != 0) hash ^= HirelingClass.GetHashCode();
      if (ItemSlot != 0) hash ^= ItemSlot.GetHashCode();
      if (SquareIndex != 0) hash ^= SquareIndex.GetHashCode();
      if (UsedSocketCount != 0) hash ^= UsedSocketCount.GetHashCode();
      if (generator_ != null) hash ^= Generator.GetHashCode();
      if (friendGiftInfo_ != null) hash ^= FriendGiftInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (ownerEntityId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OwnerEntityId);
      }
      if (socketId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SocketId);
      }
      if (HirelingClass != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(HirelingClass);
      }
      if (ItemSlot != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(ItemSlot);
      }
      if (SquareIndex != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(SquareIndex);
      }
      if (UsedSocketCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(UsedSocketCount);
      }
      if (generator_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Generator);
      }
      if (friendGiftInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FriendGiftInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (ownerEntityId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OwnerEntityId);
      }
      if (socketId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocketId);
      }
      if (HirelingClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(HirelingClass);
      }
      if (ItemSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ItemSlot);
      }
      if (SquareIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SquareIndex);
      }
      if (UsedSocketCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UsedSocketCount);
      }
      if (generator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Generator);
      }
      if (friendGiftInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendGiftInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SavedItem other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::D3.OnlineService.ItemId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.ownerEntityId_ != null) {
        if (ownerEntityId_ == null) {
          ownerEntityId_ = new global::D3.OnlineService.EntityId();
        }
        OwnerEntityId.MergeFrom(other.OwnerEntityId);
      }
      if (other.socketId_ != null) {
        if (socketId_ == null) {
          socketId_ = new global::D3.OnlineService.ItemId();
        }
        SocketId.MergeFrom(other.SocketId);
      }
      if (other.HirelingClass != 0) {
        HirelingClass = other.HirelingClass;
      }
      if (other.ItemSlot != 0) {
        ItemSlot = other.ItemSlot;
      }
      if (other.SquareIndex != 0) {
        SquareIndex = other.SquareIndex;
      }
      if (other.UsedSocketCount != 0) {
        UsedSocketCount = other.UsedSocketCount;
      }
      if (other.generator_ != null) {
        if (generator_ == null) {
          generator_ = new global::D3.Items.Generator();
        }
        Generator.MergeFrom(other.Generator);
      }
      if (other.friendGiftInfo_ != null) {
        if (friendGiftInfo_ == null) {
          friendGiftInfo_ = new global::D3.Items.FriendGiftInfo();
        }
        FriendGiftInfo.MergeFrom(other.FriendGiftInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::D3.OnlineService.ItemId();
            }
            input.ReadMessage(id_);
            break;
          }
          case 18: {
            if (ownerEntityId_ == null) {
              ownerEntityId_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(ownerEntityId_);
            break;
          }
          case 26: {
            if (socketId_ == null) {
              socketId_ = new global::D3.OnlineService.ItemId();
            }
            input.ReadMessage(socketId_);
            break;
          }
          case 32: {
            HirelingClass = input.ReadSInt32();
            break;
          }
          case 40: {
            ItemSlot = input.ReadSInt32();
            break;
          }
          case 48: {
            SquareIndex = input.ReadSInt32();
            break;
          }
          case 56: {
            UsedSocketCount = input.ReadUInt32();
            break;
          }
          case 66: {
            if (generator_ == null) {
              generator_ = new global::D3.Items.Generator();
            }
            input.ReadMessage(generator_);
            break;
          }
          case 74: {
            if (friendGiftInfo_ == null) {
              friendGiftInfo_ = new global::D3.Items.FriendGiftInfo();
            }
            input.ReadMessage(friendGiftInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemList : pb::IMessage<ItemList> {
    private static readonly pb::MessageParser<ItemList> _parser = new pb::MessageParser<ItemList>(() => new ItemList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList(ItemList other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList Clone() {
      return new ItemList(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Items.SavedItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Items.SavedItem.Parser);
    private readonly pbc::RepeatedField<global::D3.Items.SavedItem> items_ = new pbc::RepeatedField<global::D3.Items.SavedItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Items.SavedItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemList other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MailAttachments : pb::IMessage<MailAttachments> {
    private static readonly pb::MessageParser<MailAttachments> _parser = new pb::MessageParser<MailAttachments>(() => new MailAttachments());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailAttachments> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAttachments() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAttachments(MailAttachments other) : this() {
      items_ = other.items_ != null ? other.items_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MailAttachments Clone() {
      return new MailAttachments(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private global::D3.Items.ItemList items_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.ItemList Items {
      get { return items_; }
      set {
        items_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MailAttachments);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MailAttachments other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Items, other.Items)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (items_ != null) hash ^= Items.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (items_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Items);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (items_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Items);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MailAttachments other) {
      if (other == null) {
        return;
      }
      if (other.items_ != null) {
        if (items_ == null) {
          items_ = new global::D3.Items.ItemList();
        }
        Items.MergeFrom(other.Items);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (items_ == null) {
              items_ = new global::D3.Items.ItemList();
            }
            input.ReadMessage(items_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mail : pb::IMessage<Mail> {
    private static readonly pb::MessageParser<Mail> _parser = new pb::MessageParser<Mail>(() => new Mail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail(Mail other) : this() {
      accountTo_ = other.accountTo_ != null ? other.accountTo_.Clone() : null;
      accountFrom_ = other.accountFrom_ != null ? other.accountFrom_.Clone() : null;
      mailId_ = other.mailId_;
      title_ = other.title_;
      body_ = other.body_;
      status_ = other.status_;
      sendTime_ = other.sendTime_;
      attachments_ = other.attachments_ != null ? other.attachments_.Clone() : null;
      partitionId_ = other.partitionId_;
      seasonCreated_ = other.seasonCreated_;
      expireAt_ = other.expireAt_;
      flags_ = other.flags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail Clone() {
      return new Mail(this);
    }

    /// <summary>Field number for the "account_to" field.</summary>
    public const int AccountToFieldNumber = 1;
    private global::D3.OnlineService.EntityId accountTo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId AccountTo {
      get { return accountTo_; }
      set {
        accountTo_ = value;
      }
    }

    /// <summary>Field number for the "account_from" field.</summary>
    public const int AccountFromFieldNumber = 2;
    private global::D3.OnlineService.EntityId accountFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.EntityId AccountFrom {
      get { return accountFrom_; }
      set {
        accountFrom_ = value;
      }
    }

    /// <summary>Field number for the "mail_id" field.</summary>
    public const int MailIdFieldNumber = 3;
    private ulong mailId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MailId {
      get { return mailId_; }
      set {
        mailId_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 5;
    private string body_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "send_time" field.</summary>
    public const int SendTimeFieldNumber = 7;
    private uint sendTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "attachments" field.</summary>
    public const int AttachmentsFieldNumber = 8;
    private global::D3.Items.MailAttachments attachments_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Items.MailAttachments Attachments {
      get { return attachments_; }
      set {
        attachments_ = value;
      }
    }

    /// <summary>Field number for the "partition_id" field.</summary>
    public const int PartitionIdFieldNumber = 9;
    private uint partitionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "season_created" field.</summary>
    public const int SeasonCreatedFieldNumber = 10;
    private uint seasonCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeasonCreated {
      get { return seasonCreated_; }
      set {
        seasonCreated_ = value;
      }
    }

    /// <summary>Field number for the "expire_at" field.</summary>
    public const int ExpireAtFieldNumber = 11;
    private ulong expireAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireAt {
      get { return expireAt_; }
      set {
        expireAt_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 12;
    private uint flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccountTo, other.AccountTo)) return false;
      if (!object.Equals(AccountFrom, other.AccountFrom)) return false;
      if (MailId != other.MailId) return false;
      if (Title != other.Title) return false;
      if (Body != other.Body) return false;
      if (Status != other.Status) return false;
      if (SendTime != other.SendTime) return false;
      if (!object.Equals(Attachments, other.Attachments)) return false;
      if (PartitionId != other.PartitionId) return false;
      if (SeasonCreated != other.SeasonCreated) return false;
      if (ExpireAt != other.ExpireAt) return false;
      if (Flags != other.Flags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accountTo_ != null) hash ^= AccountTo.GetHashCode();
      if (accountFrom_ != null) hash ^= AccountFrom.GetHashCode();
      if (MailId != 0UL) hash ^= MailId.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (SendTime != 0) hash ^= SendTime.GetHashCode();
      if (attachments_ != null) hash ^= Attachments.GetHashCode();
      if (PartitionId != 0) hash ^= PartitionId.GetHashCode();
      if (SeasonCreated != 0) hash ^= SeasonCreated.GetHashCode();
      if (ExpireAt != 0UL) hash ^= ExpireAt.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (accountTo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccountTo);
      }
      if (accountFrom_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AccountFrom);
      }
      if (MailId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MailId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Body);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Status);
      }
      if (SendTime != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SendTime);
      }
      if (attachments_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Attachments);
      }
      if (PartitionId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PartitionId);
      }
      if (SeasonCreated != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SeasonCreated);
      }
      if (ExpireAt != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(ExpireAt);
      }
      if (Flags != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Flags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accountTo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountTo);
      }
      if (accountFrom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountFrom);
      }
      if (MailId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MailId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (SendTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendTime);
      }
      if (attachments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attachments);
      }
      if (PartitionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartitionId);
      }
      if (SeasonCreated != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeasonCreated);
      }
      if (ExpireAt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireAt);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mail other) {
      if (other == null) {
        return;
      }
      if (other.accountTo_ != null) {
        if (accountTo_ == null) {
          accountTo_ = new global::D3.OnlineService.EntityId();
        }
        AccountTo.MergeFrom(other.AccountTo);
      }
      if (other.accountFrom_ != null) {
        if (accountFrom_ == null) {
          accountFrom_ = new global::D3.OnlineService.EntityId();
        }
        AccountFrom.MergeFrom(other.AccountFrom);
      }
      if (other.MailId != 0UL) {
        MailId = other.MailId;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.SendTime != 0) {
        SendTime = other.SendTime;
      }
      if (other.attachments_ != null) {
        if (attachments_ == null) {
          attachments_ = new global::D3.Items.MailAttachments();
        }
        Attachments.MergeFrom(other.Attachments);
      }
      if (other.PartitionId != 0) {
        PartitionId = other.PartitionId;
      }
      if (other.SeasonCreated != 0) {
        SeasonCreated = other.SeasonCreated;
      }
      if (other.ExpireAt != 0UL) {
        ExpireAt = other.ExpireAt;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accountTo_ == null) {
              accountTo_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(accountTo_);
            break;
          }
          case 18: {
            if (accountFrom_ == null) {
              accountFrom_ = new global::D3.OnlineService.EntityId();
            }
            input.ReadMessage(accountFrom_);
            break;
          }
          case 24: {
            MailId = input.ReadUInt64();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
          case 42: {
            Body = input.ReadString();
            break;
          }
          case 48: {
            Status = input.ReadUInt32();
            break;
          }
          case 56: {
            SendTime = input.ReadUInt32();
            break;
          }
          case 66: {
            if (attachments_ == null) {
              attachments_ = new global::D3.Items.MailAttachments();
            }
            input.ReadMessage(attachments_);
            break;
          }
          case 72: {
            PartitionId = input.ReadUInt32();
            break;
          }
          case 80: {
            SeasonCreated = input.ReadUInt32();
            break;
          }
          case 88: {
            ExpireAt = input.ReadUInt64();
            break;
          }
          case 96: {
            Flags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mails : pb::IMessage<Mails> {
    private static readonly pb::MessageParser<Mails> _parser = new pb::MessageParser<Mails>(() => new Mails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mails(Mails other) : this() {
      mails_ = other.mails_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mails Clone() {
      return new Mails(this);
    }

    /// <summary>Field number for the "mails" field.</summary>
    public const int Mails_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Items.Mail> _repeated_mails_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Items.Mail.Parser);
    private readonly pbc::RepeatedField<global::D3.Items.Mail> mails_ = new pbc::RepeatedField<global::D3.Items.Mail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Items.Mail> Mails_ {
      get { return mails_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mails_.Equals(other.mails_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mails_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mails_.WriteTo(output, _repeated_mails_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mails_.CalculateSize(_repeated_mails_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mails other) {
      if (other == null) {
        return;
      }
      mails_.Add(other.mails_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            mails_.AddEntriesFrom(input, _repeated_mails_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencyData : pb::IMessage<CurrencyData> {
    private static readonly pb::MessageParser<CurrencyData> _parser = new pb::MessageParser<CurrencyData>(() => new CurrencyData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyData(CurrencyData other) : this() {
      gbidDeprecated_ = other.gbidDeprecated_;
      count_ = other.count_;
      id_ = other.id_;
      dataPersistFlags_ = other.dataPersistFlags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencyData Clone() {
      return new CurrencyData(this);
    }

    /// <summary>Field number for the "gbid_deprecated" field.</summary>
    public const int GbidDeprecatedFieldNumber = 1;
    private int gbidDeprecated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GbidDeprecated {
      get { return gbidDeprecated_; }
      set {
        gbidDeprecated_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "data_persist_flags" field.</summary>
    public const int DataPersistFlagsFieldNumber = 4;
    private uint dataPersistFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataPersistFlags {
      get { return dataPersistFlags_; }
      set {
        dataPersistFlags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GbidDeprecated != other.GbidDeprecated) return false;
      if (Count != other.Count) return false;
      if (Id != other.Id) return false;
      if (DataPersistFlags != other.DataPersistFlags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GbidDeprecated != 0) hash ^= GbidDeprecated.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DataPersistFlags != 0) hash ^= DataPersistFlags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GbidDeprecated != 0) {
        output.WriteRawTag(13);
        output.WriteSFixed32(GbidDeprecated);
      }
      if (Count != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Count);
      }
      if (Id != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Id);
      }
      if (DataPersistFlags != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DataPersistFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GbidDeprecated != 0) {
        size += 1 + 4;
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (DataPersistFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataPersistFlags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencyData other) {
      if (other == null) {
        return;
      }
      if (other.GbidDeprecated != 0) {
        GbidDeprecated = other.GbidDeprecated;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DataPersistFlags != 0) {
        DataPersistFlags = other.DataPersistFlags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            GbidDeprecated = input.ReadSFixed32();
            break;
          }
          case 16: {
            Count = input.ReadInt64();
            break;
          }
          case 24: {
            Id = input.ReadUInt32();
            break;
          }
          case 32: {
            DataPersistFlags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurrencySavedData : pb::IMessage<CurrencySavedData> {
    private static readonly pb::MessageParser<CurrencySavedData> _parser = new pb::MessageParser<CurrencySavedData>(() => new CurrencySavedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrencySavedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Items.ItemsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencySavedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencySavedData(CurrencySavedData other) : this() {
      currency_ = other.currency_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrencySavedData Clone() {
      return new CurrencySavedData(this);
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Items.CurrencyData> _repeated_currency_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Items.CurrencyData.Parser);
    private readonly pbc::RepeatedField<global::D3.Items.CurrencyData> currency_ = new pbc::RepeatedField<global::D3.Items.CurrencyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Items.CurrencyData> Currency {
      get { return currency_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrencySavedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrencySavedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!currency_.Equals(other.currency_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= currency_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      currency_.WriteTo(output, _repeated_currency_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += currency_.CalculateSize(_repeated_currency_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrencySavedData other) {
      if (other == null) {
        return;
      }
      currency_.Add(other.currency_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            currency_.AddEntriesFrom(input, _repeated_currency_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
