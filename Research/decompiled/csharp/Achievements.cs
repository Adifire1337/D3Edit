// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Achievements.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace D3.Achievements {

  /// <summary>Holder for reflection information generated from Achievements.proto</summary>
  public static partial class AchievementsReflection {

    #region Descriptor
    /// <summary>File descriptor for Achievements.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AchievementsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJBY2hpZXZlbWVudHMucHJvdG8SD0QzLkFjaGlldmVtZW50cxoTT25saW5l",
            "U2VydmljZS5wcm90byJFChdBY2hpZXZlbWVudFVwZGF0ZVJlY29yZBIWCg5h",
            "Y2hpZXZlbWVudF9pZBgBIAEoBBISCgpjb21wbGV0aW9uGAIgASgFImYKFENy",
            "aXRlcmlhVXBkYXRlUmVjb3JkEiIKGmNyaXRlcmlhX0lkXzMyX2FuZF9mbGFn",
            "c184GAEgASgNEhUKDXN0YXJ0X3RpbWVfMzIYAiABKA0SEwoLcXVhbnRpdHlf",
            "MzIYAyABKA0ivAEKCFNuYXBzaG90EkYKFGFjaGlldmVtZW50X3NuYXBzaG90",
            "GAEgAygLMiguRDMuQWNoaWV2ZW1lbnRzLkFjaGlldmVtZW50VXBkYXRlUmVj",
            "b3JkEkAKEWNyaXRlcmlhX3NuYXBzaG90GAIgAygLMiUuRDMuQWNoaWV2ZW1l",
            "bnRzLkNyaXRlcmlhVXBkYXRlUmVjb3JkEg4KBmhlYWRlchgDIAEoBBIWCg5j",
            "b250ZW50X2hhbmRsZRgEIAEoCSJXChFQYXJ0aXRpb25TbmFwc2hvdBIRCglw",
            "YXJ0aXRpb24YASABKA0SLwoMYWNoaWV2ZW1lbnRzGAIgASgLMhkuRDMuQWNo",
            "aWV2ZW1lbnRzLlNuYXBzaG90IiUKFUFjaGlldmVtZW50c1Jlc2V0RGF0ZRIM",
            "CgRkYXRlGAEgASgDIncKHkFjaGlldmVtZW50QXdhcmRlZE5vdGlmaWNhdGlv",
            "bhI8Cg9nYW1lX2FjY291bnRfaWQYASABKAsyIy5EMy5PbmxpbmVTZXJ2aWNl",
            "LkdhbWVBY2NvdW50SGFuZGxlEhcKD2FjaGlldmVtZW50X2lkcxgCIAMoBCI4",
            "Cg1EQkFjaGlldmVtZW50EhMKC2FjaGlldmVtZW50GAEgASgNEhIKCmNvbXBs",
            "ZXRpb24YAiABKA0iRgoOREJBY2hpZXZlbWVudHMSNAoMYWNoaWV2ZW1lbnRz",
            "GAEgAygLMh4uRDMuQWNoaWV2ZW1lbnRzLkRCQWNoaWV2ZW1lbnRiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::D3.OnlineService.OnlineServiceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.AchievementUpdateRecord), global::D3.Achievements.AchievementUpdateRecord.Parser, new[]{ "AchievementId", "Completion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.CriteriaUpdateRecord), global::D3.Achievements.CriteriaUpdateRecord.Parser, new[]{ "CriteriaId32AndFlags8", "StartTime32", "Quantity32" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.Snapshot), global::D3.Achievements.Snapshot.Parser, new[]{ "AchievementSnapshot", "CriteriaSnapshot", "Header", "ContentHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.PartitionSnapshot), global::D3.Achievements.PartitionSnapshot.Parser, new[]{ "Partition", "Achievements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.AchievementsResetDate), global::D3.Achievements.AchievementsResetDate.Parser, new[]{ "Date" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.AchievementAwardedNotification), global::D3.Achievements.AchievementAwardedNotification.Parser, new[]{ "GameAccountId", "AchievementIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.DBAchievement), global::D3.Achievements.DBAchievement.Parser, new[]{ "Achievement", "Completion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::D3.Achievements.DBAchievements), global::D3.Achievements.DBAchievements.Parser, new[]{ "Achievements" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AchievementUpdateRecord : pb::IMessage<AchievementUpdateRecord> {
    private static readonly pb::MessageParser<AchievementUpdateRecord> _parser = new pb::MessageParser<AchievementUpdateRecord>(() => new AchievementUpdateRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AchievementUpdateRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementUpdateRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementUpdateRecord(AchievementUpdateRecord other) : this() {
      achievementId_ = other.achievementId_;
      completion_ = other.completion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementUpdateRecord Clone() {
      return new AchievementUpdateRecord(this);
    }

    /// <summary>Field number for the "achievement_id" field.</summary>
    public const int AchievementIdFieldNumber = 1;
    private ulong achievementId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AchievementId {
      get { return achievementId_; }
      set {
        achievementId_ = value;
      }
    }

    /// <summary>Field number for the "completion" field.</summary>
    public const int CompletionFieldNumber = 2;
    private int completion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Completion {
      get { return completion_; }
      set {
        completion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AchievementUpdateRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AchievementUpdateRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AchievementId != other.AchievementId) return false;
      if (Completion != other.Completion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AchievementId != 0UL) hash ^= AchievementId.GetHashCode();
      if (Completion != 0) hash ^= Completion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AchievementId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AchievementId);
      }
      if (Completion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Completion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AchievementId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AchievementId);
      }
      if (Completion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Completion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AchievementUpdateRecord other) {
      if (other == null) {
        return;
      }
      if (other.AchievementId != 0UL) {
        AchievementId = other.AchievementId;
      }
      if (other.Completion != 0) {
        Completion = other.Completion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AchievementId = input.ReadUInt64();
            break;
          }
          case 16: {
            Completion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CriteriaUpdateRecord : pb::IMessage<CriteriaUpdateRecord> {
    private static readonly pb::MessageParser<CriteriaUpdateRecord> _parser = new pb::MessageParser<CriteriaUpdateRecord>(() => new CriteriaUpdateRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CriteriaUpdateRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriteriaUpdateRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriteriaUpdateRecord(CriteriaUpdateRecord other) : this() {
      criteriaId32AndFlags8_ = other.criteriaId32AndFlags8_;
      startTime32_ = other.startTime32_;
      quantity32_ = other.quantity32_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CriteriaUpdateRecord Clone() {
      return new CriteriaUpdateRecord(this);
    }

    /// <summary>Field number for the "criteria_Id_32_and_flags_8" field.</summary>
    public const int CriteriaId32AndFlags8FieldNumber = 1;
    private uint criteriaId32AndFlags8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CriteriaId32AndFlags8 {
      get { return criteriaId32AndFlags8_; }
      set {
        criteriaId32AndFlags8_ = value;
      }
    }

    /// <summary>Field number for the "start_time_32" field.</summary>
    public const int StartTime32FieldNumber = 2;
    private uint startTime32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartTime32 {
      get { return startTime32_; }
      set {
        startTime32_ = value;
      }
    }

    /// <summary>Field number for the "quantity_32" field.</summary>
    public const int Quantity32FieldNumber = 3;
    private uint quantity32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity32 {
      get { return quantity32_; }
      set {
        quantity32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CriteriaUpdateRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CriteriaUpdateRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CriteriaId32AndFlags8 != other.CriteriaId32AndFlags8) return false;
      if (StartTime32 != other.StartTime32) return false;
      if (Quantity32 != other.Quantity32) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CriteriaId32AndFlags8 != 0) hash ^= CriteriaId32AndFlags8.GetHashCode();
      if (StartTime32 != 0) hash ^= StartTime32.GetHashCode();
      if (Quantity32 != 0) hash ^= Quantity32.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CriteriaId32AndFlags8 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CriteriaId32AndFlags8);
      }
      if (StartTime32 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartTime32);
      }
      if (Quantity32 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quantity32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CriteriaId32AndFlags8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CriteriaId32AndFlags8);
      }
      if (StartTime32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartTime32);
      }
      if (Quantity32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity32);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CriteriaUpdateRecord other) {
      if (other == null) {
        return;
      }
      if (other.CriteriaId32AndFlags8 != 0) {
        CriteriaId32AndFlags8 = other.CriteriaId32AndFlags8;
      }
      if (other.StartTime32 != 0) {
        StartTime32 = other.StartTime32;
      }
      if (other.Quantity32 != 0) {
        Quantity32 = other.Quantity32;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CriteriaId32AndFlags8 = input.ReadUInt32();
            break;
          }
          case 16: {
            StartTime32 = input.ReadUInt32();
            break;
          }
          case 24: {
            Quantity32 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Snapshot : pb::IMessage<Snapshot> {
    private static readonly pb::MessageParser<Snapshot> _parser = new pb::MessageParser<Snapshot>(() => new Snapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Snapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot(Snapshot other) : this() {
      achievementSnapshot_ = other.achievementSnapshot_.Clone();
      criteriaSnapshot_ = other.criteriaSnapshot_.Clone();
      header_ = other.header_;
      contentHandle_ = other.contentHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot Clone() {
      return new Snapshot(this);
    }

    /// <summary>Field number for the "achievement_snapshot" field.</summary>
    public const int AchievementSnapshotFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Achievements.AchievementUpdateRecord> _repeated_achievementSnapshot_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Achievements.AchievementUpdateRecord.Parser);
    private readonly pbc::RepeatedField<global::D3.Achievements.AchievementUpdateRecord> achievementSnapshot_ = new pbc::RepeatedField<global::D3.Achievements.AchievementUpdateRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Achievements.AchievementUpdateRecord> AchievementSnapshot {
      get { return achievementSnapshot_; }
    }

    /// <summary>Field number for the "criteria_snapshot" field.</summary>
    public const int CriteriaSnapshotFieldNumber = 2;
    private static readonly pb::FieldCodec<global::D3.Achievements.CriteriaUpdateRecord> _repeated_criteriaSnapshot_codec
        = pb::FieldCodec.ForMessage(18, global::D3.Achievements.CriteriaUpdateRecord.Parser);
    private readonly pbc::RepeatedField<global::D3.Achievements.CriteriaUpdateRecord> criteriaSnapshot_ = new pbc::RepeatedField<global::D3.Achievements.CriteriaUpdateRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Achievements.CriteriaUpdateRecord> CriteriaSnapshot {
      get { return criteriaSnapshot_; }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 3;
    private ulong header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "content_handle" field.</summary>
    public const int ContentHandleFieldNumber = 4;
    private string contentHandle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentHandle {
      get { return contentHandle_; }
      set {
        contentHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Snapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Snapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!achievementSnapshot_.Equals(other.achievementSnapshot_)) return false;
      if(!criteriaSnapshot_.Equals(other.criteriaSnapshot_)) return false;
      if (Header != other.Header) return false;
      if (ContentHandle != other.ContentHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= achievementSnapshot_.GetHashCode();
      hash ^= criteriaSnapshot_.GetHashCode();
      if (Header != 0UL) hash ^= Header.GetHashCode();
      if (ContentHandle.Length != 0) hash ^= ContentHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      achievementSnapshot_.WriteTo(output, _repeated_achievementSnapshot_codec);
      criteriaSnapshot_.WriteTo(output, _repeated_criteriaSnapshot_codec);
      if (Header != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Header);
      }
      if (ContentHandle.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContentHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += achievementSnapshot_.CalculateSize(_repeated_achievementSnapshot_codec);
      size += criteriaSnapshot_.CalculateSize(_repeated_criteriaSnapshot_codec);
      if (Header != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Header);
      }
      if (ContentHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Snapshot other) {
      if (other == null) {
        return;
      }
      achievementSnapshot_.Add(other.achievementSnapshot_);
      criteriaSnapshot_.Add(other.criteriaSnapshot_);
      if (other.Header != 0UL) {
        Header = other.Header;
      }
      if (other.ContentHandle.Length != 0) {
        ContentHandle = other.ContentHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            achievementSnapshot_.AddEntriesFrom(input, _repeated_achievementSnapshot_codec);
            break;
          }
          case 18: {
            criteriaSnapshot_.AddEntriesFrom(input, _repeated_criteriaSnapshot_codec);
            break;
          }
          case 24: {
            Header = input.ReadUInt64();
            break;
          }
          case 34: {
            ContentHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartitionSnapshot : pb::IMessage<PartitionSnapshot> {
    private static readonly pb::MessageParser<PartitionSnapshot> _parser = new pb::MessageParser<PartitionSnapshot>(() => new PartitionSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartitionSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionSnapshot(PartitionSnapshot other) : this() {
      partition_ = other.partition_;
      achievements_ = other.achievements_ != null ? other.achievements_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartitionSnapshot Clone() {
      return new PartitionSnapshot(this);
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 1;
    private uint partition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partition {
      get { return partition_; }
      set {
        partition_ = value;
      }
    }

    /// <summary>Field number for the "achievements" field.</summary>
    public const int AchievementsFieldNumber = 2;
    private global::D3.Achievements.Snapshot achievements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.Achievements.Snapshot Achievements {
      get { return achievements_; }
      set {
        achievements_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartitionSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartitionSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Partition != other.Partition) return false;
      if (!object.Equals(Achievements, other.Achievements)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Partition != 0) hash ^= Partition.GetHashCode();
      if (achievements_ != null) hash ^= Achievements.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Partition != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Partition);
      }
      if (achievements_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Achievements);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Partition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Partition);
      }
      if (achievements_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Achievements);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartitionSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.Partition != 0) {
        Partition = other.Partition;
      }
      if (other.achievements_ != null) {
        if (achievements_ == null) {
          achievements_ = new global::D3.Achievements.Snapshot();
        }
        Achievements.MergeFrom(other.Achievements);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Partition = input.ReadUInt32();
            break;
          }
          case 18: {
            if (achievements_ == null) {
              achievements_ = new global::D3.Achievements.Snapshot();
            }
            input.ReadMessage(achievements_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AchievementsResetDate : pb::IMessage<AchievementsResetDate> {
    private static readonly pb::MessageParser<AchievementsResetDate> _parser = new pb::MessageParser<AchievementsResetDate>(() => new AchievementsResetDate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AchievementsResetDate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementsResetDate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementsResetDate(AchievementsResetDate other) : this() {
      date_ = other.date_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementsResetDate Clone() {
      return new AchievementsResetDate(this);
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 1;
    private long date_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AchievementsResetDate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AchievementsResetDate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Date != other.Date) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Date != 0L) hash ^= Date.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Date != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Date);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Date != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AchievementsResetDate other) {
      if (other == null) {
        return;
      }
      if (other.Date != 0L) {
        Date = other.Date;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Date = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AchievementAwardedNotification : pb::IMessage<AchievementAwardedNotification> {
    private static readonly pb::MessageParser<AchievementAwardedNotification> _parser = new pb::MessageParser<AchievementAwardedNotification>(() => new AchievementAwardedNotification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AchievementAwardedNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementAwardedNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementAwardedNotification(AchievementAwardedNotification other) : this() {
      gameAccountId_ = other.gameAccountId_ != null ? other.gameAccountId_.Clone() : null;
      achievementIds_ = other.achievementIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AchievementAwardedNotification Clone() {
      return new AchievementAwardedNotification(this);
    }

    /// <summary>Field number for the "game_account_id" field.</summary>
    public const int GameAccountIdFieldNumber = 1;
    private global::D3.OnlineService.GameAccountHandle gameAccountId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::D3.OnlineService.GameAccountHandle GameAccountId {
      get { return gameAccountId_; }
      set {
        gameAccountId_ = value;
      }
    }

    /// <summary>Field number for the "achievement_ids" field.</summary>
    public const int AchievementIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_achievementIds_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> achievementIds_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> AchievementIds {
      get { return achievementIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AchievementAwardedNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AchievementAwardedNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameAccountId, other.GameAccountId)) return false;
      if(!achievementIds_.Equals(other.achievementIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameAccountId_ != null) hash ^= GameAccountId.GetHashCode();
      hash ^= achievementIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameAccountId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameAccountId);
      }
      achievementIds_.WriteTo(output, _repeated_achievementIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameAccountId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameAccountId);
      }
      size += achievementIds_.CalculateSize(_repeated_achievementIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AchievementAwardedNotification other) {
      if (other == null) {
        return;
      }
      if (other.gameAccountId_ != null) {
        if (gameAccountId_ == null) {
          gameAccountId_ = new global::D3.OnlineService.GameAccountHandle();
        }
        GameAccountId.MergeFrom(other.GameAccountId);
      }
      achievementIds_.Add(other.achievementIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameAccountId_ == null) {
              gameAccountId_ = new global::D3.OnlineService.GameAccountHandle();
            }
            input.ReadMessage(gameAccountId_);
            break;
          }
          case 18:
          case 16: {
            achievementIds_.AddEntriesFrom(input, _repeated_achievementIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DBAchievement : pb::IMessage<DBAchievement> {
    private static readonly pb::MessageParser<DBAchievement> _parser = new pb::MessageParser<DBAchievement>(() => new DBAchievement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBAchievement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBAchievement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBAchievement(DBAchievement other) : this() {
      achievement_ = other.achievement_;
      completion_ = other.completion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBAchievement Clone() {
      return new DBAchievement(this);
    }

    /// <summary>Field number for the "achievement" field.</summary>
    public const int AchievementFieldNumber = 1;
    private uint achievement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Achievement {
      get { return achievement_; }
      set {
        achievement_ = value;
      }
    }

    /// <summary>Field number for the "completion" field.</summary>
    public const int CompletionFieldNumber = 2;
    private uint completion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Completion {
      get { return completion_; }
      set {
        completion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBAchievement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBAchievement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Achievement != other.Achievement) return false;
      if (Completion != other.Completion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Achievement != 0) hash ^= Achievement.GetHashCode();
      if (Completion != 0) hash ^= Completion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Achievement != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Achievement);
      }
      if (Completion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Completion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Achievement != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Achievement);
      }
      if (Completion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Completion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBAchievement other) {
      if (other == null) {
        return;
      }
      if (other.Achievement != 0) {
        Achievement = other.Achievement;
      }
      if (other.Completion != 0) {
        Completion = other.Completion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Achievement = input.ReadUInt32();
            break;
          }
          case 16: {
            Completion = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DBAchievements : pb::IMessage<DBAchievements> {
    private static readonly pb::MessageParser<DBAchievements> _parser = new pb::MessageParser<DBAchievements>(() => new DBAchievements());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBAchievements> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::D3.Achievements.AchievementsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBAchievements() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBAchievements(DBAchievements other) : this() {
      achievements_ = other.achievements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBAchievements Clone() {
      return new DBAchievements(this);
    }

    /// <summary>Field number for the "achievements" field.</summary>
    public const int AchievementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::D3.Achievements.DBAchievement> _repeated_achievements_codec
        = pb::FieldCodec.ForMessage(10, global::D3.Achievements.DBAchievement.Parser);
    private readonly pbc::RepeatedField<global::D3.Achievements.DBAchievement> achievements_ = new pbc::RepeatedField<global::D3.Achievements.DBAchievement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::D3.Achievements.DBAchievement> Achievements {
      get { return achievements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBAchievements);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBAchievements other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!achievements_.Equals(other.achievements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= achievements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      achievements_.WriteTo(output, _repeated_achievements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += achievements_.CalculateSize(_repeated_achievements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBAchievements other) {
      if (other == null) {
        return;
      }
      achievements_.Add(other.achievements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            achievements_.AddEntriesFrom(input, _repeated_achievements_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
